{"changed":true,"filter":false,"title":"Search Results","tooltip":"/.c9/searchresults","value":"Searching for \u0001password\u0001 in\u0001/\u0001 (Found 1417 matches in 184 files)\n\n/_ide_helper.php:\n\t5109:          * Set the default password work factor.\n\t6147:          * Returns the password.\n\t6152:         public static function getPassword(){\n\t6154:             return \\Illuminate\\Http\\Request::getPassword();\n\t6198:          * and the password are not added to the generated string.\n\t7251:     class Password extends \\Illuminate\\Support\\Facades\\Password{\n\t7254:          * Send a password reset link to a user.\n\t7262:             return \\Illuminate\\Auth\\Passwords\\PasswordBroker::sendResetLink($credentials, $callback);\n\t7266:          * Send the password reset link via e-mail.\n\t7268:          * @param \\Illuminate\\Contracts\\Auth\\CanResetPassword $user\n\t7275:             return \\Illuminate\\Auth\\Passwords\\PasswordBroker::emailResetLink($user, $token, $callback);\n\t7279:          * Reset the password for the given token.\n\t7287:             return \\Illuminate\\Auth\\Passwords\\PasswordBroker::reset($credentials, $callback);\n\t7291:          * Set a custom password validator.\n\t7298:             \\Illuminate\\Auth\\Passwords\\PasswordBroker::validator($callback);\n\t7302:          * Determine if the passwords match for the request.\n\t7308:         public static function validateNewPassword($credentials){\n\t7309:             return \\Illuminate\\Auth\\Passwords\\PasswordBroker::validateNewPassword($credentials);\n\t7316:          * @return \\Illuminate\\Contracts\\Auth\\CanResetPassword \n\t7321:             return \\Illuminate\\Auth\\Passwords\\PasswordBroker::getUser($credentials);\n\t8764:          * Returns the password.\n\t8769:         public static function getPassword(){\n\t8771:             return \\Illuminate\\Http\\Request::getPassword();\n\t8815:          * and the password are not added to the generated string.\n\n/_ide_helper_models.php:\n\t133:  * @property string $password \n\t146:  * @method static \\Illuminate\\Database\\Query\\Builder|\\App\\User wherePassword($value)\n\n/composer.lock:\n\t922:             \"name\": \"ircmaxell/password-compat\",\n\t926:                 \"url\": \"https://github.com/ircmaxell/password_compat.git\",\n\t931:                 \"url\": \"https://api.github.com/repos/ircmaxell/password_compat/zipball/5c5cde8822a69545767f7c7f3058cb15ff84614c\",\n\t941:                     \"lib/password.php\"\n\t955:             \"description\": \"A compatibility library for the proposed simplified password hashing algorithm: https://wiki.php.net/rfc/password_hash\",\n\t956:             \"homepage\": \"https://github.com/ircmaxell/password_compat\",\n\t959:                 \"password\"\n\t1189:                 \"ircmaxell/password-compat\": \"~1.0\",\n\t2395:                 \"ircmaxell/password-compat\": \"1.0.*\",\n\t2405:                 \"ircmaxell/password-compat\": \"For using the BCrypt password encoder in PHP <5.5\",\n\t2409:                 \"symfony/validator\": \"For using the user password constraint\"\n\n/app/User.php:\n\t5: use Illuminate\\Auth\\Passwords\\CanResetPassword;\n\t7: use Illuminate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;\n\t9: class User extends Model implements AuthenticatableContract, CanResetPasswordContract {\n\t11: \tuse Authenticatable, CanResetPassword;\n\t25: \tprotected $fillable = ['email', 'nombre', 'apellidos', 'password', 'email_confirmation'];\n\t32: \tprotected $hidden = ['password', 'remember_token', 'email_confirmation'];\n\n/app/Http/routes.php:\n\t70: \t'password' => 'Auth\\PasswordController',\n\n/app/Http/Controllers/Auth/AuthController.php:\n\t49: \t\t\t'email' => 'required|email', 'password' => 'required',\n\t52: \t\t$credentials = $request->only('email', 'password');\n\n/app/Http/Controllers/Auth/PasswordController.php:\n\t5: use Illuminate\\Contracts\\Auth\\PasswordBroker;\n\t6: use Illuminate\\Foundation\\Auth\\ResetsPasswords;\n\t8: class PasswordController extends Controller {\n\t12: \t| Password Reset Controller\n\t15: \t| This controller is responsible for handling password reset requests\n\t21: \tuse ResetsPasswords;\n\t24: \t * Create a new password controller instance.\n\t27: \t * @param  \\Illuminate\\Contracts\\Auth\\PasswordBroker  $passwords\n\t30: \tpublic function __construct(Guard $auth, PasswordBroker $passwords)\n\t33: \t\t$this->passwords = $passwords;\n\n/app/Services/Registrar.php:\n\t21: \t\t\t'password' => 'required|confirmed|min:6',\n\t43: \t\t\t'password' => bcrypt($data['password'])\n\n/config/app.php:\n\t137: \t\t'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider',\n\t186: \t\t'Password'  => 'Illuminate\\Support\\Facades\\Password',\n\n/config/auth.php:\n\t48: \t| Password Reset Settings\n\t51: \t| Here you may set the options for resetting passwords including the view\n\t52: \t| that is your password reset e-mail. You can also set the name of the\n\t61: \t'password' => [\n\t62: \t\t'email' => 'emails.password',\n\t63: \t\t'table' => 'password_resets',\n\n/config/database.php:\n\t60: \t\t\t'password'  => env('DB_PASSWORD', ''),\n\t72: \t\t\t'password' => env('DB_PASSWORD', ''),\n\t83: \t\t\t'password' => env('DB_PASSWORD', ''),\n\n/config/mail.php:\n\t79: \t| connection. You may also set the \"password\" value below this one.\n\t87: \t| SMTP Server Password\n\t90: \t| Here you may set the password required by your SMTP server to send out\n\t96: \t'password' => env('MAIL_PASSWORD'),\n\n/database/migrations/2015_03_10_215725_crear_tabla_usuarios.php:\n\t22: \t\t\t$table->string('password', 60);\n\n/database/migrations/2015_10_11_100000_create_password_resets_table.php:\n\t6: class CreatePasswordResetsTable extends Migration {\n\t15: \t\tSchema::create('password_resets', function(Blueprint $table)\n\t30: \t\tSchema::drop('password_resets');\n\n/database/seeds/UsersSeeder.php:\n\t23: \t\t\t\t'password'=>\\Hash::make('123456'),\n\t32: \t\t\t\t'password'=>\\Hash::make('123456'),\n\t42: \t\t\t\t'password'=>\\Hash::make('123456'),\n\n/resources/assets/less/bootstrap/forms.less:\n\t101: // input[type=\"password\"]\n\n/resources/lang/en/passwords.php:\n\t7: \t| Password Reminder Language Lines\n\t11: \t| that are given by the password broker for a password update attempt\n\t12: \t| has failed, such as for an invalid token or invalid new password.\n\t16: \t\"password\" => \"Passwords must be at least six characters and match the confirmation.\",\n\t18: \t\"token\" => \"This password reset token is invalid.\",\n\t19: \t\"sent\" => \"We have e-mailed your password reset link!\",\n\t20: \t\"reset\" => \"Your password has been reset!\",\n\n/resources/views/auth/login.blade.php:\n\t32: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>\n\t34: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">\n\t52: \t\t\t\t\t\t\t\t<a class=\"btn btn-link\" href=\"{{ url('/password/email') }}\">Forgot Your Password?</a>\n\n/resources/views/auth/password.blade.php:\n\t8: \t\t\t\t<div class=\"panel-heading\">Reset Password</div>\n\t27: \t\t\t\t\t<form class=\"form-horizontal\" role=\"form\" method=\"POST\" action=\"{{ url('/password/email') }}\">\n\t40: \t\t\t\t\t\t\t\t\tSend Password Reset Link\n\n/resources/views/auth/register.blade.php:\n\t46: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>\n\t48: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">\n\t53: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Confirm Password</label>\n\t55: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password_confirmation\">\n\n/resources/views/auth/reset.blade.php:\n\t8: \t\t\t\t<div class=\"panel-heading\">Reset Password</div>\n\t21: \t\t\t\t\t<form class=\"form-horizontal\" role=\"form\" method=\"POST\" action=\"{{ url('/password/reset') }}\">\n\t33: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>\n\t35: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">\n\t40: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Confirm Password</label>\n\t42: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password_confirmation\">\n\t49: \t\t\t\t\t\t\t\t\tReset Password\n\n/resources/views/emails/password.blade.php:\n\t1: Click here to reset your password: {{ url('password/reset/'.$token) }}\n\n/resources/views/usuario/ficha.blade.php:\n\t49:                                     <label for=\"input-password\" class=\"col-sm-4 control-label\">Antigua contraseña</label>\n\t51:                                         <input type=\"text\" name=\"password\" id=\"input-password\" class=\"form-control\" placeholder=\"Rellene si cambia contraseña\"  value=\"\">\n\t59:                                     <label for=\"input-password_new\" class=\"col-sm-4 control-label\">Nueva contraseña</label>\n\t61:                                         <input type=\"text\" name=\"password_new\" id=\"input-password_new\" class=\"form-control\" placeholder=\"Rellene si cambia contraseña\"  value=\"\">\n\t69:                                     <label for=\"input-password_new1\" class=\"col-sm-4 control-label\">Confirmación nueva contraseña</label>\n\t71:                                         <input type=\"text\" name=\"password_new_confirmation\" id=\"input-password_new1\" class=\"form-control\" placeholder=\"Rellene si cambia contraseña\"  value=\"\">\n\n/storage/framework/services.json:\n\t21:         \"Illuminate\\\\Auth\\\\Passwords\\\\PasswordResetServiceProvider\",\n\t124:         \"auth.password\": \"Illuminate\\\\Auth\\\\Passwords\\\\PasswordResetServiceProvider\",\n\t125:         \"auth.password.tokens\": \"Illuminate\\\\Auth\\\\Passwords\\\\PasswordResetServiceProvider\",\n\t139:         \"Illuminate\\\\Auth\\\\Passwords\\\\PasswordResetServiceProvider\": [],\n\n/storage/framework/views/021b5b18e5b173bfd738f813bd99b1bf:\n\t37: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>\n\t39: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">\n\t44: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Confirm Password</label>\n\t46: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password_confirmation\">\n\n/storage/framework/views/2036d73e86c1a358067df355a77ea3cb:\n\t30: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>\n\t32: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">\n\t50: \t\t\t\t\t\t\t\t<a class=\"btn btn-link\" href=\"<?php echo e(url('/password/email')); ?>\">Forgot Your Password?</a>\n\n/storage/framework/views/3498a762092ca5c0c6eefbbc5dbf1a2d:\n\t48:                                     <label for=\"input-password\" class=\"col-sm-4 control-label\">Antigua contraseña</label>\n\t50:                                         <input type=\"text\" name=\"password\" id=\"input-password\" class=\"form-control\" placeholder=\"Rellene si cambia contraseña\"  value=\"\">\n\t58:                                     <label for=\"input-password_new\" class=\"col-sm-4 control-label\">Nueva contraseña</label>\n\t60:                                         <input type=\"text\" name=\"password_new\" id=\"input-password_new\" class=\"form-control\" placeholder=\"Rellene si cambia contraseña\"  value=\"\">\n\t68:                                     <label for=\"input-password_new1\" class=\"col-sm-4 control-label\">Confirmación nueva contraseña</label>\n\t70:                                         <input type=\"text\" name=\"password_new_confirmation\" id=\"input-password_new1\" class=\"form-control\" placeholder=\"Rellene si cambia contraseña\"  value=\"\">\n\n/storage/framework/views/48675853841c5563239032a75655f1f1:\n\t30: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>\n\t32: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">\n\t50: \t\t\t\t\t\t\t\t<a class=\"btn btn-link\" href=\"<?php echo e(url('/password/email')); ?>\">Forgot Your Password?</a>\n\n/storage/framework/views/4f767bae4ddbc4a5486d4136e944cccb:\n\t1: Click here to reset your password: <?php echo e(url('password/reset/'.$token)); ?>\n\n/storage/framework/views/5225f7d5ba1beb01991aa9f0cb2c31f0:\n\t30: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>\n\t32: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">\n\t50: \t\t\t\t\t\t\t\t<a class=\"btn btn-link\" href=\"<?php echo e(url('/password/email')); ?>\">Forgot Your Password?</a>\n\n/storage/framework/views/656d5bfc144616dd5531cb8712b6e98f:\n\t1: Click here to reset your password: <?php echo e(url('password/reset/'.$token)); ?>\n\n/storage/framework/views/89b2b4942a585f7634302ff903a88c73:\n\t6: \t\t\t\t<div class=\"panel-heading\">Reset Password</div>\n\t19: \t\t\t\t\t<form class=\"form-horizontal\" role=\"form\" method=\"POST\" action=\"<?php echo e(url('/password/reset')); ?>\">\n\t31: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>\n\t33: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">\n\t38: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Confirm Password</label>\n\t40: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password_confirmation\">\n\t47: \t\t\t\t\t\t\t\t\tReset Password\n\n/storage/framework/views/8bd1612cc34b7a4022c51ad6053310c1:\n\t6: \t\t\t\t<div class=\"panel-heading\">Reset Password</div>\n\t19: \t\t\t\t\t<form class=\"form-horizontal\" role=\"form\" method=\"POST\" action=\"<?php echo e(url('/password/reset')); ?>\">\n\t31: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>\n\t33: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">\n\t38: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Confirm Password</label>\n\t40: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password_confirmation\">\n\t47: \t\t\t\t\t\t\t\t\tReset Password\n\n/storage/framework/views/965afbc919cf7157406f86828fa01783:\n\t6: \t\t\t\t<div class=\"panel-heading\">Reset Password</div>\n\t26: \t\t\t\t\t<form class=\"form-horizontal\" role=\"form\" method=\"POST\" action=\"<?php echo e(url('/password/email')); ?>\">\n\t39: \t\t\t\t\t\t\t\t\tSend Password Reset Link\n\n/storage/framework/views/a01ed2515d5521724b5d84a0b8cf1fa7:\n\t44: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>\n\t46: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">\n\t51: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Confirm Password</label>\n\t53: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password_confirmation\">\n\n/storage/framework/views/b0aee9c2637cbbe26de6a1f7c503cf12:\n\t6: \t\t\t\t<div class=\"panel-heading\">Reset Password</div>\n\t26: \t\t\t\t\t<form class=\"form-horizontal\" role=\"form\" method=\"POST\" action=\"<?php echo e(url('/password/email')); ?>\">\n\t39: \t\t\t\t\t\t\t\t\tSend Password Reset Link\n\n/storage/framework/views/cab7914d3916ccf663805ae6ac9829e7:\n\t44: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>\n\t46: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">\n\t51: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Confirm Password</label>\n\t53: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password_confirmation\">\n\n/storage/logs/laravel-2015-04-04.log:\n\t202: [2015-04-04 09:59:02] local.ERROR: exception 'PDOException' with message 'SQLSTATE[28000] [1045] Access denied for user 'albafo'@'localhost' (using password: YES)' in /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Database/Connectors/Connector.php:47\n\t294: Next exception 'Illuminate\\Database\\QueryException' with message 'SQLSTATE[42S01]: Base table or view already exists: 1050 Table 'usuarios' already exists (SQL: create table `usuarios` (`id` int unsigned not null auto_increment primary key, `nombre` varchar(255) not null, `apellidos` varchar(255) not null, `email` varchar(255) not null, `password` varchar(60) not null, `confirmed` tinyint(1) not null default '0', `email_confirmation` varchar(60) not null, `remember_token` varchar(100) null, `created_at` timestamp default 0 not null, `updated_at` timestamp default 0 not null, `deleted_at` timestamp null) default character set utf8 collate utf8_unicode_ci)' in /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Database/Connection.php:620\n\n/storage/logs/laravel-2015-04-08.log:\n\t374: Next exception 'Illuminate\\Database\\QueryException' with message 'SQLSTATE[42S02]: Base table or view not found: 1146 Table 'menus.users' doesn't exist (SQL: insert into `users` (`nombre`, `apellidos`, `email`, `password`, `tipo`, `status`) values (Linnie, Orn, Bryana.Boyer@Kuphal.net, y$KOkCoL8VXjAzElFtACk0Me45AIcNCkPLFhSAuehBZG4NzZ5RjGxsC, user, 0))' in /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Database/Connection.php:620\n\n/storage/logs/laravel-2015-04-09.log:\n\t95: [2015-04-09 14:53:11] local.ERROR: exception 'PDOException' with message 'SQLSTATE[28000] [1045] Access denied for user 'albafo'@'localhost' (using password: NO)' in /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Database/Connectors/Connector.php:47\n\n/vendor/services.json:\n\t23:         \"Illuminate\\\\Auth\\\\Passwords\\\\PasswordResetServiceProvider\",\n\t129:         \"auth.password\": \"Illuminate\\\\Auth\\\\Passwords\\\\PasswordResetServiceProvider\",\n\t130:         \"auth.password.tokens\": \"Illuminate\\\\Auth\\\\Passwords\\\\PasswordResetServiceProvider\",\n\t165:         \"Illuminate\\\\Auth\\\\Passwords\\\\PasswordResetServiceProvider\": [\n\n/vendor/composer/autoload_classmap.php:\n\t23:     'App\\\\Http\\\\Controllers\\\\Auth\\\\PasswordController' => $baseDir . '/app/Http/Controllers/Auth/PasswordController.php',\n\t95:     'CreatePasswordResetsTable' => $baseDir . '/database/migrations/2015_10_11_100000_create_password_resets_table.php',\n\t766:     'Illuminate\\\\Auth\\\\Passwords\\\\CanResetPassword' => $vendorDir . '/laravel/framework/src/Illuminate/Auth/Passwords/CanResetPassword.php',\n\t767:     'Illuminate\\\\Auth\\\\Passwords\\\\DatabaseTokenRepository' => $vendorDir . '/laravel/framework/src/Illuminate/Auth/Passwords/DatabaseTokenRepository.php',\n\t768:     'Illuminate\\\\Auth\\\\Passwords\\\\PasswordBroker' => $vendorDir . '/laravel/framework/src/Illuminate/Auth/Passwords/PasswordBroker.php',\n\t769:     'Illuminate\\\\Auth\\\\Passwords\\\\PasswordResetServiceProvider' => $vendorDir . '/laravel/framework/src/Illuminate/Auth/Passwords/PasswordResetServiceProvider.php',\n\t770:     'Illuminate\\\\Auth\\\\Passwords\\\\TokenRepositoryInterface' => $vendorDir . '/laravel/framework/src/Illuminate/Auth/Passwords/TokenRepositoryInterface.php',\n\t809:     'Illuminate\\\\Contracts\\\\Auth\\\\CanResetPassword' => $vendorDir . '/laravel/framework/src/Illuminate/Contracts/Auth/CanResetPassword.php',\n\t811:     'Illuminate\\\\Contracts\\\\Auth\\\\PasswordBroker' => $vendorDir . '/laravel/framework/src/Illuminate/Contracts/Auth/PasswordBroker.php',\n\t974:     'Illuminate\\\\Foundation\\\\Auth\\\\ResetsPasswords' => $vendorDir . '/laravel/framework/src/Illuminate/Foundation/Auth/ResetsPasswords.php',\n\t1169:     'Illuminate\\\\Support\\\\Facades\\\\Password' => $vendorDir . '/laravel/framework/src/Illuminate/Support/Facades/Password.php',\n\t2569:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\UsernamePasswordToken' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/UsernamePasswordToken.php',\n\t2582:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\BCryptPasswordEncoder' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Encoder/BCryptPasswordEncoder.php',\n\t2583:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\BasePasswordEncoder' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Encoder/BasePasswordEncoder.php',\n\t2587:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\MessageDigestPasswordEncoder' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Encoder/MessageDigestPasswordEncoder.php',\n\t2588:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\PasswordEncoderInterface' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Encoder/PasswordEncoderInterface.php',\n\t2589:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\Pbkdf2PasswordEncoder' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Encoder/Pbkdf2PasswordEncoder.php',\n\t2590:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\PlaintextPasswordEncoder' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Encoder/PlaintextPasswordEncoder.php',\n\t2591:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\UserPasswordEncoder' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Encoder/UserPasswordEncoder.php',\n\t2592:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\UserPasswordEncoderInterface' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Encoder/UserPasswordEncoderInterface.php',\n\t2639:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Validator\\\\Constraints\\\\UserPassword' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Validator/Constraints/UserPassword.php',\n\t2640:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Validator\\\\Constraints\\\\UserPasswordValidator' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Validator/Constraints/UserPasswordValidator.php',\n\n/vendor/composer/autoload_files.php:\n\t11:     $vendorDir . '/ircmaxell/password-compat/lib/password.php',\n\n/vendor/composer/installed.json:\n\t267:         \"name\": \"ircmaxell/password-compat\",\n\t272:             \"url\": \"https://github.com/ircmaxell/password_compat.git\",\n\t277:             \"url\": \"https://api.github.com/repos/ircmaxell/password_compat/zipball/5c5cde8822a69545767f7c7f3058cb15ff84614c\",\n\t289:                 \"lib/password.php\"\n\t303:         \"description\": \"A compatibility library for the proposed simplified password hashing algorithm: https://wiki.php.net/rfc/password_hash\",\n\t304:         \"homepage\": \"https://github.com/ircmaxell/password_compat\",\n\t307:             \"password\"\n\t1261:             \"ircmaxell/password-compat\": \"1.0.*\",\n\t1271:             \"ircmaxell/password-compat\": \"For using the BCrypt password encoder in PHP <5.5\",\n\t1275:             \"symfony/validator\": \"For using the user password constraint\"\n\t2681:             \"ircmaxell/password-compat\": \"~1.0\",\n\n/vendor/doctrine/cache/tests/Doctrine/Tests/Common/Cache/CouchbaseCacheTest.php:\n\t16:                 $this->couchbase = new Couchbase('127.0.0.1', 'Administrator', 'password', 'default');\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php:\n\t281:      * Gets the password used by this connection.\n\t285:     public function getPassword()\n\t287:         return isset($this->_params['password']) ? $this->_params['password'] : null;\n\t357:         $password = isset($this->_params['password']) ?\n\t358:                 $this->_params['password'] : null;\n\t360:         $this->_conn = $this->_driver->connect($this->_params, $user, $password, $driverOptions);\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver.php:\n\t35:      * @param string|null $password      The password to use when connecting.\n\t40:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array());\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/DriverManager.php:\n\t105:      * <b>password (string)</b>:\n\t106:      * The password to use when connecting.\n\t257:             $params['password'] = $url['pass'];\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connections/MasterSlaveConnection.php:\n\t71:  *    'master' => array('user' => '', 'password' => '', 'host' => '', 'dbname' => ''),\n\t73:  *        array('user' => 'slave1', 'password', 'host' => '', 'dbname' => ''),\n\t74:  *        array('user' => 'slave2', 'password', 'host' => '', 'dbname' => ''),\n\t214:         $password = isset($connectionParams['password']) ? $connectionParams['password'] : null;\n\t216:         return $this->_driver->connect($connectionParams, $user, $password, $driverOptions);\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:\n\t35:      * @param string|null $password\n\t40:     public function __construct($dsn, $user = null, $password = null, array $options = null)\n\t43:             parent::__construct($dsn, $user, $password, $options);\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/DrizzlePDOMySql/Driver.php:\n\t35:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())\n\t40:             $password,\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/IBMDB2/DB2Connection.php:\n\t35:      * @param string $password\n\t40:     public function __construct(array $params, $username, $password, $driverOptions = array())\n\t45:             $this->_conn = db2_pconnect($params['dbname'], $username, $password, $driverOptions);\n\t47:             $this->_conn = db2_connect($params['dbname'], $username, $password, $driverOptions);\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/IBMDB2/DB2Driver.php:\n\t35:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())\n\t48:                      ';PWD='      . $password .';';\n\t54:             $password = null;\n\t57:         return new DB2Connection($params, $username, $password, $driverOptions);\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/Mysqli/Driver.php:\n\t33:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())\n\t36:             return new MysqliConnection($params, $username, $password, $driverOptions);\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/Mysqli/MysqliConnection.php:\n\t45:      * @param string $password\n\t50:     public function __construct(array $params, $username, $password, array $driverOptions = array())\n\t70:         if ( ! $this->_conn->real_connect($params['host'], $username, $password, $dbname, $port, $socket, $flags)) {\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/OCI8/Driver.php:\n\t36:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())\n\t41:                 $password,\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/OCI8/OCI8Connection.php:\n\t47:      * @param string      $password\n\t55:     public function __construct($username, $password, $db, $charset = null, $sessionMode = OCI_DEFAULT, $persistent = false)\n\t62:             ? @oci_pconnect($username, $password, $db, $charset, $sessionMode)\n\t63:             : @oci_connect($username, $password, $db, $charset, $sessionMode);\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOIbm/Driver.php:\n\t40:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())\n\t45:             $password,\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOMySql/Driver.php:\n\t37:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())\n\t43:                 $password,\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOOracle/Driver.php:\n\t39:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())\n\t45:                 $password,\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOPgSql/Driver.php:\n\t38:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())\n\t44:                 $password,\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOSqlite/Driver.php:\n\t46:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())\n\t58:                 $password,\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOSqlsrv/Driver.php:\n\t34:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())\n\t39:             $password,\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/SQLAnywhere/Driver.php:\n\t40:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())\n\t58:                     $password,\n\t86:      * @param string  $password      Password to use for connection authentication.\n\t91:     private function buildDsn($host, $port, $server, $dbname, $username = null, $password = null, array $driverOptions = array())\n\t100:             ';PWD=' . $password .\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/SQLSrv/Driver.php:\n\t32:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())\n\t52:         $driverOptions['PWD'] = $password;\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Platforms/Keywords/DB2Keywords.php:\n\t256:             'PASSWORD',\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Query/QueryBuilder.php:\n\t543:      *         ->set('u.password', md5('password'))\n\t576:      *                 'password' => '?'\n\t736:      *         ->set('u.password', md5('password'))\n\t768:      *         ->set('u.password', md5('password'))\n\t915:      *         ->setValue('password', '?');\n\t940:      *                 'password' => '?'\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/MySqlSchemaManager.php:\n\t59:             'password' => $user['Password'],\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/OracleSchemaManager.php:\n\t303:         $password   = $params['password'];\n\t305:         $query  = 'CREATE USER ' . $username . ' IDENTIFIED BY ' . $password;\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/PostgreSqlSchemaManager.php:\n\t155:             'password' => $user['passwd']\n\n/vendor/doctrine/dbal/lib/Doctrine/DBAL/Sharding/PoolingShardConnection.php:\n\t54:  *    'global' => array('user' => '', 'password' => '', 'host' => '', 'dbname' => ''),\n\t56:  *        array('id' => 1, 'user' => 'slave1', 'password', 'host' => '', 'dbname' => ''),\n\t57:  *        array('id' => 2, 'user' => 'slave2', 'password', 'host' => '', 'dbname' => ''),\n\t188:         $password = isset($connectionParams['password']) ? $connectionParams['password'] : null;\n\t190:         return $this->_driver->connect($connectionParams, $user, $password, $driverOptions);\n\n/vendor/fzaninotto/faker/readme.md:\n\t171:     password                // 'k&|X+a45*2['\n\n/vendor/fzaninotto/faker/src/Faker/Generator.php:\n\t68:  * @property string $password\n\t69:  * @method string password($minLength = 6, $maxLength = 20)\n\n/vendor/fzaninotto/faker/src/Faker/Provider/Internet.php:\n\t227:     public function password($minLength = 6, $maxLength = 20)\n\n/vendor/fzaninotto/faker/test/Faker/Provider/InternetTest.php:\n\t83:     public function testPasswordIsValid()\n\t85:         $this->assertRegexp('/^.{6}$/', $this->faker->password(6, 6));\n\n/vendor/ircmaxell/password-compat/composer.json:\n\t2:     \"name\": \"ircmaxell/password-compat\",\n\t3:     \"description\": \"A compatibility library for the proposed simplified password hashing algorithm: https://wiki.php.net/rfc/password_hash\",\n\t4:     \"keywords\": [\"password\", \"hashing\"],\n\t5:     \"homepage\": \"https://github.com/ircmaxell/password_compat\",\n\t18:         \"files\": [\"lib/password.php\"]\n\n/vendor/ircmaxell/password-compat/version-test.php:\n\t3: require \"lib/password.php\";\n\t5: echo \"Test for functionality of compat library: \" . (PasswordCompat\\binary\\check() ? \"Pass\" : \"Fail\");\n\n/vendor/ircmaxell/password-compat/lib/password.php:\n\t3:  * A Compatibility library with PHP 5.5's simplified password hashing API.\n\t12:     if (!defined('PASSWORD_BCRYPT')) {\n\t19:         define('PASSWORD_BCRYPT', 1);\n\t20:         define('PASSWORD_DEFAULT', PASSWORD_BCRYPT);\n\t21:         define('PASSWORD_BCRYPT_DEFAULT_COST', 10);\n\t24:     if (!function_exists('password_hash')) {\n\t27:          * Hash the password using the specified algorithm\n\t29:          * @param string $password The password to hash\n\t30:          * @param int    $algo     The algorithm to use (Defined by PASSWORD_* constants)\n\t33:          * @return string|false The hashed password, or false on error.\n\t35:         function password_hash($password, $algo, array $options = array()) {\n\t37:                 trigger_error(\"Crypt must be loaded for password_hash to function\", E_USER_WARNING);\n\t40:             if (is_null($password) || is_int($password)) {\n\t41:                 $password = (string) $password;\n\t43:             if (!is_string($password)) {\n\t44:                 trigger_error(\"password_hash(): Password must be a string\", E_USER_WARNING);\n\t48:                 trigger_error(\"password_hash() expects parameter 2 to be long, \" . gettype($algo) . \" given\", E_USER_WARNING);\n\t53:                 case PASSWORD_BCRYPT:\n\t54:                     $cost = PASSWORD_BCRYPT_DEFAULT_COST;\n\t58:                             trigger_error(sprintf(\"password_hash(): Invalid bcrypt cost parameter specified: %d\", $cost), E_USER_WARNING);\n\t71:                     trigger_error(sprintf(\"password_hash(): Unknown password hashing algorithm: %s\", $algo), E_USER_WARNING);\n\t92:                         trigger_error('password_hash(): Non-string salt parameter supplied', E_USER_WARNING);\n\t95:                 if (PasswordCompat\\binary\\_strlen($salt) < $required_salt_len) {\n\t96:                     trigger_error(sprintf(\"password_hash(): Provided salt is too short: %d expecting %d\", PasswordCompat\\binary\\_strlen($salt), $required_salt_len), E_USER_WARNING);\n\t118:                     $read = PasswordCompat\\binary\\_strlen($buffer);\n\t121:                         $read = PasswordCompat\\binary\\_strlen($buffer);\n\t128:                 if (!$buffer_valid || PasswordCompat\\binary\\_strlen($buffer) < $raw_salt_len) {\n\t129:                     $bl = PasswordCompat\\binary\\_strlen($buffer);\n\t151:             $salt = PasswordCompat\\binary\\_substr($salt, 0, $required_salt_len);\n\t155:             $ret = crypt($password, $hash);\n\t157:             if (!is_string($ret) || PasswordCompat\\binary\\_strlen($ret) != $resultLength) {\n\t165:          * Get information about the password hash. Returns an array of the information\n\t166:          * that was used to generate the password hash.\n\t172:          *        'cost' => PASSWORD_BCRYPT_DEFAULT_COST,\n\t176:          * @param string $hash The password hash to extract info from\n\t180:         function password_get_info($hash) {\n\t186:             if (PasswordCompat\\binary\\_substr($hash, 0, 4) == '$2y$' && PasswordCompat\\binary\\_strlen($hash) == 60) {\n\t187:                 $return['algo'] = PASSWORD_BCRYPT;\n\t196:          * Determine if the password hash needs to be rehashed according to the options provided\n\t198:          * If the answer is true, after validating the password using password_verify, rehash it.\n\t201:          * @param int    $algo    The algorithm used for new password hashes\n\t202:          * @param array  $options The options array passed to password_hash\n\t204:          * @return boolean True if the password needs to be rehashed.\n\t206:         function password_needs_rehash($hash, $algo, array $options = array()) {\n\t207:             $info = password_get_info($hash);\n\t212:                 case PASSWORD_BCRYPT:\n\t213:                     $cost = isset($options['cost']) ? $options['cost'] : PASSWORD_BCRYPT_DEFAULT_COST;\n\t223:          * Verify a password against a hash using a timing attack resistant approach\n\t225:          * @param string $password The password to verify\n\t228:          * @return boolean If the password matches the hash\n\t230:         function password_verify($password, $hash) {\n\t232:                 trigger_error(\"Crypt must be loaded for password_verify to function\", E_USER_WARNING);\n\t235:             $ret = crypt($password, $hash);\n\t236:             if (!is_string($ret) || PasswordCompat\\binary\\_strlen($ret) != PasswordCompat\\binary\\_strlen($hash) || PasswordCompat\\binary\\_strlen($ret) <= 13) {\n\t241:             for ($i = 0; $i < PasswordCompat\\binary\\_strlen($ret); $i++) {\n\t251: namespace PasswordCompat\\binary {\n\t253:     if (!function_exists('PasswordCompat\\\\binary\\\\_strlen')) {\n\t304:                     $test = crypt(\"password\", $hash);\n\n/vendor/knplabs/knp-snappy/src/Knp/Snappy/Image.php:\n\t57:             'password'                     => null,    // HTTP Authentication password\n\n/vendor/knplabs/knp-snappy/src/Knp/Snappy/Pdf.php:\n\t178:             'password'                     => null,\n\n/vendor/laravel/framework/composer.json:\n\t25:         \"ircmaxell/password-compat\": \"~1.0\",\n\n/vendor/laravel/framework/src/Illuminate/Auth/Authenticatable.php:\n\t16: \t * Get the password for the user.\n\t20: \tpublic function getAuthPassword()\n\t22: \t\treturn $this->password;\n\n/vendor/laravel/framework/src/Illuminate/Auth/DatabaseUserProvider.php:\n\t105: \t\t\tif ( ! str_contains($key, 'password'))\n\t142: \t\t$plain = $credentials['password'];\n\t144: \t\treturn $this->hasher->check($plain, $user->getAuthPassword());\n\n/vendor/laravel/framework/src/Illuminate/Auth/EloquentUserProvider.php:\n\t93: \t\t\tif ( ! str_contains($key, 'password')) $query->where($key, $value);\n\t108: \t\t$plain = $credentials['password'];\n\t110: \t\treturn $this->hasher->check($plain, $user->getAuthPassword());\n\n/vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php:\n\t36: \t * Get the password for the user.\n\t40: \tpublic function getAuthPassword()\n\t42: \t\treturn $this->attributes['password'];\n\n/vendor/laravel/framework/src/Illuminate/Auth/Guard.php:\n\t332: \t\treturn [$field => $request->getUser(), 'password' => $request->getPassword()];\n\n/vendor/laravel/framework/src/Illuminate/Auth/Console/ClearResetsCommand.php:\n\t19: \tprotected $description = 'Flush expired password reset tokens';\n\t28: \t\t$this->laravel['auth.password.tokens']->deleteExpired();\n\n/vendor/laravel/framework/src/Illuminate/Auth/Passwords/CanResetPassword.php:\n\t1: <?php namespace Illuminate\\Auth\\Passwords;\n\t3: trait CanResetPassword {\n\t6: \t * Get the e-mail address where password reset links are sent.\n\t10: \tpublic function getEmailForPasswordReset()\n\n/vendor/laravel/framework/src/Illuminate/Auth/Passwords/DatabaseTokenRepository.php:\n\t1: <?php namespace Illuminate\\Auth\\Passwords;\n\t5: use Illuminate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;\n\t57: \t * @param  \\Illuminate\\Contracts\\Auth\\CanResetPassword  $user\n\t60: \tpublic function create(CanResetPasswordContract $user)\n\t62: \t\t$email = $user->getEmailForPasswordReset();\n\t67: \t\t// a safe link to the password reset form. Then we will insert a record in\n\t79: \t * @param  \\Illuminate\\Contracts\\Auth\\CanResetPassword  $user\n\t82: \tprotected function deleteExisting(CanResetPasswordContract $user)\n\t84: \t\treturn $this->getTable()->where('email', $user->getEmailForPasswordReset())->delete();\n\t102: \t * @param  \\Illuminate\\Contracts\\Auth\\CanResetPassword  $user\n\t106: \tpublic function exists(CanResetPasswordContract $user, $token)\n\t108: \t\t$email = $user->getEmailForPasswordReset();\n\t164: \t * @param  \\Illuminate\\Contracts\\Auth\\CanResetPassword  $user\n\t167: \tpublic function createNewToken(CanResetPasswordContract $user)\n\n/vendor/laravel/framework/src/Illuminate/Auth/Passwords/PasswordBroker.php:\n\t1: <?php namespace Illuminate\\Auth\\Passwords;\n\t7: use Illuminate\\Contracts\\Auth\\PasswordBroker as PasswordBrokerContract;\n\t8: use Illuminate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;\n\t10: class PasswordBroker implements PasswordBrokerContract {\n\t13: \t * The password token repository.\n\t15: \t * @var \\Illuminate\\Auth\\Passwords\\TokenRepositoryInterface\n\t34: \t * The view of the password reset link e-mail.\n\t41: \t * The custom password validator callback.\n\t45: \tprotected $passwordValidator;\n\t48: \t * Create a new password broker instance.\n\t50: \t * @param  \\Illuminate\\Auth\\Passwords\\TokenRepositoryInterface  $tokens\n\t68: \t * Send a password reset link to a user.\n\t83: \t\t\treturn PasswordBrokerContract::INVALID_USER;\n\t87: \t\t// user with a link to reset their password. We will then redirect back to\n\t93: \t\treturn PasswordBrokerContract::RESET_LINK_SENT;\n\t97: \t * Send the password reset link via e-mail.\n\t99: \t * @param  \\Illuminate\\Contracts\\Auth\\CanResetPassword  $user\n\t104: \tpublic function emailResetLink(CanResetPasswordContract $user, $token, Closure $callback = null)\n\t107: \t\t// password reminder e-mail. We'll pass a \"token\" variable into the views\n\t108: \t\t// so that it may be displayed for an user to click for password reset.\n\t113: \t\t\t$m->to($user->getEmailForPasswordReset());\n\t120: \t * Reset the password for the given token.\n\t133: \t\tif ( ! $user instanceof CanResetPasswordContract)\n\t138: \t\t$pass = $credentials['password'];\n\t147: \t\treturn PasswordBrokerContract::PASSWORD_RESET;\n\t151: \t * Validate a password reset for the given credentials.\n\t154: \t * @return \\Illuminate\\Contracts\\Auth\\CanResetPassword\n\t160: \t\t\treturn PasswordBrokerContract::INVALID_USER;\n\t163: \t\tif ( ! $this->validateNewPassword($credentials))\n\t165: \t\t\treturn PasswordBrokerContract::INVALID_PASSWORD;\n\t170: \t\t\treturn PasswordBrokerContract::INVALID_TOKEN;\n\t177: \t * Set a custom password validator.\n\t184: \t\t$this->passwordValidator = $callback;\n\t188: \t * Determine if the passwords match for the request.\n\t193: \tpublic function validateNewPassword(array $credentials)\n\t195: \t\tlist($password, $confirm) = [\n\t196: \t\t\t$credentials['password'], $credentials['password_confirmation'],\n\t199: \t\tif (isset($this->passwordValidator))\n\t202: \t\t\t\t$this->passwordValidator, $credentials) && $password === $confirm;\n\t205: \t\treturn $this->validatePasswordWithDefaults($credentials);\n\t209: \t * Determine if the passwords are valid for the request.\n\t214: \tprotected function validatePasswordWithDefaults(array $credentials)\n\t216: \t\tlist($password, $confirm) = [\n\t217: \t\t\t$credentials['password'], $credentials['password_confirmation'],\n\t220: \t\treturn $password === $confirm && mb_strlen($password) >= 6;\n\t227: \t * @return \\Illuminate\\Contracts\\Auth\\CanResetPassword\n\t237: \t\tif ($user && ! $user instanceof CanResetPasswordContract)\n\t239: \t\t\tthrow new UnexpectedValueException(\"User must implement CanResetPassword interface.\");\n\t246: \t * Get the password reset token repository implementation.\n\t248: \t * @return \\Illuminate\\Auth\\Passwords\\TokenRepositoryInterface\n\n/vendor/laravel/framework/src/Illuminate/Auth/Passwords/PasswordResetServiceProvider.php:\n\t1: <?php namespace Illuminate\\Auth\\Passwords;\n\t4: use Illuminate\\Auth\\Passwords\\DatabaseTokenRepository as DbRepository;\n\t6: class PasswordResetServiceProvider extends ServiceProvider {\n\t22: \t\t$this->registerPasswordBroker();\n\t28: \t * Register the password broker instance.\n\t32: \tprotected function registerPasswordBroker()\n\t34: \t\t$this->app->singleton('auth.password', function($app)\n\t36: \t\t\t// The password token repository is responsible for storing the email addresses\n\t37: \t\t\t// and password reset tokens. It will be used to verify the tokens are valid\n\t39: \t\t\t$tokens = $app['auth.password.tokens'];\n\t43: \t\t\t$view = $app['config']['auth.password.email'];\n\t45: \t\t\t// The password broker uses a token repository to validate tokens and send user\n\t46: \t\t\t// password e-mails, as well as validating that password reset process as an\n\t48: \t\t\treturn new PasswordBroker(\n\t61: \t\t$this->app->singleton('auth.password.tokens', function($app)\n\t68: \t\t\t$table = $app['config']['auth.password.table'];\n\t72: \t\t\t$expire = $app['config']->get('auth.password.expire', 60);\n\t85: \t\treturn ['auth.password', 'auth.password.tokens'];\n\n/vendor/laravel/framework/src/Illuminate/Auth/Passwords/TokenRepositoryInterface.php:\n\t1: <?php namespace Illuminate\\Auth\\Passwords;\n\t3: use Illuminate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;\n\t10: \t * @param  \\Illuminate\\Contracts\\Auth\\CanResetPassword  $user\n\t13: \tpublic function create(CanResetPasswordContract $user);\n\t18: \t * @param  \\Illuminate\\Contracts\\Auth\\CanResetPassword  $user\n\t22: \tpublic function exists(CanResetPasswordContract $user, $token);\n\n/vendor/laravel/framework/src/Illuminate/Contracts/Auth/Authenticatable.php:\n\t13: \t * Get the password for the user.\n\t17: \tpublic function getAuthPassword();\n\n/vendor/laravel/framework/src/Illuminate/Contracts/Auth/CanResetPassword.php:\n\t3: interface CanResetPassword {\n\t6: \t * Get the e-mail address where password reset links are sent.\n\t10: \tpublic function getEmailForPasswordReset();\n\n/vendor/laravel/framework/src/Illuminate/Contracts/Auth/PasswordBroker.php:\n\t5: interface PasswordBroker {\n\t12: \tconst RESET_LINK_SENT = 'passwords.sent';\n\t15: \t * Constant representing a successfully reset password.\n\t19: \tconst PASSWORD_RESET = 'passwords.reset';\n\t26: \tconst INVALID_USER = 'passwords.user';\n\t29: \t * Constant representing an invalid password.\n\t33: \tconst INVALID_PASSWORD = 'passwords.password';\n\t40: \tconst INVALID_TOKEN = 'passwords.token';\n\t43: \t * Send a password reset link to a user.\n\t52: \t * Reset the password for the given token.\n\t61: \t * Set a custom password validator.\n\t69: \t * Determine if the passwords match for the request.\n\t74: \tpublic function validateNewPassword(array $credentials);\n\n/vendor/laravel/framework/src/Illuminate/Database/README.md:\n\t19: \t'password'  => 'password',\n\n/vendor/laravel/framework/src/Illuminate/Database/Connectors/Connector.php:\n\t45: \t\t$password = array_get($config, 'password');\n\t47: \t\treturn new PDO($dsn, $username, $password, $options);\n\n/vendor/laravel/framework/src/Illuminate/Foundation/Application.php:\n\t1000: \t\t\t'auth.password.tokens' => 'Illuminate\\Auth\\Passwords\\TokenRepositoryInterface',\n\t1018: \t\t\t'auth.password'        => ['Illuminate\\Auth\\Passwords\\PasswordBroker', 'Illuminate\\Contracts\\Auth\\PasswordBroker'],\n\n/vendor/laravel/framework/src/Illuminate/Foundation/Auth/AuthenticatesAndRegistersUsers.php:\n\t74: \t\t\t'email' => 'required|email', 'password' => 'required',\n\t77: \t\t$credentials = $request->only('email', 'password');\n\n/vendor/laravel/framework/src/Illuminate/Foundation/Auth/ResetsPasswords.php:\n\t5: use Illuminate\\Contracts\\Auth\\PasswordBroker;\n\t8: trait ResetsPasswords {\n\t18: \t * The password broker implementation.\n\t20: \t * @var PasswordBroker\n\t22: \tprotected $passwords;\n\t25: \t * Display the form to request a password reset link.\n\t31: \t\treturn view('auth.password');\n\t44: \t\t$response = $this->passwords->sendResetLink($request->only('email'), function($m)\n\t51: \t\t\tcase PasswordBroker::RESET_LINK_SENT:\n\t54: \t\t\tcase PasswordBroker::INVALID_USER:\n\t66: \t\treturn isset($this->subject) ? $this->subject : 'Your Password Reset Link';\n\t70: \t * Display the password reset view for the given token.\n\t86: \t * Reset the given user's password.\n\t96: \t\t\t'password' => 'required|confirmed',\n\t100: \t\t\t'email', 'password', 'password_confirmation', 'token'\n\t103: \t\t$response = $this->passwords->reset($credentials, function($user, $password)\n\t105: \t\t\t$user->password = bcrypt($password);\n\t114: \t\t\tcase PasswordBroker::PASSWORD_RESET:\n\n/vendor/laravel/framework/src/Illuminate/Foundation/Console/FreshCommand.php:\n\t51: \t\t$files->delete(base_path('database/migrations/2014_10_12_100000_create_password_resets_table.php'));\n\n/vendor/laravel/framework/src/Illuminate/Foundation/Console/Optimize/config.php:\n\t59:     $basePath.'/vendor/laravel/framework/src/Illuminate/Foundation/Auth/ResetsPasswords.php',\n\n/vendor/laravel/framework/src/Illuminate/Foundation/Http/FormRequest.php:\n\t64: \tprotected $dontFlash = ['password', 'password_confirmation'];\n\n/vendor/laravel/framework/src/Illuminate/Hashing/BcryptHasher.php:\n\t28: \t\t$hash = password_hash($value, PASSWORD_BCRYPT, array('cost' => $cost));\n\t48: \t\treturn password_verify($value, $hashedValue);\n\t62: \t\treturn password_needs_rehash($hashedValue, PASSWORD_BCRYPT, array('cost' => $cost));\n\t66: \t * Set the default password work factor.\n\n/vendor/laravel/framework/src/Illuminate/Hashing/composer.json:\n\t20:         \"ircmaxell/password-compat\": \"~1.0\"\n\n/vendor/laravel/framework/src/Illuminate/Mail/TransportManager.php:\n\t37: \t\t// and password. If we have it we will set the credentials on the Swift\n\t43: \t\t\t$transport->setPassword($config['password']);\n\n/vendor/laravel/framework/src/Illuminate/Support/Facades/Password.php:\n\t4:  * @see \\Illuminate\\Auth\\Passwords\\PasswordBroker\n\t6: class Password extends Facade {\n\t13: \tconst RESET_LINK_SENT = 'passwords.sent';\n\t16: \t * Constant representing a successfully reset password.\n\t20: \tconst PASSWORD_RESET = 'passwords.reset';\n\t27: \tconst INVALID_USER = 'passwords.user';\n\t30: \t * Constant representing an invalid password.\n\t34: \tconst INVALID_PASSWORD = 'passwords.password';\n\t41: \tconst INVALID_TOKEN = 'passwords.token';\n\t48: \tprotected static function getFacadeAccessor() { return 'auth.password'; }\n\n/vendor/league/flysystem/src/Adapter/AbstractFtpAdapter.php:\n\t15:     protected $password;\n\t179:      * Returns the password.\n\t181:      * @return string password\n\t183:     public function getPassword()\n\t185:         return $this->password;\n\t189:      * Set the ftp password.\n\t191:      * @param string $password\n\t195:     public function setPassword($password)\n\t197:         $this->password = $password;\n\n/vendor/league/flysystem/src/Adapter/Ftp.php:\n\t25:         'password', 'ssl', 'timeout',\n\t128:         $isLoggedIn = ftp_login($this->getConnection(), $this->getUsername(), $this->getPassword());\n\n/vendor/monolog/monolog/src/Monolog/Handler/CouchDBHandler.php:\n\t33:             'password' => null,\n\t46:             $basicAuth = sprintf('%s:%s@', $this->options['username'], $this->options['password']);\n\n/vendor/phpspec/phpspec/features/code_generation/developer_generates_class.feature:\n\t77:     Given the spec file \"spec/CodeGeneration/MethodExample2/ForgotPasswordSpec.php\" contains:\n\t88:     class ForgotPasswordSpec extends ObjectBehavior\n\t90:         function it_changes_password_for_user(UserRepository $repository, User $user)\n\t93:             $user->changePassword('123')->shouldBeCalled();\n\t95:             $this->changePassword('leszek.prabucki@gmail.com', '123');\n\t107:         public function changePassword($newPassword);\n\t122:     Then the class in \"src/CodeGeneration/MethodExample2/ForgotPassword.php\" should contain:\n\t128:     class ForgotPassword\n\n/vendor/phpspec/prophecy/README.md:\n\t18:     public function testPasswordHashing()\n\t25:         $user->setPassword('qwerty');\n\t27:         $this->assertEquals('hashed_pass', $user->getPassword());\n\n/vendor/swiftmailer/swiftmailer/doc/help-resources.rst:\n\t19: When you go to GitHub you will be asked to create a username and password\n\n/vendor/swiftmailer/swiftmailer/doc/plugins.rst:\n\t274:             '{password}'=>$user['password']\n\t295:         \"Hello {username}, we have reset your password to {password}\\n\" .\n\t313:     Hello smilingsunshine2009, we have reset your password to rainyDays\n\t322:     Hello billy-bo-bob, we have reset your password to dancingOctopus\n\t363:             '{password}'=>$row['password']\n\n/vendor/swiftmailer/swiftmailer/doc/sending.rst:\n\t45:       ->setPassword('your password')\n\t94: SMTP servers often require users to authenticate with a username and password\n\t198: SMTP with a Username and Password\n\t201: Some servers require authentication. You can provide a username and password\n\t202: with ``setUsername()`` and ``setPassword()`` methods.\n\t204: To use a username and password with the SMTP Transport:\n\t208: * Call the ``setUsername()`` and ``setPassword()`` methods on the Transport.\n\t210: Your username and password will be used to authenticate upon first connect\n\t226:         // Create the Transport the call setUsername() and setPassword()\n\t229:           ->setPassword('password')\n\n/vendor/swiftmailer/swiftmailer/lib/classes/Swift/SmtpTransport.php:\n\t17:  * @method Swift_SmtpTransport setPassword(string $password) Set the password to authenticate with.\n\t18:  * @method string              getPassword()                 Get the password to authenticate with.\n\n/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/PopBeforeSmtpPlugin.php:\n\t33:     /** Password to use (if any) */\n\t34:     private $_password;\n\t126:      * Set the password to use when connecting (if needed).\n\t128:      * @param string $password\n\t132:     public function setPassword($password)\n\t134:         $this->_password = $password;\n\t168:                     $this->_command(sprintf(\"PASS %s\\r\\n\", $this->_password));\n\n/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Authenticator.php:\n\t26:      * Try to authenticate the user with $username and $password.\n\t30:      * @param string                    $password\n\t34:     public function authenticate(Swift_Transport_SmtpAgent $agent, $username, $password);\n\n/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/AuthHandler.php:\n\t33:      * The password for authentication.\n\t37:     private $_password;\n\t104:      * Set the password to authenticate with.\n\t106:      * @param string $password\n\t108:     public function setPassword($password)\n\t110:         $this->_password = $password;\n\t114:      * Get the password to authenticate with.\n\t118:     public function getPassword()\n\t120:         return $this->_password;\n\t176:                     if ($authenticator->authenticate($agent, $this->_username, $this->_password)) {\n\t232:         return array('setUsername', 'getUsername', 'setPassword', 'getPassword', 'setAuthMode', 'getAuthMode');\n\n/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/CramMd5Authenticator.php:\n\t29:      * Try to authenticate the user with $username and $password.\n\t33:      * @param string                    $password\n\t37:     public function authenticate(Swift_Transport_SmtpAgent $agent, $username, $password)\n\t43:                 $username.' '.$this->_getResponse($password, $challenge)\n\n/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/LoginAuthenticator.php:\n\t29:      * Try to authenticate the user with $username and $password.\n\t33:      * @param string                    $password\n\t37:     public function authenticate(Swift_Transport_SmtpAgent $agent, $username, $password)\n\t42:             $agent->executeCommand(sprintf(\"%s\\r\\n\", base64_encode($password)), array(235));\n\n/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/NTLMAuthenticator.php:\n\t34:      * Try to authenticate the user with $username and $password.\n\t38:      * @param string $password\n\t42:     public function authenticate(Swift_Transport_SmtpAgent $agent, $username, $password)\n\t66:             $this->sendMessage3($response, $username, $password, $timestamp, $client, $agent);\n\t184:      * @param string $password\n\t191:     protected function sendMessage3($response, $username, $password, $timestamp, $client, Swift_Transport_SmtpAgent $agent, $v2 = true)\n\t199:             $lmResponse = $this->createLMPassword($password, $challenge);\n\t201:             $ntlmResponse = $this->createNTLMPassword($password, $challenge);\n\t204:             $lmResponse = $this->createLMv2Password($password, $username, $domain, $challenge, $client);\n\t206:             $ntlmResponse = $this->createNTLMv2Hash($password, $username, $domain, $challenge, $blob, $timestamp, $client);\n\t304:      * @param string $password\n\t308:     protected function createLMPassword($password, $challenge)\n\t311:         $password = $this->createByte(strtoupper($password), 14, false);\n\t312:         list($key1, $key2) = str_split($password, 7);\n\t332:      * @param string $password\n\t336:     protected function createNTLMPassword($password, $challenge)\n\t339:         $ntlmHash = $this->createByte($this->md4Encrypt($password), 21, false);\n\t376:      * @param string $password\n\t383:     protected function createLMv2Password($password, $username, $domain, $challenge, $client)\n\t386:         // if $password > 15 than we can't use this method\n\t387:         if (strlen($password) <= 15) {\n\t388:             $ntlmHash = $this->md4Encrypt($password);\n\t400:      * @param string $password\n\t410:     protected function createNTLMv2Hash($password, $username, $domain, $challenge, $targetInfo, $timestamp, $client)\n\t412:         $ntlmHash = $this->md4Encrypt($password);\n\n/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/PlainAuthenticator.php:\n\t29:      * Try to authenticate the user with $username and $password.\n\t33:      * @param string                    $password\n\t37:     public function authenticate(Swift_Transport_SmtpAgent $agent, $username, $password)\n\t40:             $message = base64_encode($username.chr(0).$username.chr(0).$password);\n\n/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/XOAuth2Authenticator.php:\n\t19:  *   ->setPassword('YOUR_ACCESS_TOKEN');\n\n/vendor/swiftmailer/swiftmailer/tests/smoke.conf.php.default:\n\t46:  Defines: A password to authenticate with SMTP (if needed).\n\n/vendor/swiftmailer/swiftmailer/tests/SwiftMailerSmokeTestCase.php:\n\t27:                     ->setPassword(SWIFT_SMOKE_SMTP_PASS)\n\n/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/AuthHandlerTest.php:\n\t25:     public function testPasswordCanBeSetAndFetched()\n\t28:         $auth->setPassword('pass');\n\t29:         $this->assertEquals('pass', $auth->getPassword());\n\t49:         $this->assertTrue(in_array('getPassword', $mixins),\n\t50:             '%s: getPassword() should be accessible via mixin'\n\t52:         $this->assertTrue(in_array('setPassword', $mixins),\n\t53:             '%s: setPassword() should be accessible via mixin'\n\t78:         $auth->setPassword('pass');\n\t119:         $auth->setPassword('pass');\n\t145:         $auth->setPassword('pass');\n\n/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/Auth/NTLMAuthenticatorTest.php:\n\t36:         $password = \"test1234\";\n\t41:         $lmv1Result = $this->_invokePrivateMethod('createLMPassword', $login, array($password, $this->hex2bin($challenge)));\n\t51:         $password = \"SecREt01\";\n\t57:         $lmv2Result = $this->_invokePrivateMethod('createLMv2Password', $login, array($password, $username, $domain, $this->hex2bin($challenge), $this->hex2bin(\"ffffff0011223344\")));\n\n/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/Auth/PlainAuthenticatorTest.php:\n\t27:         identity (identity whose password will be used), followed by a NUL\n\t28:         (U+0000) character, followed by the clear-text password.\n\n/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/EsmtpTransport/ExtensionSupportTest.php:\n\t9:     public function setPassword($pass);\n\t450:              ->andReturn(array('setUsername', 'setPassword'));\n\t454:         $ext1->shouldReceive('setPassword')\n\t464:         $smtp->setPassword('pass');\n\t479:              ->andReturn(array('setUsername', 'setPassword'));\n\t484:         $ext1->shouldReceive('setPassword')\n\t496:         $ret = $smtp->setPassword('pass');\n\t512:              ->andReturn(array('setUsername', 'setPassword'));\n\t517:         $ext1->shouldReceive('setPassword')\n\t528:         $this->assertEquals('x', $smtp->setPassword('pass'));\n\n/vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:\n\t307:             $readCmd = $shell === 'csh' ? 'set mypassword = $<' : 'read -r mypassword';\n\t308:             $command = sprintf(\"/usr/bin/env %s -c 'stty -echo; %s; stty echo; echo \\$mypassword'\", $shell, $readCmd);\n\n/vendor/symfony/console/Symfony/Component/Console/Helper/QuestionHelper.php:\n\t330:             $readCmd = $shell === 'csh' ? 'set mypassword = $<' : 'read -r mypassword';\n\t331:             $command = sprintf(\"/usr/bin/env %s -c 'stty -echo; %s; stty echo; echo \\$mypassword'\", $shell, $readCmd);\n\n/vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/CHANGELOG.md:\n\t64:  * added Request::getUser() and Request::getPassword()\n\n/vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:\n\t1032:      * Returns the password.\n\t1036:     public function getPassword()\n\t1050:         $pass = $this->getPassword();\n\t1099:      * and the password are not added to the generated string.\n\n/vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Session/Storage/Handler/PdoSessionHandler.php:\n\t114:      * @var string Password when lazy-connect\n\t116:     private $password = '';\n\t165:      *  * db_password: The password when lazy-connect [default: '']\n\t193:         $this->password = isset($options['db_password']) ? $options['db_password'] : $this->password;\n\t419:         $this->pdo = new \\PDO($dsn, $this->username, $this->password, $this->connectionOptions);\n\n/vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:\n\t58:         $request = Request::create('http://user_test:password_test@test.com/');\n\t64:     public function testGetPassword()\n\t66:         $request = Request::create('http://user_test:password_test@test.com/');\n\t67:         $password = $request->getPassword();\n\t69:         $this->assertEquals('password_test', $password);\n\t203:         $request = Request::create('http://username:password@test.com');\n\t210:         $this->assertEquals('password', $request->getPassword());\n\t220:         $this->assertSame('', $request->getPassword());\n\t262:         $this->assertEquals('pa$$', $request->getPassword());\n\t276:         $this->assertEquals('pokemon', $request->getPassword());\n\n/vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/ServerBagTest.php:\n\t48:     public function testHttpPasswordIsOptional()\n\t74:         // Username and passwords should not be set as the header is bogus\n\t91:     public function testHttpBasicAuthWithPhpCgiEmptyPassword()\n\t118:         // Username and passwords should not be set as the header is bogus\n\n/vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/BaseMemcacheProfilerStorage.php:\n\t31:      * @param string $password\n\t34:     public function __construct($dsn, $username = '', $password = '', $lifetime = 86400)\n\n/vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/MongoDbProfilerStorage.php:\n\t25:      * @param string $password Not used\n\t28:     public function __construct($dsn, $username = '', $password = '', $lifetime = 86400)\n\n/vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/MysqlProfilerStorage.php:\n\t35:             $db = new \\PDO($this->dsn, $this->username, $this->password);\n\n/vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php:\n\t24:     protected $password;\n\t33:      * @param string $password The password for the database\n\t36:     public function __construct($dsn, $username = '', $password = '', $lifetime = 86400)\n\t40:         $this->password = $password;\n\n/vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/RedisProfilerStorage.php:\n\t42:      * @param string $password Not used\n\t45:     public function __construct($dsn, $username = '', $password = '', $lifetime = 86400)\n\n/vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/MongoDbProfilerStorageTest.php:\n\t82:             array('mongodb://user:password@localhost/symfony_tests/profiler_data', array(\n\t83:                 'mongodb://user:password@localhost/symfony_tests',\n\t87:             array('mongodb://user:password@localhost/admin/symfony_tests/profiler_data', array(\n\t88:                 'mongodb://user:password@localhost/admin',\n\t92:             array('mongodb://user:password@localhost:27009,localhost:27010/?replicaSet=rs-name&authSource=admin/symfony_tests/profiler_data', array(\n\t93:                 'mongodb://user:password@localhost:27009,localhost:27010/?replicaSet=rs-name&authSource=admin',\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/composer.json:\n\t29:         \"ircmaxell/password-compat\": \"1.0.*\"\n\t34:         \"symfony/validator\": \"For using the user password constraint\",\n\t36:         \"ircmaxell/password-compat\": \"For using the BCrypt password encoder in PHP <5.5\"\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/SimpleFormAuthenticatorInterface.php:\n\t21:     public function createToken(Request $request, $username, $password, $providerKey);\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Provider/DaoAuthenticationProvider.php:\n\t21: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken;\n\t25:  * for a UsernamePasswordToken.\n\t54:     protected function checkAuthentication(UserInterface $user, UsernamePasswordToken $token)\n\t58:             if ($currentUser->getPassword() !== $user->getPassword()) {\n\t62:             if ('' === ($presentedPassword = $token->getCredentials())) {\n\t63:                 throw new BadCredentialsException('The presented password cannot be empty.');\n\t66:             if (!$this->encoderFactory->getEncoder($user)->isPasswordValid($user->getPassword(), $presentedPassword, $user->getSalt())) {\n\t67:                 throw new BadCredentialsException('The presented password is invalid.');\n\t75:     protected function retrieveUser($username, UsernamePasswordToken $token)\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Provider/UserAuthenticationProvider.php:\n\t20: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken;\n\t25:  * UserProviderInterface retrieves users for UsernamePasswordToken tokens.\n\t96:         $authenticatedToken = new UsernamePasswordToken($user, $token->getCredentials(), $this->providerKey, $this->getRoles($user, $token));\n\t107:         return $token instanceof UsernamePasswordToken && $this->providerKey === $token->getProviderKey();\n\t137:      * @param UsernamePasswordToken $token    The Token\n\t143:     abstract protected function retrieveUser($username, UsernamePasswordToken $token);\n\t150:      * @param UsernamePasswordToken $token The UsernamePasswordToken token to be authenticated\n\t154:     abstract protected function checkAuthentication(UserInterface $user, UsernamePasswordToken $token);\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AbstractToken.php:\n\t254:         if ($this->user->getPassword() !== $user->getPassword()) {\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/UsernamePasswordToken.php:\n\t17:  * UsernamePasswordToken implements a username and password token.\n\t21: class UsernamePasswordToken extends AbstractToken\n\t30:      * @param string                   $credentials This usually is the password of the user\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/BasePasswordEncoder.php:\n\t17:  * BasePasswordEncoder is the base class for all password encoders.\n\t21: abstract class BasePasswordEncoder implements PasswordEncoderInterface\n\t23:     const MAX_PASSWORD_LENGTH = 4096;\n\t26:      * Demerges a merge password and salt string.\n\t28:      * @param string $mergedPasswordSalt The merged password and salt string\n\t30:      * @return array An array where the first element is the password and the second the salt\n\t32:     protected function demergePasswordAndSalt($mergedPasswordSalt)\n\t34:         if (empty($mergedPasswordSalt)) {\n\t38:         $password = $mergedPasswordSalt;\n\t40:         $saltBegins = strrpos($mergedPasswordSalt, '{');\n\t42:         if (false !== $saltBegins && $saltBegins + 1 < strlen($mergedPasswordSalt)) {\n\t43:             $salt = substr($mergedPasswordSalt, $saltBegins + 1, -1);\n\t44:             $password = substr($mergedPasswordSalt, 0, $saltBegins);\n\t47:         return array($password, $salt);\n\t51:      * Merges a password and a salt.\n\t53:      * @param string $password the password to be used\n\t56:      * @return string a merged password and salt\n\t60:     protected function mergePasswordAndSalt($password, $salt)\n\t63:             return $password;\n\t70:         return $password.'{'.$salt.'}';\n\t74:      * Compares two passwords.\n\t76:      * This method implements a constant-time algorithm to compare passwords to\n\t79:      * @param string $password1 The first password\n\t80:      * @param string $password2 The second password\n\t82:      * @return bool true if the two passwords are the same, false otherwise\n\t84:     protected function comparePasswords($password1, $password2)\n\t86:         return StringUtils::equals($password1, $password2);\n\t90:      * Checks if the password is too long.\n\t92:      * @param string $password The password to check\n\t94:      * @return bool true if the password is too long, false otherwise\n\t96:     protected function isPasswordTooLong($password)\n\t98:         return strlen($password) > self::MAX_PASSWORD_LENGTH;\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/BCryptPasswordEncoder.php:\n\t20: class BCryptPasswordEncoder extends BasePasswordEncoder\n\t37:         if (!function_exists('password_hash')) {\n\t38:             throw new \\RuntimeException('To use the BCrypt encoder, you need to upgrade to PHP 5.5 or install the \"ircmaxell/password-compat\" via Composer.');\n\t50:      * Encodes the raw password.\n\t53:      * the password compat library uses CRYPT_BLOWFISH hash type with\n\t56:      * @see https://github.com/ircmaxell/password_compat/issues/10#issuecomment-11203833\n\t60:      * @param string $raw  The password to encode\n\t63:      * @return string The encoded password\n\t65:      * @throws BadCredentialsException when the given password is too long\n\t67:      * @link http://lxr.php.net/xref/PHP_5_5/ext/standard/password.c#111\n\t69:     public function encodePassword($raw, $salt)\n\t71:         if ($this->isPasswordTooLong($raw)) {\n\t72:             throw new BadCredentialsException('Invalid password.');\n\t81:         return password_hash($raw, PASSWORD_BCRYPT, $options);\n\t87:     public function isPasswordValid($encoded, $raw, $salt)\n\t89:         return !$this->isPasswordTooLong($raw) && password_verify($raw, $encoded);\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/EncoderAwareInterface.php:\n\t20:      * Gets the name of the encoder used to encode the password.\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/EncoderFactory.php:\n\t54:         if (!$this->encoders[$encoderKey] instanceof PasswordEncoderInterface) {\n\t66:      * @return PasswordEncoderInterface\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/EncoderFactoryInterface.php:\n\t24:      * Returns the password encoder to use for the given account.\n\t28:      * @return PasswordEncoderInterface\n\t30:      * @throws \\RuntimeException when no password encoder could be found for the user\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/MessageDigestPasswordEncoder.php:\n\t17:  * MessageDigestPasswordEncoder uses a message digest algorithm.\n\t21: class MessageDigestPasswordEncoder extends BasePasswordEncoder\n\t31:      * @param bool   $encodeHashAsBase64 Whether to base64 encode the password hash\n\t32:      * @param int    $iterations         The number of iterations to use to stretch the password hash\n\t44:     public function encodePassword($raw, $salt)\n\t46:         if ($this->isPasswordTooLong($raw)) {\n\t47:             throw new BadCredentialsException('Invalid password.');\n\t54:         $salted = $this->mergePasswordAndSalt($raw, $salt);\n\t68:     public function isPasswordValid($encoded, $raw, $salt)\n\t70:         return !$this->isPasswordTooLong($raw) && $this->comparePasswords($encoded, $this->encodePassword($raw, $salt));\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/PasswordEncoderInterface.php:\n\t15:  * PasswordEncoderInterface is the interface for all encoders.\n\t19: interface PasswordEncoderInterface\n\t22:      * Encodes the raw password.\n\t24:      * @param string $raw  The password to encode\n\t27:      * @return string The encoded password\n\t29:     public function encodePassword($raw, $salt);\n\t32:      * Checks a raw password against an encoded password.\n\t34:      * @param string $encoded An encoded password\n\t35:      * @param string $raw     A raw password\n\t38:      * @return bool true if the password is valid, false otherwise\n\t40:     public function isPasswordValid($encoded, $raw, $salt);\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/Pbkdf2PasswordEncoder.php:\n\t17:  * Pbkdf2PasswordEncoder uses the PBKDF2 (Password-Based Key Derivation Function 2).\n\t29: class Pbkdf2PasswordEncoder extends BasePasswordEncoder\n\t40:      * @param bool   $encodeHashAsBase64 Whether to base64 encode the password hash\n\t41:      * @param int    $iterations         The number of iterations to use to stretch the password hash\n\t57:     public function encodePassword($raw, $salt)\n\t59:         if ($this->isPasswordTooLong($raw)) {\n\t60:             throw new BadCredentialsException('Invalid password.');\n\t79:     public function isPasswordValid($encoded, $raw, $salt)\n\t81:         return !$this->isPasswordTooLong($raw) && $this->comparePasswords($encoded, $this->encodePassword($raw, $salt));\n\t84:     private function hashPbkdf2($algorithm, $password, $salt, $iterations, $length = 0)\n\t91:             $ib = $block = hash_hmac($algorithm, $salt.pack('N', $i), $password, true);\n\t95:                 $ib ^= ($block = hash_hmac($algorithm, $block, $password, true));\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/PlaintextPasswordEncoder.php:\n\t17:  * PlaintextPasswordEncoder does not do any encoding.\n\t21: class PlaintextPasswordEncoder extends BasePasswordEncoder\n\t23:     private $ignorePasswordCase;\n\t28:      * @param bool $ignorePasswordCase Compare password case-insensitive\n\t30:     public function __construct($ignorePasswordCase = false)\n\t32:         $this->ignorePasswordCase = $ignorePasswordCase;\n\t38:     public function encodePassword($raw, $salt)\n\t40:         if ($this->isPasswordTooLong($raw)) {\n\t41:             throw new BadCredentialsException('Invalid password.');\n\t44:         return $this->mergePasswordAndSalt($raw, $salt);\n\t50:     public function isPasswordValid($encoded, $raw, $salt)\n\t52:         if ($this->isPasswordTooLong($raw)) {\n\t56:         $pass2 = $this->mergePasswordAndSalt($raw, $salt);\n\t58:         if (!$this->ignorePasswordCase) {\n\t59:             return $this->comparePasswords($encoded, $pass2);\n\t62:         return $this->comparePasswords(strtolower($encoded), strtolower($pass2));\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/UserPasswordEncoder.php:\n\t17:  * A generic password encoder\n\t21: class UserPasswordEncoder implements UserPasswordEncoderInterface\n\t39:     public function encodePassword(UserInterface $user, $plainPassword)\n\t43:         return $encoder->encodePassword($plainPassword, $user->getSalt());\n\t49:     public function isPasswordValid(UserInterface $user, $raw)\n\t53:         return $encoder->isPasswordValid($user->getPassword(), $raw, $user->getSalt());\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/UserPasswordEncoderInterface.php:\n\t17:  * UserPasswordEncoderInterface is the interface for the password encoder service.\n\t21: interface UserPasswordEncoderInterface\n\t25:      * Encodes the plain password.\n\t28:      * @param string        $plainPassword The password to encode\n\t30:      * @return string The encoded password\n\t32:     public function encodePassword(UserInterface $user, $plainPassword);\n\t36:      * @param string        $raw  A raw password\n\t38:      * @return bool true if the password is valid, false otherwise\n\t40:     public function isPasswordValid(UserInterface $user, $raw);\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/AuthenticationProviderManagerTest.php:\n\t18: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken;\n\t102:             $this->getAuthenticationProvider(true, $token = new UsernamePasswordToken('foo', 'bar', 'key')),\n\t109:             $this->getAuthenticationProvider(true, $token = new UsernamePasswordToken('foo', 'bar', 'key')),\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Provider/DaoAuthenticationProviderTest.php:\n\t14: use Symfony\\Component\\Security\\Core\\Encoder\\PlaintextPasswordEncoder;\n\t112:         $encoder = $this->getMock('Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\PasswordEncoderInterface');\n\t115:             ->method('isPasswordValid')\n\t138:         $encoder = $this->getMock('Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\PasswordEncoderInterface');\n\t141:             ->method('isPasswordValid')\n\t168:         $encoder = $this->getMock('Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\PasswordEncoderInterface');\n\t170:                 ->method('isPasswordValid')\n\t190:     public function testCheckAuthenticationDoesNotReauthenticateWhenPasswordHasChanged()\n\t194:              ->method('getPassword')\n\t205:                ->method('getPassword')\n\t219:              ->method('getPassword')\n\t230:                ->method('getPassword')\n\t242:         $encoder = $this->getMock('Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\PasswordEncoderInterface');\n\t244:                 ->method('isPasswordValid')\n\t263:         $mock = $this->getMock('Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\UsernamePasswordToken', array('getCredentials', 'getUser', 'getProviderKey'), array(), '', false);\n\t273:     protected function getProvider($user = null, $userChecker = null, $passwordEncoder = null)\n\t287:         if (null === $passwordEncoder) {\n\t288:             $passwordEncoder = new PlaintextPasswordEncoder();\n\t295:             ->will($this->returnValue($passwordEncoder))\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Provider/UserAuthenticationProviderTest.php:\n\t185:         $this->assertInstanceOf('Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken', $authToken);\n\t220:         $this->assertInstanceOf('Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken', $authToken);\n\t230:         $mock = $this->getMock('Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken', array('getCredentials', 'getProviderKey', 'getRoles'), array(), '', false);\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/UsernamePasswordTokenTest.php:\n\t14: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken;\n\t17: class UsernamePasswordTokenTest extends \\PHPUnit_Framework_TestCase\n\t21:         $token = new UsernamePasswordToken('foo', 'bar', 'key');\n\t24:         $token = new UsernamePasswordToken('foo', 'bar', 'key', array('ROLE_FOO'));\n\t35:         $token = new UsernamePasswordToken('foo', 'bar', 'key');\n\t41:         $token = new UsernamePasswordToken('foo', 'bar', 'key');\n\t48:         $token = new UsernamePasswordToken('foo', 'bar', 'key');\n\t55:         $token = new UsernamePasswordToken('foo', '', 'foo', array('A', 'B'));\n\t56:         $this->assertEquals('UsernamePasswordToken(user=\"foo\", authenticated=true, roles=\"A, B\")', (string) $token);\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authorization/ExpressionLanguageTest.php:\n\t18: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken;\n\t44:         $user = new User('username', 'password', $roles);\n\t49:         $usernamePasswordToken = new UsernamePasswordToken('username', 'password', 'providerkey', $roles);\n\t71:             array($usernamePasswordToken, 'is_anonymous()', false),\n\t72:             array($usernamePasswordToken, 'is_authenticated()', true),\n\t73:             array($usernamePasswordToken, 'is_fully_authenticated()', true),\n\t74:             array($usernamePasswordToken, 'is_remember_me()', false),\n\t75:             array($usernamePasswordToken, \"has_role('ROLE_FOO')\", false, $roles),\n\t76:             array($usernamePasswordToken, \"has_role('ROLE_USER')\", true, $roles),\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Encoder/BasePasswordEncoderTest.php:\n\t14: use Symfony\\Component\\Security\\Core\\Encoder\\BasePasswordEncoder;\n\t16: class PasswordEncoder extends BasePasswordEncoder\n\t18:     public function encodePassword($raw, $salt)\n\t22:     public function isPasswordValid($encoded, $raw, $salt)\n\t27: class BasePasswordEncoderTest extends \\PHPUnit_Framework_TestCase\n\t29:     public function testComparePassword()\n\t31:         $this->assertTrue($this->invokeComparePasswords('password', 'password'));\n\t32:         $this->assertFalse($this->invokeComparePasswords('password', 'foo'));\n\t35:     public function testDemergePasswordAndSalt()\n\t37:         $this->assertEquals(array('password', 'salt'), $this->invokeDemergePasswordAndSalt('password{salt}'));\n\t38:         $this->assertEquals(array('password', ''), $this->invokeDemergePasswordAndSalt('password'));\n\t39:         $this->assertEquals(array('', ''), $this->invokeDemergePasswordAndSalt(''));\n\t42:     public function testMergePasswordAndSalt()\n\t44:         $this->assertEquals('password{salt}', $this->invokeMergePasswordAndSalt('password', 'salt'));\n\t45:         $this->assertEquals('password', $this->invokeMergePasswordAndSalt('password', ''));\n\t51:     public function testMergePasswordAndSaltWithException()\n\t53:         $this->invokeMergePasswordAndSalt('password', '{foo}');\n\t56:     public function testIsPasswordTooLong()\n\t58:         $this->assertTrue($this->invokeIsPasswordTooLong(str_repeat('a', 10000)));\n\t59:         $this->assertFalse($this->invokeIsPasswordTooLong(str_repeat('a', 10)));\n\t62:     protected function invokeDemergePasswordAndSalt($password)\n\t64:         $encoder = new PasswordEncoder();\n\t66:         $m = $r->getMethod('demergePasswordAndSalt');\n\t69:         return $m->invoke($encoder, $password);\n\t72:     protected function invokeMergePasswordAndSalt($password, $salt)\n\t74:         $encoder = new PasswordEncoder();\n\t76:         $m = $r->getMethod('mergePasswordAndSalt');\n\t79:         return $m->invoke($encoder, $password, $salt);\n\t82:     protected function invokeComparePasswords($p1, $p2)\n\t84:         $encoder = new PasswordEncoder();\n\t86:         $m = $r->getMethod('comparePasswords');\n\t92:     protected function invokeIsPasswordTooLong($p)\n\t94:         $encoder = new PasswordEncoder();\n\t96:         $m = $r->getMethod('isPasswordTooLong');\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Encoder/BCryptPasswordEncoderTest.php:\n\t14: use Symfony\\Component\\Security\\Core\\Encoder\\BCryptPasswordEncoder;\n\t19: class BCryptPasswordEncoderTest extends \\PHPUnit_Framework_TestCase\n\t21:     const PASSWORD = 'password';\n\t30:         new BCryptPasswordEncoder(3);\n\t38:         new BCryptPasswordEncoder(32);\n\t44:             new BCryptPasswordEncoder($cost);\n\t52:         $encoder = new BCryptPasswordEncoder(self::VALID_COST);\n\t53:         $result = $encoder->encodePassword(self::PASSWORD, null);\n\t61:         $encoder = new BCryptPasswordEncoder(self::VALID_COST);\n\t62:         $result = $encoder->encodePassword(self::PASSWORD, null);\n\t63:         $this->assertTrue($encoder->isPasswordValid($result, self::PASSWORD, null));\n\t64:         $this->assertFalse($encoder->isPasswordValid($result, 'anotherPassword', null));\n\t77:     public function testEncodePasswordLength()\n\t79:         $encoder = new BCryptPasswordEncoder(self::VALID_COST);\n\t81:         $encoder->encodePassword(str_repeat('a', 5000), 'salt');\n\t84:     public function testCheckPasswordLength()\n\t86:         $encoder = new BCryptPasswordEncoder(self::VALID_COST);\n\t88:         $this->assertFalse($encoder->isPasswordValid('encoded', str_repeat('a', 5000), 'salt'));\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Encoder/EncoderFactoryTest.php:\n\t14: use Symfony\\Component\\Security\\Core\\Encoder\\MessageDigestPasswordEncoder;\n\t25:             'class' => 'Symfony\\Component\\Security\\Core\\Encoder\\MessageDigestPasswordEncoder',\n\t30:         $expectedEncoder = new MessageDigestPasswordEncoder('sha512', true, 5);\n\t32:         $this->assertEquals($expectedEncoder->encodePassword('foo', 'moo'), $encoder->encodePassword('foo', 'moo'));\n\t38:             'Symfony\\Component\\Security\\Core\\User\\UserInterface' => new MessageDigestPasswordEncoder('sha1'),\n\t42:         $expectedEncoder = new MessageDigestPasswordEncoder('sha1');\n\t43:         $this->assertEquals($expectedEncoder->encodePassword('foo', ''), $encoder->encodePassword('foo', ''));\n\t46:         $expectedEncoder = new MessageDigestPasswordEncoder('sha1');\n\t47:         $this->assertEquals($expectedEncoder->encodePassword('foo', ''), $encoder->encodePassword('foo', ''));\n\t53:             'Symfony\\Component\\Security\\Core\\User\\UserInterface' => new MessageDigestPasswordEncoder('sha1'),\n\t57:         $expectedEncoder = new MessageDigestPasswordEncoder('sha1');\n\t58:         $this->assertEquals($expectedEncoder->encodePassword('foo', ''), $encoder->encodePassword('foo', ''));\n\t64:             'Symfony\\Component\\Security\\Core\\User\\User' => new MessageDigestPasswordEncoder('sha1'),\n\t68:         $expectedEncoder = new MessageDigestPasswordEncoder('sha1');\n\t69:         $this->assertEquals($expectedEncoder->encodePassword('foo', ''), $encoder->encodePassword('foo', ''));\n\t75:             'Symfony\\Component\\Security\\Core\\Tests\\Encoder\\SomeUser' => new MessageDigestPasswordEncoder('sha1'),\n\t79:         $expectedEncoder = new MessageDigestPasswordEncoder('sha1');\n\t80:         $this->assertEquals($expectedEncoder->encodePassword('foo', ''), $encoder->encodePassword('foo', ''));\n\t86:             'Symfony\\Component\\Security\\Core\\Tests\\Encoder\\EncAwareUser' => new MessageDigestPasswordEncoder('sha256'),\n\t87:             'encoder_name' => new MessageDigestPasswordEncoder('sha1'),\n\t91:         $expectedEncoder = new MessageDigestPasswordEncoder('sha1');\n\t92:         $this->assertEquals($expectedEncoder->encodePassword('foo', ''), $encoder->encodePassword('foo', ''));\n\t98:             'Symfony\\Component\\Security\\Core\\Tests\\Encoder\\EncAwareUser' => new MessageDigestPasswordEncoder('sha1'),\n\t99:             'encoder_name' => new MessageDigestPasswordEncoder('sha256'),\n\t105:         $expectedEncoder = new MessageDigestPasswordEncoder('sha1');\n\t106:         $this->assertEquals($expectedEncoder->encodePassword('foo', ''), $encoder->encodePassword('foo', ''));\n\t115:             'Symfony\\Component\\Security\\Core\\Tests\\Encoder\\EncAwareUser' => new MessageDigestPasswordEncoder('sha1'),\n\t116:             'encoder_name' => new MessageDigestPasswordEncoder('sha256'),\n\t127:             'Symfony\\Component\\Security\\Core\\Tests\\Encoder\\EncAwareUser' => new MessageDigestPasswordEncoder('sha1'),\n\t128:             'encoder_name' => new MessageDigestPasswordEncoder('sha256'),\n\t132:         $expectedEncoder = new MessageDigestPasswordEncoder('sha1');\n\t133:         $this->assertEquals($expectedEncoder->encodePassword('foo', ''), $encoder->encodePassword('foo', ''));\n\t142:     public function getPassword()\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Encoder/MessageDigestPasswordEncoderTest.php:\n\t14: use Symfony\\Component\\Security\\Core\\Encoder\\MessageDigestPasswordEncoder;\n\t16: class MessageDigestPasswordEncoderTest extends \\PHPUnit_Framework_TestCase\n\t18:     public function testIsPasswordValid()\n\t20:         $encoder = new MessageDigestPasswordEncoder('sha256', false, 1);\n\t22:         $this->assertTrue($encoder->isPasswordValid(hash('sha256', 'password'), 'password', ''));\n\t25:     public function testEncodePassword()\n\t27:         $encoder = new MessageDigestPasswordEncoder('sha256', false, 1);\n\t28:         $this->assertSame(hash('sha256', 'password'), $encoder->encodePassword('password', ''));\n\t30:         $encoder = new MessageDigestPasswordEncoder('sha256', true, 1);\n\t31:         $this->assertSame(base64_encode(hash('sha256', 'password', true)), $encoder->encodePassword('password', ''));\n\t33:         $encoder = new MessageDigestPasswordEncoder('sha256', false, 2);\n\t34:         $this->assertSame(hash('sha256', hash('sha256', 'password', true).'password'), $encoder->encodePassword('password', ''));\n\t40:     public function testEncodePasswordAlgorithmDoesNotExist()\n\t42:         $encoder = new MessageDigestPasswordEncoder('foobar');\n\t43:         $encoder->encodePassword('password', '');\n\t49:     public function testEncodePasswordLength()\n\t51:         $encoder = new MessageDigestPasswordEncoder();\n\t53:         $encoder->encodePassword(str_repeat('a', 5000), 'salt');\n\t56:     public function testCheckPasswordLength()\n\t58:         $encoder = new MessageDigestPasswordEncoder();\n\t60:         $this->assertFalse($encoder->isPasswordValid('encoded', str_repeat('a', 5000), 'salt'));\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Encoder/Pbkdf2PasswordEncoderTest.php:\n\t14: use Symfony\\Component\\Security\\Core\\Encoder\\Pbkdf2PasswordEncoder;\n\t16: class Pbkdf2PasswordEncoderTest extends \\PHPUnit_Framework_TestCase\n\t18:     public function testIsPasswordValid()\n\t20:         $encoder = new Pbkdf2PasswordEncoder('sha256', false, 1, 40);\n\t22:         $this->assertTrue($encoder->isPasswordValid('c1232f10f62715fda06ae7c0a2037ca19b33cf103b727ba56d870c11f290a2ab106974c75607c8a3', 'password', ''));\n\t25:     public function testEncodePassword()\n\t27:         $encoder = new Pbkdf2PasswordEncoder('sha256', false, 1, 40);\n\t28:         $this->assertSame('c1232f10f62715fda06ae7c0a2037ca19b33cf103b727ba56d870c11f290a2ab106974c75607c8a3', $encoder->encodePassword('password', ''));\n\t30:         $encoder = new Pbkdf2PasswordEncoder('sha256', true, 1, 40);\n\t31:         $this->assertSame('wSMvEPYnFf2gaufAogN8oZszzxA7cnulbYcMEfKQoqsQaXTHVgfIow==', $encoder->encodePassword('password', ''));\n\t33:         $encoder = new Pbkdf2PasswordEncoder('sha256', false, 2, 40);\n\t34:         $this->assertSame('8bc2f9167a81cdcfad1235cd9047f1136271c1f978fcfcb35e22dbeafa4634f6fd2214218ed63ebb', $encoder->encodePassword('password', ''));\n\t40:     public function testEncodePasswordAlgorithmDoesNotExist()\n\t42:         $encoder = new Pbkdf2PasswordEncoder('foobar');\n\t43:         $encoder->encodePassword('password', '');\n\t49:     public function testEncodePasswordLength()\n\t51:         $encoder = new Pbkdf2PasswordEncoder('foobar');\n\t53:         $encoder->encodePassword(str_repeat('a', 5000), 'salt');\n\t56:     public function testCheckPasswordLength()\n\t58:         $encoder = new Pbkdf2PasswordEncoder('foobar');\n\t60:         $this->assertFalse($encoder->isPasswordValid('encoded', str_repeat('a', 5000), 'salt'));\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Encoder/PlaintextPasswordEncoderTest.php:\n\t14: use Symfony\\Component\\Security\\Core\\Encoder\\PlaintextPasswordEncoder;\n\t16: class PlaintextPasswordEncoderTest extends \\PHPUnit_Framework_TestCase\n\t18:     public function testIsPasswordValid()\n\t20:         $encoder = new PlaintextPasswordEncoder();\n\t22:         $this->assertTrue($encoder->isPasswordValid('foo', 'foo', ''));\n\t23:         $this->assertFalse($encoder->isPasswordValid('bar', 'foo', ''));\n\t24:         $this->assertFalse($encoder->isPasswordValid('FOO', 'foo', ''));\n\t26:         $encoder = new PlaintextPasswordEncoder(true);\n\t28:         $this->assertTrue($encoder->isPasswordValid('foo', 'foo', ''));\n\t29:         $this->assertFalse($encoder->isPasswordValid('bar', 'foo', ''));\n\t30:         $this->assertTrue($encoder->isPasswordValid('FOO', 'foo', ''));\n\t33:     public function testEncodePassword()\n\t35:         $encoder = new PlaintextPasswordEncoder();\n\t37:         $this->assertSame('foo', $encoder->encodePassword('foo', ''));\n\t43:     public function testEncodePasswordLength()\n\t45:         $encoder = new PlaintextPasswordEncoder();\n\t47:         $encoder->encodePassword(str_repeat('a', 5000), 'salt');\n\t50:     public function testCheckPasswordLength()\n\t52:         $encoder = new PlaintextPasswordEncoder();\n\t54:         $this->assertFalse($encoder->isPasswordValid('encoded', str_repeat('a', 5000), 'salt'));\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Encoder/UserPasswordEncoderTest.php:\n\t14: use Symfony\\Component\\Security\\Core\\Encoder\\UserPasswordEncoder;\n\t16: class UserPasswordEncoderTest extends \\PHPUnit_Framework_TestCase\n\t18:     public function testEncodePassword()\n\t25:         $mockEncoder = $this->getMock('Symfony\\Component\\Security\\Core\\Encoder\\PasswordEncoderInterface');\n\t27:             ->method('encodePassword')\n\t28:             ->with($this->equalTo('plainPassword'), $this->equalTo('userSalt'))\n\t29:             ->will($this->returnValue('encodedPassword'));\n\t37:         $passwordEncoder = new UserPasswordEncoder($mockEncoderFactory);\n\t39:         $encoded = $passwordEncoder->encodePassword($userMock, 'plainPassword');\n\t40:         $this->assertEquals('encodedPassword', $encoded);\n\t43:     public function testIsPasswordValid()\n\t50:             ->method('getPassword')\n\t51:             ->will($this->returnValue('encodedPassword'));\n\t53:         $mockEncoder = $this->getMock('Symfony\\Component\\Security\\Core\\Encoder\\PasswordEncoderInterface');\n\t55:             ->method('isPasswordValid')\n\t56:             ->with($this->equalTo('encodedPassword'), $this->equalTo('plainPassword'), $this->equalTo('userSalt'))\n\t65:         $passwordEncoder = new UserPasswordEncoder($mockEncoderFactory);\n\t67:         $isValid = $passwordEncoder->isPasswordValid($userMock, 'plainPassword');\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/User/InMemoryUserProviderTest.php:\n\t23:                 'password' => 'foo',\n\t30:         $this->assertEquals('foo', $user->getPassword());\n\t41:         $this->assertEquals('foo', $user->getPassword());\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/User/UserTest.php:\n\t42:      * @covers Symfony\\Component\\Security\\Core\\User\\User::getPassword\n\t44:     public function testGetPassword()\n\t47:         $this->assertEquals('superpass', $user->getPassword());\n\t124:         $this->assertEquals('superpass', $user->getPassword());\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Validator/Constraints/LegacyUserPasswordValidator2Dot4ApiTest.php:\n\t21: class LegacyUserPasswordValidator2Dot4ApiTest extends UserPasswordValidatorTest\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Validator/Constraints/LegacyUserPasswordValidatorTest.php:\n\t21: class LegacyUserPasswordValidatorApiTest extends UserPasswordValidatorTest\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Validator/Constraints/UserPasswordValidatorTest.php:\n\t15: use Symfony\\Component\\Security\\Core\\Encoder\\PasswordEncoderInterface;\n\t17: use Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPassword;\n\t18: use Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator;\n\t24: abstract class UserPasswordValidatorTest extends AbstractConstraintValidatorTest\n\t26:     const PASSWORD = 's3Cr3t';\n\t36:      * @var PasswordEncoderInterface\n\t47:         return new UserPasswordValidator($this->securityContext, $this->encoderFactory);\n\t54:         $this->encoder = $this->createPasswordEncoder();\n\t60:     public function testPasswordIsValid()\n\t62:         $constraint = new UserPassword(array(\n\t67:             ->method('isPasswordValid')\n\t68:             ->with(static::PASSWORD, 'secret', static::SALT)\n\t76:     public function testPasswordIsNotValid()\n\t78:         $constraint = new UserPassword(array(\n\t83:             ->method('isPasswordValid')\n\t84:             ->with(static::PASSWORD, 'secret', static::SALT)\n\t104:         $this->validator->validate('secret', new UserPassword());\n\t113:             ->method('getPassword')\n\t114:             ->will($this->returnValue(static::PASSWORD))\n\t126:     protected function createPasswordEncoder($isPasswordValid = true)\n\t128:         return $this->getMock('Symfony\\Component\\Security\\Core\\Encoder\\PasswordEncoderInterface');\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/User/AdvancedUserInterface.php:\n\t65:      * Checks whether the user's credentials (password) has expired.\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/User/InMemoryUserProvider.php:\n\t33:      * an array of attributes: 'password', 'enabled', and 'roles'.\n\t40:             $password = isset($attributes['password']) ? $attributes['password'] : null;\n\t43:             $user = new User($username, $password, $roles, $enabled, true, true, true);\n\t79:         return new User($user->getUsername(), $user->getPassword(), $user->getRoles(), $user->isEnabled(), $user->isAccountNonExpired(),\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/User/User.php:\n\t24:     private $password;\n\t31:     public function __construct($username, $password, array $roles = array(), $enabled = true, $userNonExpired = true, $credentialsNonExpired = true, $userNonLocked = true)\n\t38:         $this->password = $password;\n\t57:     public function getPassword()\n\t59:         return $this->password;\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/User/UserInterface.php:\n\t21:  * password (for checking against a submitted password), assigning roles\n\t55:      * Returns the password used to authenticate the user.\n\t57:      * This should be the encoded password. On authentication, a plain-text\n\t58:      * password will be salted, encoded, and then compared to this value.\n\t60:      * @return string The password\n\t62:     public function getPassword();\n\t65:      * Returns the salt that was originally used to encode the password.\n\t67:      * This can return null if the password was not encoded using a salt.\n\t84:      * the plain-text password is stored on this object.\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Validator/Constraints/UserPassword.php:\n\t20: class UserPassword extends Constraint\n\t22:     public $message = 'This value should be the user\\'s current password.';\n\t23:     public $service = 'security.validator.user_password';\n\n/vendor/symfony/security-core/Symfony/Component/Security/Core/Validator/Constraints/UserPasswordValidator.php:\n\t22: class UserPasswordValidator extends ConstraintValidator\n\t36:     public function validate($password, Constraint $constraint)\n\t38:         if (!$constraint instanceof UserPassword) {\n\t39:             throw new UnexpectedTypeException($constraint, __NAMESPACE__.'\\UserPassword');\n\t50:         if (!$encoder->isPasswordValid($user->getPassword(), $password, $user->getSalt())) {\n\n/vendor/vlucas/phpdotenv/README.md:\n\t48: sensitive API keys and passwords. A separate `.env.example` file is created\n\t56: be committed by collaborators.  This usage ensures that no sensitive passwords\n\nFound 1417 matches in 184 files \n\n","undoManager":{"mark":-1,"position":69,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":[" "]},{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":[" "]},{"start":{"row":0,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["Searching for \u0001admin\u0001 in\u0001/app/Http/Middleware\u0001","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":0},"end":{"row":17,"column":0},"action":"insert","lines":["/app/Http/Middleware/AuthAdmin.php:","\t6: class AuthAdmin {","\t32: \t\tif(\\Session::has('auth-admin')) {","\t34: \t\t\t$auth_admin=\\Session::get('auth-admin');","\t35: \t\t\t$this->auth->loginUsingId($auth_admin->id);","\t39: \t\tif ($this->auth->guest() || $this->auth->user()->tipo!=\"admin\")","","/app/Http/Middleware/Authenticate.php:","\t47: \t\tif($this->auth->user()->tipo==\"admin\") {","\t49: \t\t\tif($request->is(\"admin/usuarios*\") || $request->is(\"usuario/datos*\")) {","\t53: \t\t\tif($request->is(\"admin/usuario/*\")) {","\t54: \t\t\t\t\\Session::put(\"auth-admin\", $this->auth->user());","\t58: \t\t\treturn redirect()->guest('admin');","","Found 11 matches in 2 files ",""]},{"start":{"row":17,"column":0},"end":{"row":18,"column":0},"action":"insert","lines":["",""]},{"start":{"row":0,"column":46},"end":{"row":0,"column":76},"action":"insert","lines":[" (Found 11 matches in 2 files)"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":18,"column":0},"action":"remove","lines":["Searching for \u0001admin\u0001 in\u0001/app/Http/Middleware\u0001 (Found 11 matches in 2 files)","","/app/Http/Middleware/AuthAdmin.php:","\t6: class AuthAdmin {","\t32: \t\tif(\\Session::has('auth-admin')) {","\t34: \t\t\t$auth_admin=\\Session::get('auth-admin');","\t35: \t\t\t$this->auth->loginUsingId($auth_admin->id);","\t39: \t\tif ($this->auth->guest() || $this->auth->user()->tipo!=\"admin\")","","/app/Http/Middleware/Authenticate.php:","\t47: \t\tif($this->auth->user()->tipo==\"admin\") {","\t49: \t\t\tif($request->is(\"admin/usuarios*\") || $request->is(\"usuario/datos*\")) {","\t53: \t\t\tif($request->is(\"admin/usuario/*\")) {","\t54: \t\t\t\t\\Session::put(\"auth-admin\", $this->auth->user());","\t58: \t\t\treturn redirect()->guest('admin');","","Found 11 matches in 2 files ","",""]},{"start":{"row":0,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["Searching for \u0001admin\u0001 in\u0001/\u0001","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["/app/Http/Kernel.php:",""]},{"start":{"row":3,"column":0},"end":{"row":15,"column":0},"action":"insert","lines":["\t28: \t\t'admin' => 'App\\Http\\Middleware\\AuthAdmin',","","/app/Http/routes.php:","\t36: Route::get('admin/alergenos/nuevo', 'AlergenoController@create');","\t37: Route::post('admin/alergenos/nuevo', 'AlergenoController@store');","\t38: Route::get('admin/alergenos/editar/{id}', 'AlergenoController@edit');","\t39: Route::post('admin/alergenos/editar/{id}', 'AlergenoController@update');","\t40: Route::get('admin/alergenos/eliminar/{id}', 'AlergenoController@destroy');","\t48: Route::get('admin/usuarios/datatable', 'UsuarioController@usuariosDT');","\t49: Route::get('admin/usuario/{id}', 'HomeController@index');","\t55:     'admin'=>'AdminController',","",""]},{"start":{"row":15,"column":0},"end":{"row":23,"column":0},"action":"insert","lines":["/app/Http/Controllers/AdminController.php:","\t10: class AdminController extends Controller {","\t19: \t\t$this->middleware('admin');","\t23: \t\treturn view('admin.index');","\t28: \t\treturn view('admin.alergenos', array('alergenos'=>$alergenos));","\t33: \t\treturn view('admin.ingredientes', array('alergenos'=>$alergenos));","\t37: \t\treturn view('admin.usuarios');","",""]},{"start":{"row":23,"column":0},"end":{"row":24,"column":0},"action":"insert","lines":["/app/Http/Controllers/AlergenoController.php:",""]},{"start":{"row":24,"column":0},"end":{"row":36,"column":0},"action":"insert","lines":["\t14: \t\t$this->middleware('admin');","\t35: \t\treturn view('admin.alergenosForm');","\t55: \t\t    \treturn view('admin.alergenosForm')->withErrors(['Fallo al cargar imagen en el servidor. Imagen ya existente o carpeta sin permisos']); ","\t59: \t\t\treturn view('admin.alergenosForm')->withErrors(['Fallo al cargar imagen en el servidor']); ","\t62: \t\treturn redirect('admin/alergenos')->withOk('Alérgeno añadido con éxito');","\t85: \t\treturn view('admin.alergenosForm', array('alergeno'=>$alergeno));","\t109: \t\t\t    \t\treturn redirect('admin/alergenos/editar/'.$id)->withErrors(['Fallo al eliminar imagen anterior']); ","\t114: \t\t\t    \treturn redirect('admin/alergenos/editar/'.$id)->withErrors(['Fallo al cargar imagen en el servidor. Imagen ya existente o carpeta sin permisos']); ","\t118: \t\t\t\treturn redirect('admin/alergenos/editar/'.$id)->withErrors(['Fallo al cargar imagen en el servidor. Imagen inválida']); ","\t123: \t\treturn redirect('admin/alergenos/editar/'.$id)->withOk('Editado con éxito');\t","\t137: \t\treturn redirect('admin/alergenos')->withOk('Alérgeno eliminado con éxito');","",""]},{"start":{"row":36,"column":0},"end":{"row":37,"column":0},"action":"insert","lines":["/app/Http/Controllers/IngredienteController.php:",""]},{"start":{"row":37,"column":0},"end":{"row":41,"column":0},"action":"insert","lines":["\t43: \t\t$this->middleware('admin');","\t161: \t\t$this->middleware('admin');","\t189: \t\t$this->middleware('admin');","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":41,"column":0},"end":{"row":44,"column":0},"action":"insert","lines":["/app/Http/Controllers/UsuarioController.php:","\t18: \t\t$this->middleware('admin');","",""]},{"start":{"row":44,"column":0},"end":{"row":45,"column":0},"action":"insert","lines":["/app/Http/Controllers/Auth/AuthController.php:",""]},{"start":{"row":45,"column":0},"end":{"row":48,"column":0},"action":"insert","lines":["\t69: \t\tif($this->auth->user()->tipo==\"admin\"){","\t71: \t\t\treturn '/admin';","",""]},{"start":{"row":48,"column":0},"end":{"row":55,"column":0},"action":"insert","lines":["/app/Http/Middleware/AuthAdmin.php:","\t6: class AuthAdmin {","\t32: \t\tif(\\Session::has('auth-admin')) {","\t34: \t\t\t$auth_admin=\\Session::get('auth-admin');","\t35: \t\t\t$this->auth->loginUsingId($auth_admin->id);","\t39: \t\tif ($this->auth->guest() || $this->auth->user()->tipo!=\"admin\")","",""]},{"start":{"row":55,"column":0},"end":{"row":62,"column":0},"action":"insert","lines":["/app/Http/Middleware/Authenticate.php:","\t47: \t\tif($this->auth->user()->tipo==\"admin\") {","\t49: \t\t\tif($request->is(\"admin/usuarios*\") || $request->is(\"usuario/datos*\")) {","\t53: \t\t\tif($request->is(\"admin/usuario/*\")) {","\t54: \t\t\t\t\\Session::put(\"auth-admin\", $this->auth->user());","\t58: \t\t\treturn redirect()->guest('admin');","",""]},{"start":{"row":62,"column":0},"end":{"row":63,"column":0},"action":"insert","lines":["/app/Http/Requests/CreateNewAlergeno.php:",""]},{"start":{"row":63,"column":0},"end":{"row":65,"column":0},"action":"insert","lines":["\t26: \t\tif($this->is('admin/alergenos/editar/*')) {","",""]},{"start":{"row":65,"column":0},"end":{"row":68,"column":0},"action":"insert","lines":["/database/migrations/2015_03_10_215725_crear_tabla_usuarios.php:","\t20:             $table->enum('tipo', ['admin', 'user'])->default('user');","",""]},{"start":{"row":68,"column":0},"end":{"row":72,"column":0},"action":"insert","lines":["/database/seeds/UsersSeeder.php:","\t31: \t\t\t\t'email'=>'admin@prueba.com',","\t33: \t\t\t\t'tipo'=>'admin',","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":72,"column":0},"end":{"row":78,"column":0},"action":"insert","lines":["/public/css/web.css:","\t197: body[class*='page-admin-ingredientes'] .list-inline > li {","\t203: body[class*='page-admin-ingredientes'] #listaIngredientes {","\t206: body[class*='page-admin-ingredientes'] #listaIngredientes p {","\t211: body[class*='page-admin-ingredientes'] #listaIngredientes p:hover {","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":78,"column":0},"end":{"row":84,"column":0},"action":"insert","lines":["/resources/views/admin/alergenos.blade.php:","\t1: @extends('admin.home')","\t2: @section('contentAdmin')","\t4:     <div class=\"col-md-12 text-right clickable\"><a href=\"{{url('admin/alergenos/nuevo')}}\">+ Nuevo alérgeno</a></div>","\t35:           window.location.href=\"{{url('admin/alergenos/editar')}}/\"+id;","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":84,"column":0},"end":{"row":90,"column":0},"action":"insert","lines":["/resources/views/admin/alergenosForm.blade.php:","\t1: @extends('admin.home')","\t2: @section('contentAdmin')","\t3: <form class=\"form-horizontal\" method=\"post\" action= @if(isset($alergeno)) \"{{url('admin/alergenos/editar').\"/\".$alergeno->id}}\" @else \"{{url('admin/alergenos/nuevo/')}}\" @endif enctype=\"multipart/form-data\">","\t126:             location.href='{{url('admin/alergenos/eliminar/'.$alergeno->id)}}';","",""]},{"start":{"row":90,"column":0},"end":{"row":97,"column":0},"action":"insert","lines":["/resources/views/admin/home.blade.php:","\t15:                   <a class=\"navbar-brand\" href=\"#\">Administración</a>","\t23:                     <li @if(Request::is('admin/alergenos*')) class=\"active\" @endif><a href=\"{{url('admin/alergenos')}}\">Alérgenos</a></li>","\t24:                     <li @if(Request::is('admin/ingredientes*')) class=\"active\" @endif><a href=\"{{url('admin/ingredientes')}}\">Ingredientes</a></li>","\t25:                     <li @if(Request::is('admin/usuarios*')) class=\"active\" @endif><a href=\"{{url('admin/usuarios')}}\">Usuarios</a></li>","\t29:             @yield('contentAdmin')","",""]},{"start":{"row":97,"column":0},"end":{"row":98,"column":0},"action":"insert","lines":["/resources/views/admin/index.blade.php:",""]},{"start":{"row":98,"column":0},"end":{"row":104,"column":0},"action":"insert","lines":["\t3: <div class=\"container\" id=\"opciones-admin\">","\t6:         <h1 class=\"text-center\">Administración</h1>","\t11:                     <div class=\"panel-body\"><a href=\"{{url('admin/alergenos')}}\">Alérgenos</a></div>","\t19:                     <div class=\"panel-body\"><a href=\"{{url('admin/ingredientes')}}\">Ingredientes</a></div>","\t27:                     <div class=\"panel-body\"><a href=\"{{url('admin/usuarios')}}\">Usuarios</a></div>","",""]},{"start":{"row":104,"column":0},"end":{"row":108,"column":0},"action":"insert","lines":["/resources/views/admin/ingredientes.blade.php:","\t1: @extends('admin.home')","\t2: @section('contentAdmin')","",""]},{"start":{"row":108,"column":0},"end":{"row":114,"column":0},"action":"insert","lines":["/resources/views/admin/usuarios.blade.php:","\t1: @extends('admin.home')","\t2: @section('contentAdmin')","\t36:         \"ajax\": \"{{url('admin/usuarios/datatable')}}\",","\t51:         window.location.href=\"{{url('admin/usuario')}}/\"+id;","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":114,"column":0},"end":{"row":117,"column":0},"action":"insert","lines":["/storage/framework/sessions/d01710952b2d896b09674d966676d227a7f0ce2f:","\t1: a:7:{s:6:\"_token\";s:40:\"M9QK4PAP9tF73lk5ISYT426DBO7MQ6ppdBkMi7pp\";s:3:\"url\";a:1:{s:8:\"intended\";s:43:\"http://alergenos-albafo-1.c9.io/public/home\";}s:9:\"_previous\";a:1:{s:3:\"url\";s:1482:\"http://alergenos-albafo-1.c9.io/public/admin/usuarios/datatable?_=1428592998358&columns%5B0%5D%5Bdata%5D=nombre&columns%5B0%5D%5Bname%5D=&columns%5B0%5D%5Borderable%5D=true&columns%5B0%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B0%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B0%5D%5Bsearchable%5D=true&columns%5B1%5D%5Bdata%5D=apellidos&columns%5B1%5D%5Bname%5D=&columns%5B1%5D%5Borderable%5D=true&columns%5B1%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B1%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B1%5D%5Bsearchable%5D=true&columns%5B2%5D%5Bdata%5D=email&columns%5B2%5D%5Bname%5D=&columns%5B2%5D%5Borderable%5D=true&columns%5B2%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B2%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B2%5D%5Bsearchable%5D=true&columns%5B3%5D%5Bdata%5D=created_at&columns%5B3%5D%5Bname%5D=&columns%5B3%5D%5Borderable%5D=true&columns%5B3%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B3%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B3%5D%5Bsearchable%5D=true&columns%5B4%5D%5Bdata%5D=expired_at&columns%5B4%5D%5Bname%5D=&columns%5B4%5D%5Borderable%5D=true&columns%5B4%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B4%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B4%5D%5Bsearchable%5D=true&columns%5B5%5D%5Bdata%5D=status&columns%5B5%5D%5Bname%5D=&columns%5B5%5D%5Borderable%5D=true&columns%5B5%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B5%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B5%5D%5Bsearchable%5D=true&draw=1&length=10&order%5B0%5D%5Bcolumn%5D=0&order%5B0%5D%5Bdir%5D=asc&search%5Bregex%5D=false&search%5Bvalue%5D=&start=0\";}s:5:\"flash\";a:2:{s:3:\"old\";a:0:{}s:3:\"new\";a:0:{}}s:38:\"login_82e5d2c56bdd0811318f0cf078b78bfc\";s:1:\"2\";s:10:\"auth-admin\";O:8:\"App\\User\":21:{s:8:\"\u0000*\u0000table\";s:8:\"usuarios\";s:11:\"\u0000*\u0000fillable\";a:5:{i:0;s:5:\"email\";i:1;s:6:\"nombre\";i:2;s:9:\"apellidos\";i:3;s:8:\"password\";i:4;s:18:\"email_confirmation\";}s:9:\"\u0000*\u0000hidden\";a:3:{i:0;s:8:\"password\";i:1;s:14:\"remember_token\";i:2;s:18:\"email_confirmation\";}s:13:\"\u0000*\u0000connection\";N;s:13:\"\u0000*\u0000primaryKey\";s:2:\"id\";s:10:\"\u0000*\u0000perPage\";i:15;s:12:\"incrementing\";b:1;s:10:\"timestamps\";b:1;s:13:\"\u0000*\u0000attributes\";a:14:{s:2:\"id\";s:1:\"2\";s:6:\"nombre\";s:6:\"Alvaro\";s:9:\"apellidos\";s:9:\"Baño Fos\";s:4:\"tipo\";s:5:\"admin\";s:5:\"email\";s:16:\"admin@prueba.com\";s:8:\"password\";s:60:\"$2y$10$i4sShAQjUhIGIaXRPa61buV0jGTmEupxoxLCOEqtwPuWwK1zmooZe\";s:6:\"status\";s:1:\"1\";s:9:\"confirmed\";s:1:\"0\";s:18:\"email_confirmation\";s:0:\"\";s:10:\"expired_at\";s:19:\"0000-00-00 00:00:00\";s:14:\"remember_token\";N;s:10:\"created_at\";s:19:\"0000-00-00 00:00:00\";s:10:\"updated_at\";s:19:\"0000-00-00 00:00:00\";s:10:\"deleted_at\";N;}s:11:\"\u0000*\u0000original\";a:14:{s:2:\"id\";s:1:\"2\";s:6:\"nombre\";s:6:\"Alvaro\";s:9:\"apellidos\";s:9:\"Baño Fos\";s:4:\"tipo\";s:5:\"admin\";s:5:\"email\";s:16:\"admin@prueba.com\";s:8:\"password\";s:60:\"$2y$10$i4sShAQjUhIGIaXRPa61buV0jGTmEupxoxLCOEqtwPuWwK1zmooZe\";s:6:\"status\";s:1:\"1\";s:9:\"confirmed\";s:1:\"0\";s:18:\"email_confirmation\";s:0:\"\";s:10:\"expired_at\";s:19:\"0000-00-00 00:00:00\";s:14:\"remember_token\";N;s:10:\"created_at\";s:19:\"0000-00-00 00:00:00\";s:10:\"updated_at\";s:19:\"0000-00-00 00:00:00\";s:10:\"deleted_at\";N;}s:12:\"\u0000*\u0000relations\";a:0:{}s:10:\"\u0000*\u0000visible\";a:0:{}s:10:\"\u0000*\u0000appends\";a:0:{}s:10:\"\u0000*\u0000guarded\";a:1:{i:0;s:1:\"*\";}s:8:\"\u0000*\u0000dates\";a:0:{}s:8:\"\u0000*\u0000casts\";a:0:{}s:10:\"\u0000*\u0000touches\";a:0:{}s:14:\"\u0000*\u0000observables\";a:0:{}s:7:\"\u0000*\u0000with\";a:0:{}s:13:\"\u0000*\u0000morphClass\";N;s:6:\"exists\";b:1;}s:9:\"_sf2_meta\";a:3:{s:1:\"u\";i:1428593041;s:1:\"c\";i:1428592639;s:1:\"l\";s:1:\"0\";}}","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":117,"column":0},"end":{"row":123,"column":0},"action":"insert","lines":["/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:","\t1: <?php $__env->startSection('contentAdmin'); ?>","\t2: <form class=\"form-horizontal\" method=\"post\" action= <?php if(isset($alergeno)): ?> \"<?php echo e(url('admin/alergenos/editar').\"/\".$alergeno->id); ?>\" <?php else: ?> \"<?php echo e(url('admin/alergenos/nuevo/')); ?>\" <?php endif; ?> enctype=\"multipart/form-data\">","\t125:             location.href='<?php echo e(url('admin/alergenos/eliminar/'.$alergeno->id)); ?>';","\t132: <?php echo $__env->make('admin.home', array_except(get_defined_vars(), array('__data', '__path')))->render(); ?>","",""]},{"start":{"row":123,"column":0},"end":{"row":129,"column":0},"action":"insert","lines":["/storage/framework/views/36203627a2579139a05ef37a3b24921c:","\t1: <?php $__env->startSection('contentAdmin'); ?>","\t35:         \"ajax\": \"<?php echo e(url('admin/usuarios/datatable')); ?>\",","\t50:         window.location.href=\"<?php echo e(url('admin/usuario')); ?>/\"+id;","\t58: <?php echo $__env->make('admin.home', array_except(get_defined_vars(), array('__data', '__path')))->render(); ?>","",""]},{"start":{"row":129,"column":0},"end":{"row":130,"column":0},"action":"insert","lines":["/storage/framework/views/3c6c6a56d8c20c9136858cf6d5f3a139:",""]},{"start":{"row":130,"column":0},"end":{"row":133,"column":0},"action":"insert","lines":["\t2: <?php $__env->startSection('contentAdmin'); ?>","\t112: <?php echo $__env->make('admin.home', array_except(get_defined_vars(), array('__data', '__path')))->render(); ?>","",""]},{"start":{"row":133,"column":0},"end":{"row":134,"column":0},"action":"insert","lines":["/storage/framework/views/cd49850ad5bac0684dc434987bd50176:",""]},{"start":{"row":134,"column":0},"end":{"row":146,"column":0},"action":"insert","lines":["\t1: <?php $__env->startSection('contentAdmin'); ?>","\t3:     <div class=\"col-md-12 text-right clickable\"><a href=\"<?php echo e(url('admin/alergenos/nuevo')); ?>\">+ Nuevo alérgeno</a></div>","\t35:           window.location.href=\"<?php echo e(url('admin/alergenos/editar')); ?>/\"+id;","\t42: <?php echo $__env->make('admin.home', array_except(get_defined_vars(), array('__data', '__path')))->render(); ?>","","/storage/framework/views/dcd56c45f89f69f58177ee9125c4e863:","\t2: <div class=\"container\" id=\"opciones-admin\">","\t5:         <h1 class=\"text-center\">Administración</h1>","\t10:                     <div class=\"panel-body\"><a href=\"<?php echo e(url('admin/alergenos')); ?>\">Alérgenos</a></div>","\t18:                     <div class=\"panel-body\"><a href=\"<?php echo e(url('admin/ingredientes')); ?>\">Ingredientes</a></div>","\t26:                     <div class=\"panel-body\"><a href=\"<?php echo e(url('admin/usuarios')); ?>\">Usuarios</a></div>","",""]},{"start":{"row":146,"column":0},"end":{"row":147,"column":0},"action":"insert","lines":["/storage/framework/views/e04dd4566ff270a695278df1741cde1d:",""]},{"start":{"row":147,"column":0},"end":{"row":150,"column":0},"action":"insert","lines":["\t1: <?php $__env->startSection('contentAdmin'); ?>","\t310: <?php echo $__env->make('admin.home', array_except(get_defined_vars(), array('__data', '__path')))->render(); ?>","",""]},{"start":{"row":150,"column":0},"end":{"row":157,"column":0},"action":"insert","lines":["/storage/framework/views/eb6e9c800268d3e1d5c2d2015f494675:","\t13:                   <a class=\"navbar-brand\" href=\"#\">Administración</a>","\t21:                     <li <?php if(Request::is('admin/alergenos*')): ?> class=\"active\" <?php endif; ?>><a href=\"<?php echo e(url('admin/alergenos')); ?>\">Alérgenos</a></li>","\t22:                     <li <?php if(Request::is('admin/ingredientes*')): ?> class=\"active\" <?php endif; ?>><a href=\"<?php echo e(url('admin/ingredientes')); ?>\">Ingredientes</a></li>","\t23:                     <li <?php if(Request::is('admin/usuarios*')): ?> class=\"active\" <?php endif; ?>><a href=\"<?php echo e(url('admin/usuarios')); ?>\">Usuarios</a></li>","\t27:             <?php echo $__env->yieldContent('contentAdmin'); ?>","",""]},{"start":{"row":157,"column":0},"end":{"row":184,"column":0},"action":"insert","lines":["/storage/logs/laravel-2015-04-04.log:","\t522: [2015-04-04 11:34:40] local.ERROR: exception 'ReflectionException' with message 'Class App\\Http\\Controllers\\AdminController does not exist' in /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Routing/ControllerInspector.php:29","\t525: #1 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Routing/Router.php(251): Illuminate\\Routing\\ControllerInspector->getRoutable('App\\Http\\Contro...', 'admin')","\t526: #2 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Routing/Router.php(226): Illuminate\\Routing\\Router->controller('admin', 'AdminController')","\t551: [2015-04-04 11:35:40] local.ERROR: exception 'ReflectionException' with message 'Class App\\Http\\Controllers\\AdminController does not exist' in /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Routing/ControllerInspector.php:29","\t554: #1 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Routing/Router.php(251): Illuminate\\Routing\\ControllerInspector->getRoutable('App\\Http\\Contro...', 'admin')","\t555: #2 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Routing/Router.php(226): Illuminate\\Routing\\Router->controller('admin', 'AdminController')","\t580: [2015-04-04 11:38:12] local.ERROR: exception 'InvalidArgumentException' with message 'View [admin] not found.' in /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/View/FileViewFinder.php:140","\t582: #0 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/View/FileViewFinder.php(77): Illuminate\\View\\FileViewFinder->findInPaths('admin', Array)","\t583: #1 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/View/Factory.php(145): Illuminate\\View\\FileViewFinder->find('admin')","\t584: #2 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Foundation/helpers.php(578): Illuminate\\View\\Factory->make('admin', Array, Array)","\t585: #3 /home/ubuntu/workspace/app/Http/Controllers/AdminController.php(17): view('admin')","\t586: #4 [internal function]: App\\Http\\Controllers\\AdminController->getIndex()","\t589: #7 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Routing/ControllerDispatcher.php(107): Illuminate\\Routing\\ControllerDispatcher->call(Object(App\\Http\\Controllers\\AdminController), Object(Illuminate\\Routing\\Route), 'getIndex')","\t595: #13 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Routing/ControllerDispatcher.php(67): Illuminate\\Routing\\ControllerDispatcher->callWithinStack(Object(App\\Http\\Controllers\\AdminController), Object(Illuminate\\Routing\\Route), Object(Illuminate\\Http\\Request), 'getIndex')","\t628: [2015-04-04 11:38:27] local.ERROR: exception 'Symfony\\Component\\Debug\\Exception\\FatalErrorException' with message 'syntax error, unexpected 'admin' (T_STRING)' in /home/ubuntu/workspace/storage/framework/views/eb6e9c800268d3e1d5c2d2015f494675:22","\t679: Next exception 'ErrorException' with message 'Undefined variable: menu (View: /home/ubuntu/workspace/resources/views/admin/home.blade.php)' in /home/ubuntu/workspace/storage/framework/views/eb6e9c800268d3e1d5c2d2015f494675:13","\t726: Next exception 'ErrorException' with message 'Undefined variable: menu (View: /home/ubuntu/workspace/resources/views/admin/home.blade.php) (View: /home/ubuntu/workspace/resources/views/admin/home.blade.php)' in /home/ubuntu/workspace/storage/framework/views/eb6e9c800268d3e1d5c2d2015f494675:13","\t778: [2015-04-04 12:14:18] local.ERROR: exception 'ErrorException' with message 'Undefined property: App\\Http\\Middleware\\AuthAdmin::$auth' in /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php:16","\t780: #0 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(16): Illuminate\\Foundation\\Bootstrap\\HandleExceptions->handleError(8, 'Undefined prope...', '/home/ubuntu/wo...', 16, Array)","\t781: #1 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t785: #5 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Routing/ControllerDispatcher.php(67): Illuminate\\Routing\\ControllerDispatcher->callWithinStack(Object(App\\Http\\Controllers\\AdminController), Object(Illuminate\\Routing\\Route), Object(Illuminate\\Http\\Request), 'getAlergenos')","\t818: [2015-04-04 12:14:56] local.ERROR: exception 'ErrorException' with message 'Undefined property: App\\Http\\Middleware\\AuthAdmin::$auth' in /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php:17","\t820: #0 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(17): Illuminate\\Foundation\\Bootstrap\\HandleExceptions->handleError(8, 'Undefined prope...', '/home/ubuntu/wo...', 17, Array)","\t821: #1 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t825: #5 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Routing/ControllerDispatcher.php(67): Illuminate\\Routing\\ControllerDispatcher->callWithinStack(Object(App\\Http\\Controllers\\AdminController), Object(Illuminate\\Routing\\Route), Object(Illuminate\\Http\\Request), 'getAlergenos')","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":184,"column":0},"end":{"row":216,"column":0},"action":"insert","lines":["/storage/logs/laravel-2015-04-05.log:","\t43: Next exception 'ErrorException' with message 'Undefined variable: menu (View: /home/ubuntu/workspace/resources/views/admin/alergenosNuevo.blade.php)' in /home/ubuntu/workspace/storage/framework/views/3c6c6a56d8c20c9136858cf6d5f3a139:3","\t125: Next exception 'ErrorException' with message 'Undefined variable: menu (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:29","\t210: Next exception 'ErrorException' with message 'Undefined variable: menu (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:38","\t292: Next exception 'ErrorException' with message 'Undefined variable: menu (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:96","\t374: Next exception 'ErrorException' with message 'Undefined variable: menu (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:96","\t456: Next exception 'ErrorException' with message 'Undefined variable: menu (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:96","\t505: #7 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t506: #8 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t580: #6 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t581: #7 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t626: #6 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t627: #7 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t679: #7 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t680: #8 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t934: #7 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t935: #8 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t987: #7 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t988: #8 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t1036: #9 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t1037: #10 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t1085: #9 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t1086: #10 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t1165: Next exception 'ErrorException' with message 'Trying to get property of non-object (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:125","\t1247: Next exception 'ErrorException' with message 'Trying to get property of non-object (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:125","\t1296: #7 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t1297: #8 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t1376: Next exception 'ErrorException' with message 'Trying to get property of non-object (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:125","\t1458: Next exception 'ErrorException' with message 'Undefined variable: alergeno (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:125","\t1540: Next exception 'ErrorException' with message 'Undefined variable: alergeno (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:125","\t1622: Next exception 'ErrorException' with message 'Undefined variable: alergeno (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:125","",""]},{"start":{"row":216,"column":0},"end":{"row":219,"column":0},"action":"insert","lines":["/storage/logs/laravel-2015-04-06.log:","\t49: Next exception 'ErrorException' with message 'Undefined variable: menu (View: /home/ubuntu/workspace/resources/views/admin/ingredientes.blade.php)' in /home/ubuntu/workspace/storage/framework/views/e04dd4566ff270a695278df1741cde1d:41","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":219,"column":0},"end":{"row":232,"column":0},"action":"insert","lines":["/storage/logs/laravel-2015-04-08.log:","\t1: [2015-04-08 10:26:59] local.ERROR: exception 'ErrorException' with message 'Use of undefined constant admin - assumed 'admin'' in /home/ubuntu/workspace/storage/framework/views/36203627a2579139a05ef37a3b24921c:45","\t43: Next exception 'ErrorException' with message 'Use of undefined constant admin - assumed 'admin' (View: /home/ubuntu/workspace/resources/views/admin/usuarios.blade.php)' in /home/ubuntu/workspace/storage/framework/views/36203627a2579139a05ef37a3b24921c:45","\t428: #20 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t429: #21 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t487: #18 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t488: #19 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t544: #8 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t545: #9 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t597: #10 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t598: #11 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t638: [2015-04-08 15:58:04] local.ERROR: exception 'Symfony\\Component\\Debug\\Exception\\FatalErrorException' with message 'syntax error, unexpected 'admin' (T_STRING)' in /home/ubuntu/workspace/storage/framework/views/36203627a2579139a05ef37a3b24921c:58","",""]},{"start":{"row":232,"column":0},"end":{"row":236,"column":0},"action":"insert","lines":["/vendor/composer/autoload_classmap.php:","\t20:     'App\\\\Http\\\\Controllers\\\\AdminController' => $baseDir . '/app/Http/Controllers/AdminController.php',","\t33:     'App\\\\Http\\\\Middleware\\\\AuthAdmin' => $baseDir . '/app/Http/Middleware/AuthAdmin.php',","",""]},{"start":{"row":236,"column":0},"end":{"row":242,"column":0},"action":"insert","lines":["/vendor/doctrine/cache/lib/Doctrine/Common/Cache/XcacheCache.php:","\t80:      * Checks that xcache.admin.enable_auth is Off.","\t84:      * @throws \\BadMethodCallException When xcache.admin.enable_auth is On.","\t88:         if (ini_get('xcache.admin.enable_auth')) {","\t91:                 . 'you must set \"xcache.admin.enable_auth\" to \"Off\" in your php.ini.'","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":242,"column":0},"end":{"row":245,"column":0},"action":"insert","lines":["/vendor/doctrine/cache/tests/Doctrine/Tests/Common/Cache/CouchbaseCacheTest.php:","\t16:                 $this->couchbase = new Couchbase('127.0.0.1', 'Administrator', 'password', 'default');","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":245,"column":0},"end":{"row":248,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/Platforms/DB2Platform.php:","\t552:                 $sql[] = \"CALL SYSPROC.ADMIN_CMD ('REORG TABLE \" . $diff->getName($this)->getQuotedName($this) . \"')\";","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":248,"column":0},"end":{"row":251,"column":0},"action":"insert","lines":["/vendor/fzaninotto/faker/src/Faker/Provider/de_AT/Address.php:","\t35:         'Saalfelden am Steinernen Meer', 'Salzburg', 'Sankt Andrä im Lavanttal', 'Sankt Johann im Pongau', 'Sankt Pölten', 'Sankt Valentin', 'Sankt Veit an der Glan', 'Schärding', 'Scheibbs', 'Schladming', 'Schrattenthal', 'Schrems', 'Schwanenstadt', 'Schwaz', 'Schwechat', 'Seekirchen am Wallersee', 'Spittal an der Drau', 'Stadtschlaining', 'Steyr', 'Steyregg', 'Stockerau', 'Straßburg',","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":251,"column":0},"end":{"row":254,"column":0},"action":"insert","lines":["/vendor/fzaninotto/faker/src/Faker/Provider/en_US/Company.php:","\t18:             '24hour', '24/7', '3rdgeneration', '4thgeneration', '5thgeneration', '6thgeneration', 'actuating', 'analyzing', 'assymetric', 'asynchronous', 'attitude-oriented', 'background', 'bandwidth-monitored', 'bi-directional', 'bifurcated', 'bottom-line', 'clear-thinking', 'client-driven', 'client-server', 'coherent', 'cohesive', 'composite', 'context-sensitive', 'contextually-based', 'content-based', 'dedicated', 'demand-driven', 'didactic', 'directional', 'discrete', 'disintermediate', 'dynamic', 'eco-centric', 'empowering', 'encompassing', 'even-keeled', 'executive', 'explicit', 'exuding', 'fault-tolerant', 'foreground', 'fresh-thinking', 'full-range', 'global', 'grid-enabled', 'heuristic', 'high-level', 'holistic', 'homogeneous', 'human-resource', 'hybrid', 'impactful', 'incremental', 'intangible', 'interactive', 'intermediate', 'leadingedge', 'local', 'logistical', 'maximized', 'methodical', 'mission-critical', 'mobile', 'modular', 'motivating', 'multimedia', 'multi-state', 'multi-tasking', 'national', 'needs-based', 'neutral', 'nextgeneration', 'non-volatile', 'object-oriented', 'optimal', 'optimizing', 'radical', 'real-time', 'reciprocal', 'regional', 'responsive', 'scalable', 'secondary', 'solution-oriented', 'stable', 'static', 'systematic', 'systemic', 'system-worthy', 'tangible', 'tertiary', 'transitional', 'uniform', 'upward-trending', 'user-facing', 'value-added', 'web-enabled', 'well-modulated', 'zeroadministration', 'zerodefect', 'zerotolerance'","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":254,"column":0},"end":{"row":257,"column":0},"action":"insert","lines":["/vendor/fzaninotto/faker/src/Faker/Provider/es_AR/Company.php:","\t20:             '24hour', '24/7', '3rdgeneration', '4thgeneration', '5thgeneration', '6thgeneration', 'actuating', 'analyzing', 'assymetric', 'asynchronous', 'attitude-oriented', 'background', 'bandwidth-monitored', 'bi-directional', 'bifurcated', 'bottom-line', 'clear-thinking', 'client-driven', 'client-server', 'coherent', 'cohesive', 'composite', 'context-sensitive', 'contextually-based', 'content-based', 'dedicated', 'demand-driven', 'didactic', 'directional', 'discrete', 'disintermediate', 'dynamic', 'eco-centric', 'empowering', 'encompassing', 'even-keeled', 'executive', 'explicit', 'exuding', 'fault-tolerant', 'foreground', 'fresh-thinking', 'full-range', 'global', 'grid-enabled', 'heuristic', 'high-level', 'holistic', 'homogeneous', 'human-resource', 'hybrid', 'impactful', 'incremental', 'intangible', 'interactive', 'intermediate', 'leadingedge', 'local', 'logistical', 'maximized', 'methodical', 'mission-critical', 'mobile', 'modular', 'motivating', 'multimedia', 'multi-state', 'multi-tasking', 'national', 'needs-based', 'neutral', 'nextgeneration', 'non-volatile', 'object-oriented', 'optimal', 'optimizing', 'radical', 'real-time', 'reciprocal', 'regional', 'responsive', 'scalable', 'secondary', 'solution-oriented', 'stable', 'static', 'systematic', 'systemic', 'system-worthy', 'tangible', 'tertiary', 'transitional', 'uniform', 'upward-trending', 'user-facing', 'value-added', 'web-enabled', 'well-modulated', 'zeroadministration', 'zerodefect', 'zerotolerance'","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":257,"column":0},"end":{"row":260,"column":0},"action":"insert","lines":["/vendor/fzaninotto/faker/src/Faker/Provider/es_ES/Company.php:","\t25:             '24hour', '24/7', '3rdgeneration', '4thgeneration', '5thgeneration', '6thgeneration', 'actuating', 'analyzing', 'assymetric', 'asynchronous', 'attitude-oriented', 'background', 'bandwidth-monitored', 'bi-directional', 'bifurcated', 'bottom-line', 'clear-thinking', 'client-driven', 'client-server', 'coherent', 'cohesive', 'composite', 'context-sensitive', 'contextually-based', 'content-based', 'dedicated', 'demand-driven', 'didactic', 'directional', 'discrete', 'disintermediate', 'dynamic', 'eco-centric', 'empowering', 'encompassing', 'even-keeled', 'executive', 'explicit', 'exuding', 'fault-tolerant', 'foreground', 'fresh-thinking', 'full-range', 'global', 'grid-enabled', 'heuristic', 'high-level', 'holistic', 'homogeneous', 'human-resource', 'hybrid', 'impactful', 'incremental', 'intangible', 'interactive', 'intermediate', 'leadingedge', 'local', 'logistical', 'maximized', 'methodical', 'mission-critical', 'mobile', 'modular', 'motivating', 'multimedia', 'multi-state', 'multi-tasking', 'national', 'needs-based', 'neutral', 'nextgeneration', 'non-volatile', 'object-oriented', 'optimal', 'optimizing', 'radical', 'real-time', 'reciprocal', 'regional', 'responsive', 'scalable', 'secondary', 'solution-oriented', 'stable', 'static', 'systematic', 'systemic', 'system-worthy', 'tangible', 'tertiary', 'transitional', 'uniform', 'upward-trending', 'user-facing', 'value-added', 'web-enabled', 'well-modulated', 'zeroadministration', 'zerodefect', 'zerotolerance'","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":260,"column":0},"end":{"row":263,"column":0},"action":"insert","lines":["/vendor/fzaninotto/faker/src/Faker/Provider/es_PE/Company.php:","\t20:             '24hour', '24/7', '3rdgeneration', '4thgeneration', '5thgeneration', '6thgeneration', 'actuating', 'analyzing', 'assymetric', 'asynchronous', 'attitude-oriented', 'background', 'bandwidth-monitored', 'bi-directional', 'bifurcated', 'bottom-line', 'clear-thinking', 'client-driven', 'client-server', 'coherent', 'cohesive', 'composite', 'context-sensitive', 'contextually-based', 'content-based', 'dedicated', 'demand-driven', 'didactic', 'directional', 'discrete', 'disintermediate', 'dynamic', 'eco-centric', 'empowering', 'encompassing', 'even-keeled', 'executive', 'explicit', 'exuding', 'fault-tolerant', 'foreground', 'fresh-thinking', 'full-range', 'global', 'grid-enabled', 'heuristic', 'high-level', 'holistic', 'homogeneous', 'human-resource', 'hybrid', 'impactful', 'incremental', 'intangible', 'interactive', 'intermediate', 'leadingedge', 'local', 'logistical', 'maximized', 'methodical', 'mission-critical', 'mobile', 'modular', 'motivating', 'multimedia', 'multi-state', 'multi-tasking', 'national', 'needs-based', 'neutral', 'nextgeneration', 'non-volatile', 'object-oriented', 'optimal', 'optimizing', 'radical', 'real-time', 'reciprocal', 'regional', 'responsive', 'scalable', 'secondary', 'solution-oriented', 'stable', 'static', 'systematic', 'systemic', 'system-worthy', 'tangible', 'tertiary', 'transitional', 'uniform', 'upward-trending', 'user-facing', 'value-added', 'web-enabled', 'well-modulated', 'zeroadministration', 'zerodefect', 'zerotolerance'","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":263,"column":0},"end":{"row":270,"column":0},"action":"insert","lines":["/vendor/fzaninotto/faker/src/Faker/Provider/fr_FR/Text.php:","\t2590: administra de la valériane et des bains de camphre. Tout ce que","\t5788: rendre justice à l'administration supérieure, au gouvernement, au","\t10808: d'une autorisation générale pour «gérer et administrer ses","\t13728: -- Du calme! dit l'apothicaire. Il s'agit seulement d'administrer","\t13852: allait administrer de la thériaque, lorsqu'on entendit le","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":270,"column":0},"end":{"row":271,"column":0},"action":"insert","lines":["/vendor/fzaninotto/faker/src/Faker/Provider/id_ID/Address.php:",""]},{"start":{"row":271,"column":0},"end":{"row":275,"column":0},"action":"insert","lines":["\t228:         \"Administrasi Jakarta Barat\", \"Administrasi Jakarta Pusat\",","\t229:         \"Administrasi Jakarta Selatan\", \"Administrasi Jakarta Timur\",","\t230:         \"Administrasi Jakarta Utara\", \"Ambon\", \"Balikpapan\", \"Banda Aceh\",","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":275,"column":0},"end":{"row":278,"column":0},"action":"insert","lines":["/vendor/fzaninotto/faker/src/Faker/Provider/ru_RU/Text.php:","\t4345:     Licensor is a member of a collecting society that administers","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":278,"column":0},"end":{"row":281,"column":0},"action":"insert","lines":["/vendor/fzaninotto/faker/src/Faker/Provider/uk_UA/Text.php:","\t4313:     Licensor is a member of a collecting society that administers","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":281,"column":0},"end":{"row":284,"column":0},"action":"insert","lines":["/vendor/symfony/filesystem/Symfony/Component/Filesystem/Filesystem.php:","\t309:                     throw new IOException('Unable to create symlink due to error code 1314: \\'A required privilege is not held by the client\\'. Do you have the required Administrator-rights?');","",""]},{"start":{"row":284,"column":0},"end":{"row":288,"column":0},"action":"insert","lines":["/vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/CookieTest.php:","\t139:         $cookie = new Cookie('foo', null, 1, '/admin/', '.myfoodomain.com');","\t140:         $this->assertEquals('foo=deleted; expires='.gmdate('D, d-M-Y H:i:s T', time() - 31536001).'; path=/admin/; domain=.myfoodomain.com; httponly', $cookie->__toString(), '->__toString() returns string representation of a cleared cookie if value is NULL');","",""]},{"start":{"row":288,"column":0},"end":{"row":297,"column":0},"action":"insert","lines":["/vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestMatcherTest.php:","\t98:         $request = Request::create('/admin/foo');","\t100:         $matcher->matchPath('/admin/.*');","\t103:         $matcher->matchPath('/admin');","\t106:         $matcher->matchPath('^/admin/.*$');","\t126:         $request = Request::create('/admin/fo%20o');","\t127:         $matcher->matchPath('^/admin/fo o*$');","\t135:         $request = Request::create('/admin/foo');","",""]},{"start":{"row":297,"column":0},"end":{"row":303,"column":0},"action":"insert","lines":["/vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/MongoDbProfilerStorageTest.php:","\t87:             array('mongodb://user:password@localhost/admin/symfony_tests/profiler_data', array(","\t88:                 'mongodb://user:password@localhost/admin',","\t92:             array('mongodb://user:password@localhost:27009,localhost:27010/?replicaSet=rs-name&authSource=admin/symfony_tests/profiler_data', array(","\t93:                 'mongodb://user:password@localhost:27009,localhost:27010/?replicaSet=rs-name&authSource=admin',","",""]},{"start":{"row":303,"column":0},"end":{"row":316,"column":0},"action":"insert","lines":["/vendor/symfony/routing/Symfony/Component/Routing/Tests/RouteCollectionTest.php:","\t150:         $collection->addPrefix('/{admin}', array('admin' => 'admin'), array('admin' => '\\d+'));","\t151:         $this->assertEquals('/{admin}/foo', $collection->get('foo')->getPath(), '->addPrefix() adds a prefix to all routes');","\t152:         $this->assertEquals('/{admin}/bar', $collection->get('bar')->getPath(), '->addPrefix() adds a prefix to all routes');","\t153:         $this->assertEquals(array('admin' => 'admin'), $collection->get('foo')->getDefaults(), '->addPrefix() adds defaults to all routes');","\t154:         $this->assertEquals(array('admin' => 'admin'), $collection->get('bar')->getDefaults(), '->addPrefix() adds defaults to all routes');","\t155:         $this->assertEquals(array('admin' => '\\d+'), $collection->get('foo')->getRequirements(), '->addPrefix() adds requirements to all routes');","\t156:         $this->assertEquals(array('admin' => '\\d+'), $collection->get('bar')->getRequirements(), '->addPrefix() adds requirements to all routes');","\t158:         $this->assertEquals('/0/{admin}/foo', $collection->get('foo')->getPath(), '->addPrefix() ensures a prefix must start with a slash and must not end with a slash');","\t160:         $this->assertSame('/ /0/{admin}/foo', $collection->get('foo')->getPath(), '->addPrefix() can handle spaces if desired');","\t161:         $this->assertSame('/ /0/{admin}/bar', $collection->get('bar')->getPath(), 'the route pattern of an added collection is in synch with the added prefix');","\t169:         $collection->addPrefix('/admin', array(), array('_scheme' => 'https'));","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":316,"column":0},"end":{"row":319,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authorization/ExpressionLanguageTest.php:","\t43:         $roles = array('ROLE_USER', 'ROLE_ADMIN');","",""]},{"start":{"row":319,"column":0},"end":{"row":326,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Role/RoleHierarchyTest.php:","\t22:             'ROLE_ADMIN' => array('ROLE_USER'),","\t23:             'ROLE_SUPER_ADMIN' => array('ROLE_ADMIN', 'ROLE_FOO'),","\t28:         $this->assertEquals(array(new Role('ROLE_ADMIN'), new Role('ROLE_USER')), $role->getReachableRoles(array(new Role('ROLE_ADMIN'))));","\t29:         $this->assertEquals(array(new Role('ROLE_FOO'), new Role('ROLE_ADMIN'), new Role('ROLE_USER')), $role->getReachableRoles(array(new Role('ROLE_FOO'), new Role('ROLE_ADMIN'))));","\t30:         $this->assertEquals(array(new Role('ROLE_SUPER_ADMIN'), new Role('ROLE_ADMIN'), new Role('ROLE_FOO'), new Role('ROLE_USER')), $role->getReachableRoles(array(new Role('ROLE_SUPER_ADMIN'))));","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":326,"column":0},"end":{"row":330,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/User/UserTest.php:","\t36:         $user = new User('fabien', 'superpass', array('ROLE_ADMIN'));","\t37:         $this->assertEquals(array('ROLE_ADMIN'), $user->getRoles());","",""]},{"start":{"row":330,"column":0},"end":{"row":333,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/User/InMemoryUserProvider.php:","\t21:  * (a backend with a unique admin for instance)","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":333,"column":0},"end":{"row":334,"column":0},"action":"insert","lines":["Found 264 matches in 53 files ",""]}]}],[{"group":"doc","deltas":[{"start":{"row":334,"column":0},"end":{"row":335,"column":0},"action":"insert","lines":["",""]},{"start":{"row":0,"column":27},"end":{"row":0,"column":59},"action":"insert","lines":[" (Found 264 matches in 53 files)"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":335,"column":0},"action":"remove","lines":["Searching for \u0001admin\u0001 in\u0001/\u0001 (Found 264 matches in 53 files)","","/app/Http/Kernel.php:","\t28: \t\t'admin' => 'App\\Http\\Middleware\\AuthAdmin',","","/app/Http/routes.php:","\t36: Route::get('admin/alergenos/nuevo', 'AlergenoController@create');","\t37: Route::post('admin/alergenos/nuevo', 'AlergenoController@store');","\t38: Route::get('admin/alergenos/editar/{id}', 'AlergenoController@edit');","\t39: Route::post('admin/alergenos/editar/{id}', 'AlergenoController@update');","\t40: Route::get('admin/alergenos/eliminar/{id}', 'AlergenoController@destroy');","\t48: Route::get('admin/usuarios/datatable', 'UsuarioController@usuariosDT');","\t49: Route::get('admin/usuario/{id}', 'HomeController@index');","\t55:     'admin'=>'AdminController',","","/app/Http/Controllers/AdminController.php:","\t10: class AdminController extends Controller {","\t19: \t\t$this->middleware('admin');","\t23: \t\treturn view('admin.index');","\t28: \t\treturn view('admin.alergenos', array('alergenos'=>$alergenos));","\t33: \t\treturn view('admin.ingredientes', array('alergenos'=>$alergenos));","\t37: \t\treturn view('admin.usuarios');","","/app/Http/Controllers/AlergenoController.php:","\t14: \t\t$this->middleware('admin');","\t35: \t\treturn view('admin.alergenosForm');","\t55: \t\t    \treturn view('admin.alergenosForm')->withErrors(['Fallo al cargar imagen en el servidor. Imagen ya existente o carpeta sin permisos']); ","\t59: \t\t\treturn view('admin.alergenosForm')->withErrors(['Fallo al cargar imagen en el servidor']); ","\t62: \t\treturn redirect('admin/alergenos')->withOk('Alérgeno añadido con éxito');","\t85: \t\treturn view('admin.alergenosForm', array('alergeno'=>$alergeno));","\t109: \t\t\t    \t\treturn redirect('admin/alergenos/editar/'.$id)->withErrors(['Fallo al eliminar imagen anterior']); ","\t114: \t\t\t    \treturn redirect('admin/alergenos/editar/'.$id)->withErrors(['Fallo al cargar imagen en el servidor. Imagen ya existente o carpeta sin permisos']); ","\t118: \t\t\t\treturn redirect('admin/alergenos/editar/'.$id)->withErrors(['Fallo al cargar imagen en el servidor. Imagen inválida']); ","\t123: \t\treturn redirect('admin/alergenos/editar/'.$id)->withOk('Editado con éxito');\t","\t137: \t\treturn redirect('admin/alergenos')->withOk('Alérgeno eliminado con éxito');","","/app/Http/Controllers/IngredienteController.php:","\t43: \t\t$this->middleware('admin');","\t161: \t\t$this->middleware('admin');","\t189: \t\t$this->middleware('admin');","","/app/Http/Controllers/UsuarioController.php:","\t18: \t\t$this->middleware('admin');","","/app/Http/Controllers/Auth/AuthController.php:","\t69: \t\tif($this->auth->user()->tipo==\"admin\"){","\t71: \t\t\treturn '/admin';","","/app/Http/Middleware/AuthAdmin.php:","\t6: class AuthAdmin {","\t32: \t\tif(\\Session::has('auth-admin')) {","\t34: \t\t\t$auth_admin=\\Session::get('auth-admin');","\t35: \t\t\t$this->auth->loginUsingId($auth_admin->id);","\t39: \t\tif ($this->auth->guest() || $this->auth->user()->tipo!=\"admin\")","","/app/Http/Middleware/Authenticate.php:","\t47: \t\tif($this->auth->user()->tipo==\"admin\") {","\t49: \t\t\tif($request->is(\"admin/usuarios*\") || $request->is(\"usuario/datos*\")) {","\t53: \t\t\tif($request->is(\"admin/usuario/*\")) {","\t54: \t\t\t\t\\Session::put(\"auth-admin\", $this->auth->user());","\t58: \t\t\treturn redirect()->guest('admin');","","/app/Http/Requests/CreateNewAlergeno.php:","\t26: \t\tif($this->is('admin/alergenos/editar/*')) {","","/database/migrations/2015_03_10_215725_crear_tabla_usuarios.php:","\t20:             $table->enum('tipo', ['admin', 'user'])->default('user');","","/database/seeds/UsersSeeder.php:","\t31: \t\t\t\t'email'=>'admin@prueba.com',","\t33: \t\t\t\t'tipo'=>'admin',","","/public/css/web.css:","\t197: body[class*='page-admin-ingredientes'] .list-inline > li {","\t203: body[class*='page-admin-ingredientes'] #listaIngredientes {","\t206: body[class*='page-admin-ingredientes'] #listaIngredientes p {","\t211: body[class*='page-admin-ingredientes'] #listaIngredientes p:hover {","","/resources/views/admin/alergenos.blade.php:","\t1: @extends('admin.home')","\t2: @section('contentAdmin')","\t4:     <div class=\"col-md-12 text-right clickable\"><a href=\"{{url('admin/alergenos/nuevo')}}\">+ Nuevo alérgeno</a></div>","\t35:           window.location.href=\"{{url('admin/alergenos/editar')}}/\"+id;","","/resources/views/admin/alergenosForm.blade.php:","\t1: @extends('admin.home')","\t2: @section('contentAdmin')","\t3: <form class=\"form-horizontal\" method=\"post\" action= @if(isset($alergeno)) \"{{url('admin/alergenos/editar').\"/\".$alergeno->id}}\" @else \"{{url('admin/alergenos/nuevo/')}}\" @endif enctype=\"multipart/form-data\">","\t126:             location.href='{{url('admin/alergenos/eliminar/'.$alergeno->id)}}';","","/resources/views/admin/home.blade.php:","\t15:                   <a class=\"navbar-brand\" href=\"#\">Administración</a>","\t23:                     <li @if(Request::is('admin/alergenos*')) class=\"active\" @endif><a href=\"{{url('admin/alergenos')}}\">Alérgenos</a></li>","\t24:                     <li @if(Request::is('admin/ingredientes*')) class=\"active\" @endif><a href=\"{{url('admin/ingredientes')}}\">Ingredientes</a></li>","\t25:                     <li @if(Request::is('admin/usuarios*')) class=\"active\" @endif><a href=\"{{url('admin/usuarios')}}\">Usuarios</a></li>","\t29:             @yield('contentAdmin')","","/resources/views/admin/index.blade.php:","\t3: <div class=\"container\" id=\"opciones-admin\">","\t6:         <h1 class=\"text-center\">Administración</h1>","\t11:                     <div class=\"panel-body\"><a href=\"{{url('admin/alergenos')}}\">Alérgenos</a></div>","\t19:                     <div class=\"panel-body\"><a href=\"{{url('admin/ingredientes')}}\">Ingredientes</a></div>","\t27:                     <div class=\"panel-body\"><a href=\"{{url('admin/usuarios')}}\">Usuarios</a></div>","","/resources/views/admin/ingredientes.blade.php:","\t1: @extends('admin.home')","\t2: @section('contentAdmin')","","/resources/views/admin/usuarios.blade.php:","\t1: @extends('admin.home')","\t2: @section('contentAdmin')","\t36:         \"ajax\": \"{{url('admin/usuarios/datatable')}}\",","\t51:         window.location.href=\"{{url('admin/usuario')}}/\"+id;","","/storage/framework/sessions/d01710952b2d896b09674d966676d227a7f0ce2f:","\t1: a:7:{s:6:\"_token\";s:40:\"M9QK4PAP9tF73lk5ISYT426DBO7MQ6ppdBkMi7pp\";s:3:\"url\";a:1:{s:8:\"intended\";s:43:\"http://alergenos-albafo-1.c9.io/public/home\";}s:9:\"_previous\";a:1:{s:3:\"url\";s:1482:\"http://alergenos-albafo-1.c9.io/public/admin/usuarios/datatable?_=1428592998358&columns%5B0%5D%5Bdata%5D=nombre&columns%5B0%5D%5Bname%5D=&columns%5B0%5D%5Borderable%5D=true&columns%5B0%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B0%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B0%5D%5Bsearchable%5D=true&columns%5B1%5D%5Bdata%5D=apellidos&columns%5B1%5D%5Bname%5D=&columns%5B1%5D%5Borderable%5D=true&columns%5B1%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B1%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B1%5D%5Bsearchable%5D=true&columns%5B2%5D%5Bdata%5D=email&columns%5B2%5D%5Bname%5D=&columns%5B2%5D%5Borderable%5D=true&columns%5B2%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B2%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B2%5D%5Bsearchable%5D=true&columns%5B3%5D%5Bdata%5D=created_at&columns%5B3%5D%5Bname%5D=&columns%5B3%5D%5Borderable%5D=true&columns%5B3%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B3%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B3%5D%5Bsearchable%5D=true&columns%5B4%5D%5Bdata%5D=expired_at&columns%5B4%5D%5Bname%5D=&columns%5B4%5D%5Borderable%5D=true&columns%5B4%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B4%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B4%5D%5Bsearchable%5D=true&columns%5B5%5D%5Bdata%5D=status&columns%5B5%5D%5Bname%5D=&columns%5B5%5D%5Borderable%5D=true&columns%5B5%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B5%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B5%5D%5Bsearchable%5D=true&draw=1&length=10&order%5B0%5D%5Bcolumn%5D=0&order%5B0%5D%5Bdir%5D=asc&search%5Bregex%5D=false&search%5Bvalue%5D=&start=0\";}s:5:\"flash\";a:2:{s:3:\"old\";a:0:{}s:3:\"new\";a:0:{}}s:38:\"login_82e5d2c56bdd0811318f0cf078b78bfc\";s:1:\"2\";s:10:\"auth-admin\";O:8:\"App\\User\":21:{s:8:\"\u0000*\u0000table\";s:8:\"usuarios\";s:11:\"\u0000*\u0000fillable\";a:5:{i:0;s:5:\"email\";i:1;s:6:\"nombre\";i:2;s:9:\"apellidos\";i:3;s:8:\"password\";i:4;s:18:\"email_confirmation\";}s:9:\"\u0000*\u0000hidden\";a:3:{i:0;s:8:\"password\";i:1;s:14:\"remember_token\";i:2;s:18:\"email_confirmation\";}s:13:\"\u0000*\u0000connection\";N;s:13:\"\u0000*\u0000primaryKey\";s:2:\"id\";s:10:\"\u0000*\u0000perPage\";i:15;s:12:\"incrementing\";b:1;s:10:\"timestamps\";b:1;s:13:\"\u0000*\u0000attributes\";a:14:{s:2:\"id\";s:1:\"2\";s:6:\"nombre\";s:6:\"Alvaro\";s:9:\"apellidos\";s:9:\"Baño Fos\";s:4:\"tipo\";s:5:\"admin\";s:5:\"email\";s:16:\"admin@prueba.com\";s:8:\"password\";s:60:\"$2y$10$i4sShAQjUhIGIaXRPa61buV0jGTmEupxoxLCOEqtwPuWwK1zmooZe\";s:6:\"status\";s:1:\"1\";s:9:\"confirmed\";s:1:\"0\";s:18:\"email_confirmation\";s:0:\"\";s:10:\"expired_at\";s:19:\"0000-00-00 00:00:00\";s:14:\"remember_token\";N;s:10:\"created_at\";s:19:\"0000-00-00 00:00:00\";s:10:\"updated_at\";s:19:\"0000-00-00 00:00:00\";s:10:\"deleted_at\";N;}s:11:\"\u0000*\u0000original\";a:14:{s:2:\"id\";s:1:\"2\";s:6:\"nombre\";s:6:\"Alvaro\";s:9:\"apellidos\";s:9:\"Baño Fos\";s:4:\"tipo\";s:5:\"admin\";s:5:\"email\";s:16:\"admin@prueba.com\";s:8:\"password\";s:60:\"$2y$10$i4sShAQjUhIGIaXRPa61buV0jGTmEupxoxLCOEqtwPuWwK1zmooZe\";s:6:\"status\";s:1:\"1\";s:9:\"confirmed\";s:1:\"0\";s:18:\"email_confirmation\";s:0:\"\";s:10:\"expired_at\";s:19:\"0000-00-00 00:00:00\";s:14:\"remember_token\";N;s:10:\"created_at\";s:19:\"0000-00-00 00:00:00\";s:10:\"updated_at\";s:19:\"0000-00-00 00:00:00\";s:10:\"deleted_at\";N;}s:12:\"\u0000*\u0000relations\";a:0:{}s:10:\"\u0000*\u0000visible\";a:0:{}s:10:\"\u0000*\u0000appends\";a:0:{}s:10:\"\u0000*\u0000guarded\";a:1:{i:0;s:1:\"*\";}s:8:\"\u0000*\u0000dates\";a:0:{}s:8:\"\u0000*\u0000casts\";a:0:{}s:10:\"\u0000*\u0000touches\";a:0:{}s:14:\"\u0000*\u0000observables\";a:0:{}s:7:\"\u0000*\u0000with\";a:0:{}s:13:\"\u0000*\u0000morphClass\";N;s:6:\"exists\";b:1;}s:9:\"_sf2_meta\";a:3:{s:1:\"u\";i:1428593041;s:1:\"c\";i:1428592639;s:1:\"l\";s:1:\"0\";}}","","/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:","\t1: <?php $__env->startSection('contentAdmin'); ?>","\t2: <form class=\"form-horizontal\" method=\"post\" action= <?php if(isset($alergeno)): ?> \"<?php echo e(url('admin/alergenos/editar').\"/\".$alergeno->id); ?>\" <?php else: ?> \"<?php echo e(url('admin/alergenos/nuevo/')); ?>\" <?php endif; ?> enctype=\"multipart/form-data\">","\t125:             location.href='<?php echo e(url('admin/alergenos/eliminar/'.$alergeno->id)); ?>';","\t132: <?php echo $__env->make('admin.home', array_except(get_defined_vars(), array('__data', '__path')))->render(); ?>","","/storage/framework/views/36203627a2579139a05ef37a3b24921c:","\t1: <?php $__env->startSection('contentAdmin'); ?>","\t35:         \"ajax\": \"<?php echo e(url('admin/usuarios/datatable')); ?>\",","\t50:         window.location.href=\"<?php echo e(url('admin/usuario')); ?>/\"+id;","\t58: <?php echo $__env->make('admin.home', array_except(get_defined_vars(), array('__data', '__path')))->render(); ?>","","/storage/framework/views/3c6c6a56d8c20c9136858cf6d5f3a139:","\t2: <?php $__env->startSection('contentAdmin'); ?>","\t112: <?php echo $__env->make('admin.home', array_except(get_defined_vars(), array('__data', '__path')))->render(); ?>","","/storage/framework/views/cd49850ad5bac0684dc434987bd50176:","\t1: <?php $__env->startSection('contentAdmin'); ?>","\t3:     <div class=\"col-md-12 text-right clickable\"><a href=\"<?php echo e(url('admin/alergenos/nuevo')); ?>\">+ Nuevo alérgeno</a></div>","\t35:           window.location.href=\"<?php echo e(url('admin/alergenos/editar')); ?>/\"+id;","\t42: <?php echo $__env->make('admin.home', array_except(get_defined_vars(), array('__data', '__path')))->render(); ?>","","/storage/framework/views/dcd56c45f89f69f58177ee9125c4e863:","\t2: <div class=\"container\" id=\"opciones-admin\">","\t5:         <h1 class=\"text-center\">Administración</h1>","\t10:                     <div class=\"panel-body\"><a href=\"<?php echo e(url('admin/alergenos')); ?>\">Alérgenos</a></div>","\t18:                     <div class=\"panel-body\"><a href=\"<?php echo e(url('admin/ingredientes')); ?>\">Ingredientes</a></div>","\t26:                     <div class=\"panel-body\"><a href=\"<?php echo e(url('admin/usuarios')); ?>\">Usuarios</a></div>","","/storage/framework/views/e04dd4566ff270a695278df1741cde1d:","\t1: <?php $__env->startSection('contentAdmin'); ?>","\t310: <?php echo $__env->make('admin.home', array_except(get_defined_vars(), array('__data', '__path')))->render(); ?>","","/storage/framework/views/eb6e9c800268d3e1d5c2d2015f494675:","\t13:                   <a class=\"navbar-brand\" href=\"#\">Administración</a>","\t21:                     <li <?php if(Request::is('admin/alergenos*')): ?> class=\"active\" <?php endif; ?>><a href=\"<?php echo e(url('admin/alergenos')); ?>\">Alérgenos</a></li>","\t22:                     <li <?php if(Request::is('admin/ingredientes*')): ?> class=\"active\" <?php endif; ?>><a href=\"<?php echo e(url('admin/ingredientes')); ?>\">Ingredientes</a></li>","\t23:                     <li <?php if(Request::is('admin/usuarios*')): ?> class=\"active\" <?php endif; ?>><a href=\"<?php echo e(url('admin/usuarios')); ?>\">Usuarios</a></li>","\t27:             <?php echo $__env->yieldContent('contentAdmin'); ?>","","/storage/logs/laravel-2015-04-04.log:","\t522: [2015-04-04 11:34:40] local.ERROR: exception 'ReflectionException' with message 'Class App\\Http\\Controllers\\AdminController does not exist' in /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Routing/ControllerInspector.php:29","\t525: #1 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Routing/Router.php(251): Illuminate\\Routing\\ControllerInspector->getRoutable('App\\Http\\Contro...', 'admin')","\t526: #2 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Routing/Router.php(226): Illuminate\\Routing\\Router->controller('admin', 'AdminController')","\t551: [2015-04-04 11:35:40] local.ERROR: exception 'ReflectionException' with message 'Class App\\Http\\Controllers\\AdminController does not exist' in /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Routing/ControllerInspector.php:29","\t554: #1 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Routing/Router.php(251): Illuminate\\Routing\\ControllerInspector->getRoutable('App\\Http\\Contro...', 'admin')","\t555: #2 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Routing/Router.php(226): Illuminate\\Routing\\Router->controller('admin', 'AdminController')","\t580: [2015-04-04 11:38:12] local.ERROR: exception 'InvalidArgumentException' with message 'View [admin] not found.' in /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/View/FileViewFinder.php:140","\t582: #0 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/View/FileViewFinder.php(77): Illuminate\\View\\FileViewFinder->findInPaths('admin', Array)","\t583: #1 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/View/Factory.php(145): Illuminate\\View\\FileViewFinder->find('admin')","\t584: #2 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Foundation/helpers.php(578): Illuminate\\View\\Factory->make('admin', Array, Array)","\t585: #3 /home/ubuntu/workspace/app/Http/Controllers/AdminController.php(17): view('admin')","\t586: #4 [internal function]: App\\Http\\Controllers\\AdminController->getIndex()","\t589: #7 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Routing/ControllerDispatcher.php(107): Illuminate\\Routing\\ControllerDispatcher->call(Object(App\\Http\\Controllers\\AdminController), Object(Illuminate\\Routing\\Route), 'getIndex')","\t595: #13 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Routing/ControllerDispatcher.php(67): Illuminate\\Routing\\ControllerDispatcher->callWithinStack(Object(App\\Http\\Controllers\\AdminController), Object(Illuminate\\Routing\\Route), Object(Illuminate\\Http\\Request), 'getIndex')","\t628: [2015-04-04 11:38:27] local.ERROR: exception 'Symfony\\Component\\Debug\\Exception\\FatalErrorException' with message 'syntax error, unexpected 'admin' (T_STRING)' in /home/ubuntu/workspace/storage/framework/views/eb6e9c800268d3e1d5c2d2015f494675:22","\t679: Next exception 'ErrorException' with message 'Undefined variable: menu (View: /home/ubuntu/workspace/resources/views/admin/home.blade.php)' in /home/ubuntu/workspace/storage/framework/views/eb6e9c800268d3e1d5c2d2015f494675:13","\t726: Next exception 'ErrorException' with message 'Undefined variable: menu (View: /home/ubuntu/workspace/resources/views/admin/home.blade.php) (View: /home/ubuntu/workspace/resources/views/admin/home.blade.php)' in /home/ubuntu/workspace/storage/framework/views/eb6e9c800268d3e1d5c2d2015f494675:13","\t778: [2015-04-04 12:14:18] local.ERROR: exception 'ErrorException' with message 'Undefined property: App\\Http\\Middleware\\AuthAdmin::$auth' in /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php:16","\t780: #0 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(16): Illuminate\\Foundation\\Bootstrap\\HandleExceptions->handleError(8, 'Undefined prope...', '/home/ubuntu/wo...', 16, Array)","\t781: #1 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t785: #5 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Routing/ControllerDispatcher.php(67): Illuminate\\Routing\\ControllerDispatcher->callWithinStack(Object(App\\Http\\Controllers\\AdminController), Object(Illuminate\\Routing\\Route), Object(Illuminate\\Http\\Request), 'getAlergenos')","\t818: [2015-04-04 12:14:56] local.ERROR: exception 'ErrorException' with message 'Undefined property: App\\Http\\Middleware\\AuthAdmin::$auth' in /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php:17","\t820: #0 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(17): Illuminate\\Foundation\\Bootstrap\\HandleExceptions->handleError(8, 'Undefined prope...', '/home/ubuntu/wo...', 17, Array)","\t821: #1 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t825: #5 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Routing/ControllerDispatcher.php(67): Illuminate\\Routing\\ControllerDispatcher->callWithinStack(Object(App\\Http\\Controllers\\AdminController), Object(Illuminate\\Routing\\Route), Object(Illuminate\\Http\\Request), 'getAlergenos')","","/storage/logs/laravel-2015-04-05.log:","\t43: Next exception 'ErrorException' with message 'Undefined variable: menu (View: /home/ubuntu/workspace/resources/views/admin/alergenosNuevo.blade.php)' in /home/ubuntu/workspace/storage/framework/views/3c6c6a56d8c20c9136858cf6d5f3a139:3","\t125: Next exception 'ErrorException' with message 'Undefined variable: menu (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:29","\t210: Next exception 'ErrorException' with message 'Undefined variable: menu (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:38","\t292: Next exception 'ErrorException' with message 'Undefined variable: menu (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:96","\t374: Next exception 'ErrorException' with message 'Undefined variable: menu (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:96","\t456: Next exception 'ErrorException' with message 'Undefined variable: menu (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:96","\t505: #7 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t506: #8 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t580: #6 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t581: #7 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t626: #6 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t627: #7 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t679: #7 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t680: #8 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t934: #7 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t935: #8 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t987: #7 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t988: #8 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t1036: #9 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t1037: #10 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t1085: #9 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t1086: #10 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t1165: Next exception 'ErrorException' with message 'Trying to get property of non-object (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:125","\t1247: Next exception 'ErrorException' with message 'Trying to get property of non-object (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:125","\t1296: #7 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t1297: #8 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t1376: Next exception 'ErrorException' with message 'Trying to get property of non-object (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:125","\t1458: Next exception 'ErrorException' with message 'Undefined variable: alergeno (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:125","\t1540: Next exception 'ErrorException' with message 'Undefined variable: alergeno (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:125","\t1622: Next exception 'ErrorException' with message 'Undefined variable: alergeno (View: /home/ubuntu/workspace/resources/views/admin/alergenosForm.blade.php)' in /home/ubuntu/workspace/storage/framework/views/1441bacdb18c851da4a1ed8bfe5fda6c:125","","/storage/logs/laravel-2015-04-06.log:","\t49: Next exception 'ErrorException' with message 'Undefined variable: menu (View: /home/ubuntu/workspace/resources/views/admin/ingredientes.blade.php)' in /home/ubuntu/workspace/storage/framework/views/e04dd4566ff270a695278df1741cde1d:41","","/storage/logs/laravel-2015-04-08.log:","\t1: [2015-04-08 10:26:59] local.ERROR: exception 'ErrorException' with message 'Use of undefined constant admin - assumed 'admin'' in /home/ubuntu/workspace/storage/framework/views/36203627a2579139a05ef37a3b24921c:45","\t43: Next exception 'ErrorException' with message 'Use of undefined constant admin - assumed 'admin' (View: /home/ubuntu/workspace/resources/views/admin/usuarios.blade.php)' in /home/ubuntu/workspace/storage/framework/views/36203627a2579139a05ef37a3b24921c:45","\t428: #20 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t429: #21 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t487: #18 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t488: #19 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t544: #8 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t545: #9 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t597: #10 /home/ubuntu/workspace/app/Http/Middleware/AuthAdmin.php(43): Illuminate\\Pipeline\\Pipeline->Illuminate\\Pipeline\\{closure}(Object(Illuminate\\Http\\Request))","\t598: #11 /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(125): App\\Http\\Middleware\\AuthAdmin->handle(Object(Illuminate\\Http\\Request), Object(Closure))","\t638: [2015-04-08 15:58:04] local.ERROR: exception 'Symfony\\Component\\Debug\\Exception\\FatalErrorException' with message 'syntax error, unexpected 'admin' (T_STRING)' in /home/ubuntu/workspace/storage/framework/views/36203627a2579139a05ef37a3b24921c:58","","/vendor/composer/autoload_classmap.php:","\t20:     'App\\\\Http\\\\Controllers\\\\AdminController' => $baseDir . '/app/Http/Controllers/AdminController.php',","\t33:     'App\\\\Http\\\\Middleware\\\\AuthAdmin' => $baseDir . '/app/Http/Middleware/AuthAdmin.php',","","/vendor/doctrine/cache/lib/Doctrine/Common/Cache/XcacheCache.php:","\t80:      * Checks that xcache.admin.enable_auth is Off.","\t84:      * @throws \\BadMethodCallException When xcache.admin.enable_auth is On.","\t88:         if (ini_get('xcache.admin.enable_auth')) {","\t91:                 . 'you must set \"xcache.admin.enable_auth\" to \"Off\" in your php.ini.'","","/vendor/doctrine/cache/tests/Doctrine/Tests/Common/Cache/CouchbaseCacheTest.php:","\t16:                 $this->couchbase = new Couchbase('127.0.0.1', 'Administrator', 'password', 'default');","","/vendor/doctrine/dbal/lib/Doctrine/DBAL/Platforms/DB2Platform.php:","\t552:                 $sql[] = \"CALL SYSPROC.ADMIN_CMD ('REORG TABLE \" . $diff->getName($this)->getQuotedName($this) . \"')\";","","/vendor/fzaninotto/faker/src/Faker/Provider/de_AT/Address.php:","\t35:         'Saalfelden am Steinernen Meer', 'Salzburg', 'Sankt Andrä im Lavanttal', 'Sankt Johann im Pongau', 'Sankt Pölten', 'Sankt Valentin', 'Sankt Veit an der Glan', 'Schärding', 'Scheibbs', 'Schladming', 'Schrattenthal', 'Schrems', 'Schwanenstadt', 'Schwaz', 'Schwechat', 'Seekirchen am Wallersee', 'Spittal an der Drau', 'Stadtschlaining', 'Steyr', 'Steyregg', 'Stockerau', 'Straßburg',","","/vendor/fzaninotto/faker/src/Faker/Provider/en_US/Company.php:","\t18:             '24hour', '24/7', '3rdgeneration', '4thgeneration', '5thgeneration', '6thgeneration', 'actuating', 'analyzing', 'assymetric', 'asynchronous', 'attitude-oriented', 'background', 'bandwidth-monitored', 'bi-directional', 'bifurcated', 'bottom-line', 'clear-thinking', 'client-driven', 'client-server', 'coherent', 'cohesive', 'composite', 'context-sensitive', 'contextually-based', 'content-based', 'dedicated', 'demand-driven', 'didactic', 'directional', 'discrete', 'disintermediate', 'dynamic', 'eco-centric', 'empowering', 'encompassing', 'even-keeled', 'executive', 'explicit', 'exuding', 'fault-tolerant', 'foreground', 'fresh-thinking', 'full-range', 'global', 'grid-enabled', 'heuristic', 'high-level', 'holistic', 'homogeneous', 'human-resource', 'hybrid', 'impactful', 'incremental', 'intangible', 'interactive', 'intermediate', 'leadingedge', 'local', 'logistical', 'maximized', 'methodical', 'mission-critical', 'mobile', 'modular', 'motivating', 'multimedia', 'multi-state', 'multi-tasking', 'national', 'needs-based', 'neutral', 'nextgeneration', 'non-volatile', 'object-oriented', 'optimal', 'optimizing', 'radical', 'real-time', 'reciprocal', 'regional', 'responsive', 'scalable', 'secondary', 'solution-oriented', 'stable', 'static', 'systematic', 'systemic', 'system-worthy', 'tangible', 'tertiary', 'transitional', 'uniform', 'upward-trending', 'user-facing', 'value-added', 'web-enabled', 'well-modulated', 'zeroadministration', 'zerodefect', 'zerotolerance'","","/vendor/fzaninotto/faker/src/Faker/Provider/es_AR/Company.php:","\t20:             '24hour', '24/7', '3rdgeneration', '4thgeneration', '5thgeneration', '6thgeneration', 'actuating', 'analyzing', 'assymetric', 'asynchronous', 'attitude-oriented', 'background', 'bandwidth-monitored', 'bi-directional', 'bifurcated', 'bottom-line', 'clear-thinking', 'client-driven', 'client-server', 'coherent', 'cohesive', 'composite', 'context-sensitive', 'contextually-based', 'content-based', 'dedicated', 'demand-driven', 'didactic', 'directional', 'discrete', 'disintermediate', 'dynamic', 'eco-centric', 'empowering', 'encompassing', 'even-keeled', 'executive', 'explicit', 'exuding', 'fault-tolerant', 'foreground', 'fresh-thinking', 'full-range', 'global', 'grid-enabled', 'heuristic', 'high-level', 'holistic', 'homogeneous', 'human-resource', 'hybrid', 'impactful', 'incremental', 'intangible', 'interactive', 'intermediate', 'leadingedge', 'local', 'logistical', 'maximized', 'methodical', 'mission-critical', 'mobile', 'modular', 'motivating', 'multimedia', 'multi-state', 'multi-tasking', 'national', 'needs-based', 'neutral', 'nextgeneration', 'non-volatile', 'object-oriented', 'optimal', 'optimizing', 'radical', 'real-time', 'reciprocal', 'regional', 'responsive', 'scalable', 'secondary', 'solution-oriented', 'stable', 'static', 'systematic', 'systemic', 'system-worthy', 'tangible', 'tertiary', 'transitional', 'uniform', 'upward-trending', 'user-facing', 'value-added', 'web-enabled', 'well-modulated', 'zeroadministration', 'zerodefect', 'zerotolerance'","","/vendor/fzaninotto/faker/src/Faker/Provider/es_ES/Company.php:","\t25:             '24hour', '24/7', '3rdgeneration', '4thgeneration', '5thgeneration', '6thgeneration', 'actuating', 'analyzing', 'assymetric', 'asynchronous', 'attitude-oriented', 'background', 'bandwidth-monitored', 'bi-directional', 'bifurcated', 'bottom-line', 'clear-thinking', 'client-driven', 'client-server', 'coherent', 'cohesive', 'composite', 'context-sensitive', 'contextually-based', 'content-based', 'dedicated', 'demand-driven', 'didactic', 'directional', 'discrete', 'disintermediate', 'dynamic', 'eco-centric', 'empowering', 'encompassing', 'even-keeled', 'executive', 'explicit', 'exuding', 'fault-tolerant', 'foreground', 'fresh-thinking', 'full-range', 'global', 'grid-enabled', 'heuristic', 'high-level', 'holistic', 'homogeneous', 'human-resource', 'hybrid', 'impactful', 'incremental', 'intangible', 'interactive', 'intermediate', 'leadingedge', 'local', 'logistical', 'maximized', 'methodical', 'mission-critical', 'mobile', 'modular', 'motivating', 'multimedia', 'multi-state', 'multi-tasking', 'national', 'needs-based', 'neutral', 'nextgeneration', 'non-volatile', 'object-oriented', 'optimal', 'optimizing', 'radical', 'real-time', 'reciprocal', 'regional', 'responsive', 'scalable', 'secondary', 'solution-oriented', 'stable', 'static', 'systematic', 'systemic', 'system-worthy', 'tangible', 'tertiary', 'transitional', 'uniform', 'upward-trending', 'user-facing', 'value-added', 'web-enabled', 'well-modulated', 'zeroadministration', 'zerodefect', 'zerotolerance'","","/vendor/fzaninotto/faker/src/Faker/Provider/es_PE/Company.php:","\t20:             '24hour', '24/7', '3rdgeneration', '4thgeneration', '5thgeneration', '6thgeneration', 'actuating', 'analyzing', 'assymetric', 'asynchronous', 'attitude-oriented', 'background', 'bandwidth-monitored', 'bi-directional', 'bifurcated', 'bottom-line', 'clear-thinking', 'client-driven', 'client-server', 'coherent', 'cohesive', 'composite', 'context-sensitive', 'contextually-based', 'content-based', 'dedicated', 'demand-driven', 'didactic', 'directional', 'discrete', 'disintermediate', 'dynamic', 'eco-centric', 'empowering', 'encompassing', 'even-keeled', 'executive', 'explicit', 'exuding', 'fault-tolerant', 'foreground', 'fresh-thinking', 'full-range', 'global', 'grid-enabled', 'heuristic', 'high-level', 'holistic', 'homogeneous', 'human-resource', 'hybrid', 'impactful', 'incremental', 'intangible', 'interactive', 'intermediate', 'leadingedge', 'local', 'logistical', 'maximized', 'methodical', 'mission-critical', 'mobile', 'modular', 'motivating', 'multimedia', 'multi-state', 'multi-tasking', 'national', 'needs-based', 'neutral', 'nextgeneration', 'non-volatile', 'object-oriented', 'optimal', 'optimizing', 'radical', 'real-time', 'reciprocal', 'regional', 'responsive', 'scalable', 'secondary', 'solution-oriented', 'stable', 'static', 'systematic', 'systemic', 'system-worthy', 'tangible', 'tertiary', 'transitional', 'uniform', 'upward-trending', 'user-facing', 'value-added', 'web-enabled', 'well-modulated', 'zeroadministration', 'zerodefect', 'zerotolerance'","","/vendor/fzaninotto/faker/src/Faker/Provider/fr_FR/Text.php:","\t2590: administra de la valériane et des bains de camphre. Tout ce que","\t5788: rendre justice à l'administration supérieure, au gouvernement, au","\t10808: d'une autorisation générale pour «gérer et administrer ses","\t13728: -- Du calme! dit l'apothicaire. Il s'agit seulement d'administrer","\t13852: allait administrer de la thériaque, lorsqu'on entendit le","","/vendor/fzaninotto/faker/src/Faker/Provider/id_ID/Address.php:","\t228:         \"Administrasi Jakarta Barat\", \"Administrasi Jakarta Pusat\",","\t229:         \"Administrasi Jakarta Selatan\", \"Administrasi Jakarta Timur\",","\t230:         \"Administrasi Jakarta Utara\", \"Ambon\", \"Balikpapan\", \"Banda Aceh\",","","/vendor/fzaninotto/faker/src/Faker/Provider/ru_RU/Text.php:","\t4345:     Licensor is a member of a collecting society that administers","","/vendor/fzaninotto/faker/src/Faker/Provider/uk_UA/Text.php:","\t4313:     Licensor is a member of a collecting society that administers","","/vendor/symfony/filesystem/Symfony/Component/Filesystem/Filesystem.php:","\t309:                     throw new IOException('Unable to create symlink due to error code 1314: \\'A required privilege is not held by the client\\'. Do you have the required Administrator-rights?');","","/vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/CookieTest.php:","\t139:         $cookie = new Cookie('foo', null, 1, '/admin/', '.myfoodomain.com');","\t140:         $this->assertEquals('foo=deleted; expires='.gmdate('D, d-M-Y H:i:s T', time() - 31536001).'; path=/admin/; domain=.myfoodomain.com; httponly', $cookie->__toString(), '->__toString() returns string representation of a cleared cookie if value is NULL');","","/vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestMatcherTest.php:","\t98:         $request = Request::create('/admin/foo');","\t100:         $matcher->matchPath('/admin/.*');","\t103:         $matcher->matchPath('/admin');","\t106:         $matcher->matchPath('^/admin/.*$');","\t126:         $request = Request::create('/admin/fo%20o');","\t127:         $matcher->matchPath('^/admin/fo o*$');","\t135:         $request = Request::create('/admin/foo');","","/vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/MongoDbProfilerStorageTest.php:","\t87:             array('mongodb://user:password@localhost/admin/symfony_tests/profiler_data', array(","\t88:                 'mongodb://user:password@localhost/admin',","\t92:             array('mongodb://user:password@localhost:27009,localhost:27010/?replicaSet=rs-name&authSource=admin/symfony_tests/profiler_data', array(","\t93:                 'mongodb://user:password@localhost:27009,localhost:27010/?replicaSet=rs-name&authSource=admin',","","/vendor/symfony/routing/Symfony/Component/Routing/Tests/RouteCollectionTest.php:","\t150:         $collection->addPrefix('/{admin}', array('admin' => 'admin'), array('admin' => '\\d+'));","\t151:         $this->assertEquals('/{admin}/foo', $collection->get('foo')->getPath(), '->addPrefix() adds a prefix to all routes');","\t152:         $this->assertEquals('/{admin}/bar', $collection->get('bar')->getPath(), '->addPrefix() adds a prefix to all routes');","\t153:         $this->assertEquals(array('admin' => 'admin'), $collection->get('foo')->getDefaults(), '->addPrefix() adds defaults to all routes');","\t154:         $this->assertEquals(array('admin' => 'admin'), $collection->get('bar')->getDefaults(), '->addPrefix() adds defaults to all routes');","\t155:         $this->assertEquals(array('admin' => '\\d+'), $collection->get('foo')->getRequirements(), '->addPrefix() adds requirements to all routes');","\t156:         $this->assertEquals(array('admin' => '\\d+'), $collection->get('bar')->getRequirements(), '->addPrefix() adds requirements to all routes');","\t158:         $this->assertEquals('/0/{admin}/foo', $collection->get('foo')->getPath(), '->addPrefix() ensures a prefix must start with a slash and must not end with a slash');","\t160:         $this->assertSame('/ /0/{admin}/foo', $collection->get('foo')->getPath(), '->addPrefix() can handle spaces if desired');","\t161:         $this->assertSame('/ /0/{admin}/bar', $collection->get('bar')->getPath(), 'the route pattern of an added collection is in synch with the added prefix');","\t169:         $collection->addPrefix('/admin', array(), array('_scheme' => 'https'));","","/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authorization/ExpressionLanguageTest.php:","\t43:         $roles = array('ROLE_USER', 'ROLE_ADMIN');","","/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Role/RoleHierarchyTest.php:","\t22:             'ROLE_ADMIN' => array('ROLE_USER'),","\t23:             'ROLE_SUPER_ADMIN' => array('ROLE_ADMIN', 'ROLE_FOO'),","\t28:         $this->assertEquals(array(new Role('ROLE_ADMIN'), new Role('ROLE_USER')), $role->getReachableRoles(array(new Role('ROLE_ADMIN'))));","\t29:         $this->assertEquals(array(new Role('ROLE_FOO'), new Role('ROLE_ADMIN'), new Role('ROLE_USER')), $role->getReachableRoles(array(new Role('ROLE_FOO'), new Role('ROLE_ADMIN'))));","\t30:         $this->assertEquals(array(new Role('ROLE_SUPER_ADMIN'), new Role('ROLE_ADMIN'), new Role('ROLE_FOO'), new Role('ROLE_USER')), $role->getReachableRoles(array(new Role('ROLE_SUPER_ADMIN'))));","","/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/User/UserTest.php:","\t36:         $user = new User('fabien', 'superpass', array('ROLE_ADMIN'));","\t37:         $this->assertEquals(array('ROLE_ADMIN'), $user->getRoles());","","/vendor/symfony/security-core/Symfony/Component/Security/Core/User/InMemoryUserProvider.php:","\t21:  * (a backend with a unique admin for instance)","","Found 264 matches in 53 files ","",""]},{"start":{"row":0,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["Searching for \u0001$this->middleware('admin')\u0001 in\u0001/app/Http/Controllers\u0001","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["/app/Http/Controllers/AdminController.php:",""]},{"start":{"row":3,"column":0},"end":{"row":5,"column":0},"action":"insert","lines":["\t19: \t\t$this->middleware('admin');","",""]},{"start":{"row":5,"column":0},"end":{"row":8,"column":0},"action":"insert","lines":["/app/Http/Controllers/AlergenoController.php:","\t14: \t\t$this->middleware('admin');","",""]},{"start":{"row":8,"column":0},"end":{"row":9,"column":0},"action":"insert","lines":["/app/Http/Controllers/IngredienteController.php:",""]},{"start":{"row":9,"column":0},"end":{"row":13,"column":0},"action":"insert","lines":["\t43: \t\t$this->middleware('admin');","\t161: \t\t$this->middleware('admin');","\t189: \t\t$this->middleware('admin');","",""]},{"start":{"row":13,"column":0},"end":{"row":16,"column":0},"action":"insert","lines":["/app/Http/Controllers/UsuarioController.php:","\t18: \t\t$this->middleware('admin');","",""]},{"start":{"row":16,"column":0},"end":{"row":17,"column":0},"action":"insert","lines":["Found 6 matches in 4 files ",""]}]}],[{"group":"doc","deltas":[{"start":{"row":17,"column":0},"end":{"row":18,"column":0},"action":"insert","lines":["",""]},{"start":{"row":0,"column":68},"end":{"row":0,"column":97},"action":"insert","lines":[" (Found 6 matches in 4 files)"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":18,"column":0},"action":"remove","lines":["Searching for \u0001$this->middleware('admin')\u0001 in\u0001/app/Http/Controllers\u0001 (Found 6 matches in 4 files)","","/app/Http/Controllers/AdminController.php:","\t19: \t\t$this->middleware('admin');","","/app/Http/Controllers/AlergenoController.php:","\t14: \t\t$this->middleware('admin');","","/app/Http/Controllers/IngredienteController.php:","\t43: \t\t$this->middleware('admin');","\t161: \t\t$this->middleware('admin');","\t189: \t\t$this->middleware('admin');","","/app/Http/Controllers/UsuarioController.php:","\t18: \t\t$this->middleware('admin');","","Found 6 matches in 4 files ","",""]},{"start":{"row":0,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["Searching for \u0001password\u0001 in\u0001/\u0001","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["/_ide_helper.php:",""]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":0},"end":{"row":32,"column":0},"action":"insert","lines":["\t5109:          * Set the default password work factor.","\t6147:          * Returns the password.","\t6152:         public static function getPassword(){","\t6154:             return \\Illuminate\\Http\\Request::getPassword();","\t6198:          * and the password are not added to the generated string.","\t7251:     class Password extends \\Illuminate\\Support\\Facades\\Password{","\t7254:          * Send a password reset link to a user.","\t7262:             return \\Illuminate\\Auth\\Passwords\\PasswordBroker::sendResetLink($credentials, $callback);","\t7266:          * Send the password reset link via e-mail.","\t7268:          * @param \\Illuminate\\Contracts\\Auth\\CanResetPassword $user","\t7275:             return \\Illuminate\\Auth\\Passwords\\PasswordBroker::emailResetLink($user, $token, $callback);","\t7279:          * Reset the password for the given token.","\t7287:             return \\Illuminate\\Auth\\Passwords\\PasswordBroker::reset($credentials, $callback);","\t7291:          * Set a custom password validator.","\t7298:             \\Illuminate\\Auth\\Passwords\\PasswordBroker::validator($callback);","\t7302:          * Determine if the passwords match for the request.","\t7308:         public static function validateNewPassword($credentials){","\t7309:             return \\Illuminate\\Auth\\Passwords\\PasswordBroker::validateNewPassword($credentials);","\t7316:          * @return \\Illuminate\\Contracts\\Auth\\CanResetPassword ","\t7321:             return \\Illuminate\\Auth\\Passwords\\PasswordBroker::getUser($credentials);","\t8764:          * Returns the password.","\t8769:         public static function getPassword(){","\t8771:             return \\Illuminate\\Http\\Request::getPassword();","\t8815:          * and the password are not added to the generated string.","","/_ide_helper_models.php:","\t133:  * @property string $password ","\t146:  * @method static \\Illuminate\\Database\\Query\\Builder|\\App\\User wherePassword($value)","",""]},{"start":{"row":32,"column":0},"end":{"row":45,"column":0},"action":"insert","lines":["/composer.lock:","\t922:             \"name\": \"ircmaxell/password-compat\",","\t926:                 \"url\": \"https://github.com/ircmaxell/password_compat.git\",","\t931:                 \"url\": \"https://api.github.com/repos/ircmaxell/password_compat/zipball/5c5cde8822a69545767f7c7f3058cb15ff84614c\",","\t941:                     \"lib/password.php\"","\t955:             \"description\": \"A compatibility library for the proposed simplified password hashing algorithm: https://wiki.php.net/rfc/password_hash\",","\t956:             \"homepage\": \"https://github.com/ircmaxell/password_compat\",","\t959:                 \"password\"","\t1189:                 \"ircmaxell/password-compat\": \"~1.0\",","\t2395:                 \"ircmaxell/password-compat\": \"1.0.*\",","\t2405:                 \"ircmaxell/password-compat\": \"For using the BCrypt password encoder in PHP <5.5\",","\t2409:                 \"symfony/validator\": \"For using the user password constraint\"","",""]},{"start":{"row":45,"column":0},"end":{"row":53,"column":0},"action":"insert","lines":["/app/User.php:","\t5: use Illuminate\\Auth\\Passwords\\CanResetPassword;","\t7: use Illuminate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;","\t9: class User extends Model implements AuthenticatableContract, CanResetPasswordContract {","\t11: \tuse Authenticatable, CanResetPassword;","\t25: \tprotected $fillable = ['email', 'nombre', 'apellidos', 'password', 'email_confirmation'];","\t32: \tprotected $hidden = ['password', 'remember_token', 'email_confirmation'];","",""]},{"start":{"row":53,"column":0},"end":{"row":56,"column":0},"action":"insert","lines":["/app/Http/routes.php:","\t70: \t'password' => 'Auth\\PasswordController',","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":56,"column":0},"end":{"row":60,"column":0},"action":"insert","lines":["/app/Http/Controllers/Auth/AuthController.php:","\t49: \t\t\t'email' => 'required|email', 'password' => 'required',","\t52: \t\t$credentials = $request->only('email', 'password');","",""]},{"start":{"row":60,"column":0},"end":{"row":72,"column":0},"action":"insert","lines":["/app/Http/Controllers/Auth/PasswordController.php:","\t5: use Illuminate\\Contracts\\Auth\\PasswordBroker;","\t6: use Illuminate\\Foundation\\Auth\\ResetsPasswords;","\t8: class PasswordController extends Controller {","\t12: \t| Password Reset Controller","\t15: \t| This controller is responsible for handling password reset requests","\t21: \tuse ResetsPasswords;","\t24: \t * Create a new password controller instance.","\t27: \t * @param  \\Illuminate\\Contracts\\Auth\\PasswordBroker  $passwords","\t30: \tpublic function __construct(Guard $auth, PasswordBroker $passwords)","\t33: \t\t$this->passwords = $passwords;","",""]},{"start":{"row":72,"column":0},"end":{"row":76,"column":0},"action":"insert","lines":["/app/Services/Registrar.php:","\t21: \t\t\t'password' => 'required|confirmed|min:6',","\t43: \t\t\t'password' => bcrypt($data['password'])","",""]},{"start":{"row":76,"column":0},"end":{"row":80,"column":0},"action":"insert","lines":["/config/app.php:","\t137: \t\t'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider',","\t186: \t\t'Password'  => 'Illuminate\\Support\\Facades\\Password',","",""]},{"start":{"row":80,"column":0},"end":{"row":88,"column":0},"action":"insert","lines":["/config/auth.php:","\t48: \t| Password Reset Settings","\t51: \t| Here you may set the options for resetting passwords including the view","\t52: \t| that is your password reset e-mail. You can also set the name of the","\t61: \t'password' => [","\t62: \t\t'email' => 'emails.password',","\t63: \t\t'table' => 'password_resets',","",""]},{"start":{"row":88,"column":0},"end":{"row":93,"column":0},"action":"insert","lines":["/config/database.php:","\t60: \t\t\t'password'  => env('DB_PASSWORD', ''),","\t72: \t\t\t'password' => env('DB_PASSWORD', ''),","\t83: \t\t\t'password' => env('DB_PASSWORD', ''),","",""]},{"start":{"row":93,"column":0},"end":{"row":99,"column":0},"action":"insert","lines":["/config/mail.php:","\t79: \t| connection. You may also set the \"password\" value below this one.","\t87: \t| SMTP Server Password","\t90: \t| Here you may set the password required by your SMTP server to send out","\t96: \t'password' => env('MAIL_PASSWORD'),","",""]},{"start":{"row":99,"column":0},"end":{"row":102,"column":0},"action":"insert","lines":["/database/migrations/2015_03_10_215725_crear_tabla_usuarios.php:","\t22: \t\t\t$table->string('password', 60);","",""]},{"start":{"row":102,"column":0},"end":{"row":107,"column":0},"action":"insert","lines":["/database/migrations/2015_10_11_100000_create_password_resets_table.php:","\t6: class CreatePasswordResetsTable extends Migration {","\t15: \t\tSchema::create('password_resets', function(Blueprint $table)","\t30: \t\tSchema::drop('password_resets');","",""]},{"start":{"row":107,"column":0},"end":{"row":112,"column":0},"action":"insert","lines":["/database/seeds/UsersSeeder.php:","\t23: \t\t\t\t'password'=>\\Hash::make('123456'),","\t32: \t\t\t\t'password'=>\\Hash::make('123456'),","\t42: \t\t\t\t'password'=>\\Hash::make('123456'),","",""]},{"start":{"row":112,"column":0},"end":{"row":115,"column":0},"action":"insert","lines":["/resources/assets/less/bootstrap/forms.less:","\t101: // input[type=\"password\"]","",""]},{"start":{"row":115,"column":0},"end":{"row":124,"column":0},"action":"insert","lines":["/resources/lang/en/passwords.php:","\t7: \t| Password Reminder Language Lines","\t11: \t| that are given by the password broker for a password update attempt","\t12: \t| has failed, such as for an invalid token or invalid new password.","\t16: \t\"password\" => \"Passwords must be at least six characters and match the confirmation.\",","\t18: \t\"token\" => \"This password reset token is invalid.\",","\t19: \t\"sent\" => \"We have e-mailed your password reset link!\",","\t20: \t\"reset\" => \"Your password has been reset!\",","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":124,"column":0},"end":{"row":149,"column":0},"action":"insert","lines":["/resources/views/auth/login.blade.php:","\t32: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>","\t34: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">","\t52: \t\t\t\t\t\t\t\t<a class=\"btn btn-link\" href=\"{{ url('/password/email') }}\">Forgot Your Password?</a>","","/resources/views/auth/password.blade.php:","\t8: \t\t\t\t<div class=\"panel-heading\">Reset Password</div>","\t27: \t\t\t\t\t<form class=\"form-horizontal\" role=\"form\" method=\"POST\" action=\"{{ url('/password/email') }}\">","\t40: \t\t\t\t\t\t\t\t\tSend Password Reset Link","","/resources/views/auth/register.blade.php:","\t46: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>","\t48: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">","\t53: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Confirm Password</label>","\t55: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password_confirmation\">","","/resources/views/auth/reset.blade.php:","\t8: \t\t\t\t<div class=\"panel-heading\">Reset Password</div>","\t21: \t\t\t\t\t<form class=\"form-horizontal\" role=\"form\" method=\"POST\" action=\"{{ url('/password/reset') }}\">","\t33: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>","\t35: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">","\t40: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Confirm Password</label>","\t42: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password_confirmation\">","\t49: \t\t\t\t\t\t\t\t\tReset Password","",""]},{"start":{"row":149,"column":0},"end":{"row":152,"column":0},"action":"insert","lines":["/resources/views/emails/password.blade.php:","\t1: Click here to reset your password: {{ url('password/reset/'.$token) }}","",""]},{"start":{"row":152,"column":0},"end":{"row":166,"column":0},"action":"insert","lines":["/resources/views/usuario/ficha.blade.php:","\t49:                                     <label for=\"input-password\" class=\"col-sm-4 control-label\">Antigua contraseña</label>","\t51:                                         <input type=\"text\" name=\"password\" id=\"input-password\" class=\"form-control\" placeholder=\"Rellene si cambia contraseña\"  value=\"\">","\t59:                                     <label for=\"input-password_new\" class=\"col-sm-4 control-label\">Nueva contraseña</label>","\t61:                                         <input type=\"text\" name=\"password_new\" id=\"input-password_new\" class=\"form-control\" placeholder=\"Rellene si cambia contraseña\"  value=\"\">","\t69:                                     <label for=\"input-password_new1\" class=\"col-sm-4 control-label\">Confirmación nueva contraseña</label>","\t71:                                         <input type=\"text\" name=\"password_new_confirmation\" id=\"input-password_new1\" class=\"form-control\" placeholder=\"Rellene si cambia contraseña\"  value=\"\">","","/storage/framework/services.json:","\t21:         \"Illuminate\\\\Auth\\\\Passwords\\\\PasswordResetServiceProvider\",","\t124:         \"auth.password\": \"Illuminate\\\\Auth\\\\Passwords\\\\PasswordResetServiceProvider\",","\t125:         \"auth.password.tokens\": \"Illuminate\\\\Auth\\\\Passwords\\\\PasswordResetServiceProvider\",","\t139:         \"Illuminate\\\\Auth\\\\Passwords\\\\PasswordResetServiceProvider\": [],","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":166,"column":0},"end":{"row":198,"column":0},"action":"insert","lines":["/storage/framework/views/021b5b18e5b173bfd738f813bd99b1bf:","\t37: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>","\t39: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">","\t44: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Confirm Password</label>","\t46: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password_confirmation\">","","/storage/framework/views/2036d73e86c1a358067df355a77ea3cb:","\t30: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>","\t32: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">","\t50: \t\t\t\t\t\t\t\t<a class=\"btn btn-link\" href=\"<?php echo e(url('/password/email')); ?>\">Forgot Your Password?</a>","","/storage/framework/views/3498a762092ca5c0c6eefbbc5dbf1a2d:","\t48:                                     <label for=\"input-password\" class=\"col-sm-4 control-label\">Antigua contraseña</label>","\t50:                                         <input type=\"text\" name=\"password\" id=\"input-password\" class=\"form-control\" placeholder=\"Rellene si cambia contraseña\"  value=\"\">","\t58:                                     <label for=\"input-password_new\" class=\"col-sm-4 control-label\">Nueva contraseña</label>","\t60:                                         <input type=\"text\" name=\"password_new\" id=\"input-password_new\" class=\"form-control\" placeholder=\"Rellene si cambia contraseña\"  value=\"\">","\t68:                                     <label for=\"input-password_new1\" class=\"col-sm-4 control-label\">Confirmación nueva contraseña</label>","\t70:                                         <input type=\"text\" name=\"password_new_confirmation\" id=\"input-password_new1\" class=\"form-control\" placeholder=\"Rellene si cambia contraseña\"  value=\"\">","","/storage/framework/views/48675853841c5563239032a75655f1f1:","\t30: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>","\t32: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">","\t50: \t\t\t\t\t\t\t\t<a class=\"btn btn-link\" href=\"<?php echo e(url('/password/email')); ?>\">Forgot Your Password?</a>","","/storage/framework/views/4f767bae4ddbc4a5486d4136e944cccb:","\t1: Click here to reset your password: <?php echo e(url('password/reset/'.$token)); ?>","","/storage/framework/views/5225f7d5ba1beb01991aa9f0cb2c31f0:","\t30: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>","\t32: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">","\t50: \t\t\t\t\t\t\t\t<a class=\"btn btn-link\" href=\"<?php echo e(url('/password/email')); ?>\">Forgot Your Password?</a>","",""]},{"start":{"row":198,"column":0},"end":{"row":241,"column":0},"action":"insert","lines":["/storage/framework/views/656d5bfc144616dd5531cb8712b6e98f:","\t1: Click here to reset your password: <?php echo e(url('password/reset/'.$token)); ?>","","/storage/framework/views/89b2b4942a585f7634302ff903a88c73:","\t6: \t\t\t\t<div class=\"panel-heading\">Reset Password</div>","\t19: \t\t\t\t\t<form class=\"form-horizontal\" role=\"form\" method=\"POST\" action=\"<?php echo e(url('/password/reset')); ?>\">","\t31: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>","\t33: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">","\t38: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Confirm Password</label>","\t40: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password_confirmation\">","\t47: \t\t\t\t\t\t\t\t\tReset Password","","/storage/framework/views/8bd1612cc34b7a4022c51ad6053310c1:","\t6: \t\t\t\t<div class=\"panel-heading\">Reset Password</div>","\t19: \t\t\t\t\t<form class=\"form-horizontal\" role=\"form\" method=\"POST\" action=\"<?php echo e(url('/password/reset')); ?>\">","\t31: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>","\t33: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">","\t38: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Confirm Password</label>","\t40: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password_confirmation\">","\t47: \t\t\t\t\t\t\t\t\tReset Password","","/storage/framework/views/965afbc919cf7157406f86828fa01783:","\t6: \t\t\t\t<div class=\"panel-heading\">Reset Password</div>","\t26: \t\t\t\t\t<form class=\"form-horizontal\" role=\"form\" method=\"POST\" action=\"<?php echo e(url('/password/email')); ?>\">","\t39: \t\t\t\t\t\t\t\t\tSend Password Reset Link","","/storage/framework/views/a01ed2515d5521724b5d84a0b8cf1fa7:","\t44: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>","\t46: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">","\t51: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Confirm Password</label>","\t53: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password_confirmation\">","","/storage/framework/views/b0aee9c2637cbbe26de6a1f7c503cf12:","\t6: \t\t\t\t<div class=\"panel-heading\">Reset Password</div>","\t26: \t\t\t\t\t<form class=\"form-horizontal\" role=\"form\" method=\"POST\" action=\"<?php echo e(url('/password/email')); ?>\">","\t39: \t\t\t\t\t\t\t\t\tSend Password Reset Link","","/storage/framework/views/cab7914d3916ccf663805ae6ac9829e7:","\t44: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Password</label>","\t46: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password\">","\t51: \t\t\t\t\t\t\t<label class=\"col-md-4 control-label\">Confirm Password</label>","\t53: \t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" name=\"password_confirmation\">","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":241,"column":0},"end":{"row":297,"column":0},"action":"insert","lines":["/storage/logs/laravel-2015-04-04.log:","\t202: [2015-04-04 09:59:02] local.ERROR: exception 'PDOException' with message 'SQLSTATE[28000] [1045] Access denied for user 'albafo'@'localhost' (using password: YES)' in /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Database/Connectors/Connector.php:47","\t294: Next exception 'Illuminate\\Database\\QueryException' with message 'SQLSTATE[42S01]: Base table or view already exists: 1050 Table 'usuarios' already exists (SQL: create table `usuarios` (`id` int unsigned not null auto_increment primary key, `nombre` varchar(255) not null, `apellidos` varchar(255) not null, `email` varchar(255) not null, `password` varchar(60) not null, `confirmed` tinyint(1) not null default '0', `email_confirmation` varchar(60) not null, `remember_token` varchar(100) null, `created_at` timestamp default 0 not null, `updated_at` timestamp default 0 not null, `deleted_at` timestamp null) default character set utf8 collate utf8_unicode_ci)' in /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Database/Connection.php:620","","/storage/logs/laravel-2015-04-08.log:","\t374: Next exception 'Illuminate\\Database\\QueryException' with message 'SQLSTATE[42S02]: Base table or view not found: 1146 Table 'menus.users' doesn't exist (SQL: insert into `users` (`nombre`, `apellidos`, `email`, `password`, `tipo`, `status`) values (Linnie, Orn, Bryana.Boyer@Kuphal.net, y$KOkCoL8VXjAzElFtACk0Me45AIcNCkPLFhSAuehBZG4NzZ5RjGxsC, user, 0))' in /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Database/Connection.php:620","","/storage/logs/laravel-2015-04-09.log:","\t95: [2015-04-09 14:53:11] local.ERROR: exception 'PDOException' with message 'SQLSTATE[28000] [1045] Access denied for user 'albafo'@'localhost' (using password: NO)' in /home/ubuntu/workspace/vendor/laravel/framework/src/Illuminate/Database/Connectors/Connector.php:47","","/vendor/services.json:","\t23:         \"Illuminate\\\\Auth\\\\Passwords\\\\PasswordResetServiceProvider\",","\t129:         \"auth.password\": \"Illuminate\\\\Auth\\\\Passwords\\\\PasswordResetServiceProvider\",","\t130:         \"auth.password.tokens\": \"Illuminate\\\\Auth\\\\Passwords\\\\PasswordResetServiceProvider\",","\t165:         \"Illuminate\\\\Auth\\\\Passwords\\\\PasswordResetServiceProvider\": [","","/vendor/composer/autoload_classmap.php:","\t23:     'App\\\\Http\\\\Controllers\\\\Auth\\\\PasswordController' => $baseDir . '/app/Http/Controllers/Auth/PasswordController.php',","\t95:     'CreatePasswordResetsTable' => $baseDir . '/database/migrations/2015_10_11_100000_create_password_resets_table.php',","\t766:     'Illuminate\\\\Auth\\\\Passwords\\\\CanResetPassword' => $vendorDir . '/laravel/framework/src/Illuminate/Auth/Passwords/CanResetPassword.php',","\t767:     'Illuminate\\\\Auth\\\\Passwords\\\\DatabaseTokenRepository' => $vendorDir . '/laravel/framework/src/Illuminate/Auth/Passwords/DatabaseTokenRepository.php',","\t768:     'Illuminate\\\\Auth\\\\Passwords\\\\PasswordBroker' => $vendorDir . '/laravel/framework/src/Illuminate/Auth/Passwords/PasswordBroker.php',","\t769:     'Illuminate\\\\Auth\\\\Passwords\\\\PasswordResetServiceProvider' => $vendorDir . '/laravel/framework/src/Illuminate/Auth/Passwords/PasswordResetServiceProvider.php',","\t770:     'Illuminate\\\\Auth\\\\Passwords\\\\TokenRepositoryInterface' => $vendorDir . '/laravel/framework/src/Illuminate/Auth/Passwords/TokenRepositoryInterface.php',","\t809:     'Illuminate\\\\Contracts\\\\Auth\\\\CanResetPassword' => $vendorDir . '/laravel/framework/src/Illuminate/Contracts/Auth/CanResetPassword.php',","\t811:     'Illuminate\\\\Contracts\\\\Auth\\\\PasswordBroker' => $vendorDir . '/laravel/framework/src/Illuminate/Contracts/Auth/PasswordBroker.php',","\t974:     'Illuminate\\\\Foundation\\\\Auth\\\\ResetsPasswords' => $vendorDir . '/laravel/framework/src/Illuminate/Foundation/Auth/ResetsPasswords.php',","\t1169:     'Illuminate\\\\Support\\\\Facades\\\\Password' => $vendorDir . '/laravel/framework/src/Illuminate/Support/Facades/Password.php',","\t2569:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\UsernamePasswordToken' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/UsernamePasswordToken.php',","\t2582:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\BCryptPasswordEncoder' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Encoder/BCryptPasswordEncoder.php',","\t2583:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\BasePasswordEncoder' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Encoder/BasePasswordEncoder.php',","\t2587:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\MessageDigestPasswordEncoder' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Encoder/MessageDigestPasswordEncoder.php',","\t2588:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\PasswordEncoderInterface' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Encoder/PasswordEncoderInterface.php',","\t2589:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\Pbkdf2PasswordEncoder' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Encoder/Pbkdf2PasswordEncoder.php',","\t2590:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\PlaintextPasswordEncoder' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Encoder/PlaintextPasswordEncoder.php',","\t2591:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\UserPasswordEncoder' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Encoder/UserPasswordEncoder.php',","\t2592:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\UserPasswordEncoderInterface' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Encoder/UserPasswordEncoderInterface.php',","\t2639:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Validator\\\\Constraints\\\\UserPassword' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Validator/Constraints/UserPassword.php',","\t2640:     'Symfony\\\\Component\\\\Security\\\\Core\\\\Validator\\\\Constraints\\\\UserPasswordValidator' => $vendorDir . '/symfony/security-core/Symfony/Component/Security/Core/Validator/Constraints/UserPasswordValidator.php',","","/vendor/composer/autoload_files.php:","\t11:     $vendorDir . '/ircmaxell/password-compat/lib/password.php',","","/vendor/composer/installed.json:","\t267:         \"name\": \"ircmaxell/password-compat\",","\t272:             \"url\": \"https://github.com/ircmaxell/password_compat.git\",","\t277:             \"url\": \"https://api.github.com/repos/ircmaxell/password_compat/zipball/5c5cde8822a69545767f7c7f3058cb15ff84614c\",","\t289:                 \"lib/password.php\"","\t303:         \"description\": \"A compatibility library for the proposed simplified password hashing algorithm: https://wiki.php.net/rfc/password_hash\",","\t304:         \"homepage\": \"https://github.com/ircmaxell/password_compat\",","\t307:             \"password\"","\t1261:             \"ircmaxell/password-compat\": \"1.0.*\",","\t1271:             \"ircmaxell/password-compat\": \"For using the BCrypt password encoder in PHP <5.5\",","\t1275:             \"symfony/validator\": \"For using the user password constraint\"","\t2681:             \"ircmaxell/password-compat\": \"~1.0\",","",""]},{"start":{"row":297,"column":0},"end":{"row":300,"column":0},"action":"insert","lines":["/vendor/doctrine/cache/tests/Doctrine/Tests/Common/Cache/CouchbaseCacheTest.php:","\t16:                 $this->couchbase = new Couchbase('127.0.0.1', 'Administrator', 'password', 'default');","",""]},{"start":{"row":300,"column":0},"end":{"row":308,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php:","\t281:      * Gets the password used by this connection.","\t285:     public function getPassword()","\t287:         return isset($this->_params['password']) ? $this->_params['password'] : null;","\t357:         $password = isset($this->_params['password']) ?","\t358:                 $this->_params['password'] : null;","\t360:         $this->_conn = $this->_driver->connect($this->_params, $user, $password, $driverOptions);","",""]},{"start":{"row":308,"column":0},"end":{"row":312,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver.php:","\t35:      * @param string|null $password      The password to use when connecting.","\t40:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array());","",""]},{"start":{"row":312,"column":0},"end":{"row":317,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/DriverManager.php:","\t105:      * <b>password (string)</b>:","\t106:      * The password to use when connecting.","\t257:             $params['password'] = $url['pass'];","",""]},{"start":{"row":317,"column":0},"end":{"row":324,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connections/MasterSlaveConnection.php:","\t71:  *    'master' => array('user' => '', 'password' => '', 'host' => '', 'dbname' => ''),","\t73:  *        array('user' => 'slave1', 'password', 'host' => '', 'dbname' => ''),","\t74:  *        array('user' => 'slave2', 'password', 'host' => '', 'dbname' => ''),","\t214:         $password = isset($connectionParams['password']) ? $connectionParams['password'] : null;","\t216:         return $this->_driver->connect($connectionParams, $user, $password, $driverOptions);","",""]},{"start":{"row":324,"column":0},"end":{"row":329,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:","\t35:      * @param string|null $password","\t40:     public function __construct($dsn, $user = null, $password = null, array $options = null)","\t43:             parent::__construct($dsn, $user, $password, $options);","",""]},{"start":{"row":329,"column":0},"end":{"row":333,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/DrizzlePDOMySql/Driver.php:","\t35:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())","\t40:             $password,","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":333,"column":0},"end":{"row":334,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/IBMDB2/DB2Connection.php:",""]},{"start":{"row":334,"column":0},"end":{"row":345,"column":0},"action":"insert","lines":["\t35:      * @param string $password","\t40:     public function __construct(array $params, $username, $password, $driverOptions = array())","\t45:             $this->_conn = db2_pconnect($params['dbname'], $username, $password, $driverOptions);","\t47:             $this->_conn = db2_connect($params['dbname'], $username, $password, $driverOptions);","","/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/IBMDB2/DB2Driver.php:","\t35:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())","\t48:                      ';PWD='      . $password .';';","\t54:             $password = null;","\t57:         return new DB2Connection($params, $username, $password, $driverOptions);","",""]},{"start":{"row":345,"column":0},"end":{"row":349,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/Mysqli/Driver.php:","\t33:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())","\t36:             return new MysqliConnection($params, $username, $password, $driverOptions);","",""]},{"start":{"row":349,"column":0},"end":{"row":354,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/Mysqli/MysqliConnection.php:","\t45:      * @param string $password","\t50:     public function __construct(array $params, $username, $password, array $driverOptions = array())","\t70:         if ( ! $this->_conn->real_connect($params['host'], $username, $password, $dbname, $port, $socket, $flags)) {","",""]},{"start":{"row":354,"column":0},"end":{"row":380,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/OCI8/Driver.php:","\t36:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())","\t41:                 $password,","","/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/OCI8/OCI8Connection.php:","\t47:      * @param string      $password","\t55:     public function __construct($username, $password, $db, $charset = null, $sessionMode = OCI_DEFAULT, $persistent = false)","\t62:             ? @oci_pconnect($username, $password, $db, $charset, $sessionMode)","\t63:             : @oci_connect($username, $password, $db, $charset, $sessionMode);","","/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOIbm/Driver.php:","\t40:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())","\t45:             $password,","","/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOMySql/Driver.php:","\t37:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())","\t43:                 $password,","","/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOOracle/Driver.php:","\t39:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())","\t45:                 $password,","","/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOPgSql/Driver.php:","\t38:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())","\t44:                 $password,","",""]},{"start":{"row":380,"column":0},"end":{"row":384,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOSqlite/Driver.php:","\t46:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())","\t58:                 $password,","",""]},{"start":{"row":384,"column":0},"end":{"row":388,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOSqlsrv/Driver.php:","\t34:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())","\t39:             $password,","",""]},{"start":{"row":388,"column":0},"end":{"row":395,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/SQLAnywhere/Driver.php:","\t40:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())","\t58:                     $password,","\t86:      * @param string  $password      Password to use for connection authentication.","\t91:     private function buildDsn($host, $port, $server, $dbname, $username = null, $password = null, array $driverOptions = array())","\t100:             ';PWD=' . $password .","",""]},{"start":{"row":395,"column":0},"end":{"row":399,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/SQLSrv/Driver.php:","\t32:     public function connect(array $params, $username = null, $password = null, array $driverOptions = array())","\t52:         $driverOptions['PWD'] = $password;","",""]},{"start":{"row":399,"column":0},"end":{"row":400,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/Platforms/Keywords/DB2Keywords.php:",""]},{"start":{"row":400,"column":0},"end":{"row":402,"column":0},"action":"insert","lines":["\t256:             'PASSWORD',","",""]},{"start":{"row":402,"column":0},"end":{"row":410,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/Query/QueryBuilder.php:","\t543:      *         ->set('u.password', md5('password'))","\t576:      *                 'password' => '?'","\t736:      *         ->set('u.password', md5('password'))","\t768:      *         ->set('u.password', md5('password'))","\t915:      *         ->setValue('password', '?');","\t940:      *                 'password' => '?'","",""]},{"start":{"row":410,"column":0},"end":{"row":413,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/MySqlSchemaManager.php:","\t59:             'password' => $user['Password'],","",""]},{"start":{"row":413,"column":0},"end":{"row":417,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/OracleSchemaManager.php:","\t303:         $password   = $params['password'];","\t305:         $query  = 'CREATE USER ' . $username . ' IDENTIFIED BY ' . $password;","",""]},{"start":{"row":417,"column":0},"end":{"row":420,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/PostgreSqlSchemaManager.php:","\t155:             'password' => $user['passwd']","",""]},{"start":{"row":420,"column":0},"end":{"row":421,"column":0},"action":"insert","lines":["/vendor/doctrine/dbal/lib/Doctrine/DBAL/Sharding/PoolingShardConnection.php:",""]},{"start":{"row":421,"column":0},"end":{"row":427,"column":0},"action":"insert","lines":["\t54:  *    'global' => array('user' => '', 'password' => '', 'host' => '', 'dbname' => ''),","\t56:  *        array('id' => 1, 'user' => 'slave1', 'password', 'host' => '', 'dbname' => ''),","\t57:  *        array('id' => 2, 'user' => 'slave2', 'password', 'host' => '', 'dbname' => ''),","\t188:         $password = isset($connectionParams['password']) ? $connectionParams['password'] : null;","\t190:         return $this->_driver->connect($connectionParams, $user, $password, $driverOptions);","",""]},{"start":{"row":427,"column":0},"end":{"row":430,"column":0},"action":"insert","lines":["/vendor/fzaninotto/faker/readme.md:","\t171:     password                // 'k&|X+a45*2['","",""]},{"start":{"row":430,"column":0},"end":{"row":431,"column":0},"action":"insert","lines":["/vendor/fzaninotto/faker/src/Faker/Generator.php:",""]},{"start":{"row":431,"column":0},"end":{"row":434,"column":0},"action":"insert","lines":["\t68:  * @property string $password","\t69:  * @method string password($minLength = 6, $maxLength = 20)","",""]},{"start":{"row":434,"column":0},"end":{"row":437,"column":0},"action":"insert","lines":["/vendor/fzaninotto/faker/src/Faker/Provider/Internet.php:","\t227:     public function password($minLength = 6, $maxLength = 20)","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":437,"column":0},"end":{"row":441,"column":0},"action":"insert","lines":["/vendor/fzaninotto/faker/test/Faker/Provider/InternetTest.php:","\t83:     public function testPasswordIsValid()","\t85:         $this->assertRegexp('/^.{6}$/', $this->faker->password(6, 6));","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":441,"column":0},"end":{"row":448,"column":0},"action":"insert","lines":["/vendor/ircmaxell/password-compat/composer.json:","\t2:     \"name\": \"ircmaxell/password-compat\",","\t3:     \"description\": \"A compatibility library for the proposed simplified password hashing algorithm: https://wiki.php.net/rfc/password_hash\",","\t4:     \"keywords\": [\"password\", \"hashing\"],","\t5:     \"homepage\": \"https://github.com/ircmaxell/password_compat\",","\t18:         \"files\": [\"lib/password.php\"]","",""]},{"start":{"row":448,"column":0},"end":{"row":452,"column":0},"action":"insert","lines":["/vendor/ircmaxell/password-compat/version-test.php:","\t3: require \"lib/password.php\";","\t5: echo \"Test for functionality of compat library: \" . (PasswordCompat\\binary\\check() ? \"Pass\" : \"Fail\");","",""]},{"start":{"row":452,"column":0},"end":{"row":453,"column":0},"action":"insert","lines":["/vendor/ircmaxell/password-compat/lib/password.php:",""]}]}],[{"group":"doc","deltas":[{"start":{"row":453,"column":0},"end":{"row":512,"column":0},"action":"insert","lines":["\t3:  * A Compatibility library with PHP 5.5's simplified password hashing API.","\t12:     if (!defined('PASSWORD_BCRYPT')) {","\t19:         define('PASSWORD_BCRYPT', 1);","\t20:         define('PASSWORD_DEFAULT', PASSWORD_BCRYPT);","\t21:         define('PASSWORD_BCRYPT_DEFAULT_COST', 10);","\t24:     if (!function_exists('password_hash')) {","\t27:          * Hash the password using the specified algorithm","\t29:          * @param string $password The password to hash","\t30:          * @param int    $algo     The algorithm to use (Defined by PASSWORD_* constants)","\t33:          * @return string|false The hashed password, or false on error.","\t35:         function password_hash($password, $algo, array $options = array()) {","\t37:                 trigger_error(\"Crypt must be loaded for password_hash to function\", E_USER_WARNING);","\t40:             if (is_null($password) || is_int($password)) {","\t41:                 $password = (string) $password;","\t43:             if (!is_string($password)) {","\t44:                 trigger_error(\"password_hash(): Password must be a string\", E_USER_WARNING);","\t48:                 trigger_error(\"password_hash() expects parameter 2 to be long, \" . gettype($algo) . \" given\", E_USER_WARNING);","\t53:                 case PASSWORD_BCRYPT:","\t54:                     $cost = PASSWORD_BCRYPT_DEFAULT_COST;","\t58:                             trigger_error(sprintf(\"password_hash(): Invalid bcrypt cost parameter specified: %d\", $cost), E_USER_WARNING);","\t71:                     trigger_error(sprintf(\"password_hash(): Unknown password hashing algorithm: %s\", $algo), E_USER_WARNING);","\t92:                         trigger_error('password_hash(): Non-string salt parameter supplied', E_USER_WARNING);","\t95:                 if (PasswordCompat\\binary\\_strlen($salt) < $required_salt_len) {","\t96:                     trigger_error(sprintf(\"password_hash(): Provided salt is too short: %d expecting %d\", PasswordCompat\\binary\\_strlen($salt), $required_salt_len), E_USER_WARNING);","\t118:                     $read = PasswordCompat\\binary\\_strlen($buffer);","\t121:                         $read = PasswordCompat\\binary\\_strlen($buffer);","\t128:                 if (!$buffer_valid || PasswordCompat\\binary\\_strlen($buffer) < $raw_salt_len) {","\t129:                     $bl = PasswordCompat\\binary\\_strlen($buffer);","\t151:             $salt = PasswordCompat\\binary\\_substr($salt, 0, $required_salt_len);","\t155:             $ret = crypt($password, $hash);","\t157:             if (!is_string($ret) || PasswordCompat\\binary\\_strlen($ret) != $resultLength) {","\t165:          * Get information about the password hash. Returns an array of the information","\t166:          * that was used to generate the password hash.","\t172:          *        'cost' => PASSWORD_BCRYPT_DEFAULT_COST,","\t176:          * @param string $hash The password hash to extract info from","\t180:         function password_get_info($hash) {","\t186:             if (PasswordCompat\\binary\\_substr($hash, 0, 4) == '$2y$' && PasswordCompat\\binary\\_strlen($hash) == 60) {","\t187:                 $return['algo'] = PASSWORD_BCRYPT;","\t196:          * Determine if the password hash needs to be rehashed according to the options provided","\t198:          * If the answer is true, after validating the password using password_verify, rehash it.","\t201:          * @param int    $algo    The algorithm used for new password hashes","\t202:          * @param array  $options The options array passed to password_hash","\t204:          * @return boolean True if the password needs to be rehashed.","\t206:         function password_needs_rehash($hash, $algo, array $options = array()) {","\t207:             $info = password_get_info($hash);","\t212:                 case PASSWORD_BCRYPT:","\t213:                     $cost = isset($options['cost']) ? $options['cost'] : PASSWORD_BCRYPT_DEFAULT_COST;","\t223:          * Verify a password against a hash using a timing attack resistant approach","\t225:          * @param string $password The password to verify","\t228:          * @return boolean If the password matches the hash","\t230:         function password_verify($password, $hash) {","\t232:                 trigger_error(\"Crypt must be loaded for password_verify to function\", E_USER_WARNING);","\t235:             $ret = crypt($password, $hash);","\t236:             if (!is_string($ret) || PasswordCompat\\binary\\_strlen($ret) != PasswordCompat\\binary\\_strlen($hash) || PasswordCompat\\binary\\_strlen($ret) <= 13) {","\t241:             for ($i = 0; $i < PasswordCompat\\binary\\_strlen($ret); $i++) {","\t251: namespace PasswordCompat\\binary {","\t253:     if (!function_exists('PasswordCompat\\\\binary\\\\_strlen')) {","\t304:                     $test = crypt(\"password\", $hash);","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":512,"column":0},"end":{"row":515,"column":0},"action":"insert","lines":["/vendor/knplabs/knp-snappy/src/Knp/Snappy/Image.php:","\t57:             'password'                     => null,    // HTTP Authentication password","",""]},{"start":{"row":515,"column":0},"end":{"row":518,"column":0},"action":"insert","lines":["/vendor/knplabs/knp-snappy/src/Knp/Snappy/Pdf.php:","\t178:             'password'                     => null,","",""]},{"start":{"row":518,"column":0},"end":{"row":521,"column":0},"action":"insert","lines":["/vendor/laravel/framework/composer.json:","\t25:         \"ircmaxell/password-compat\": \"~1.0\",","",""]},{"start":{"row":521,"column":0},"end":{"row":526,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Auth/Authenticatable.php:","\t16: \t * Get the password for the user.","\t20: \tpublic function getAuthPassword()","\t22: \t\treturn $this->password;","",""]},{"start":{"row":526,"column":0},"end":{"row":531,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Auth/DatabaseUserProvider.php:","\t105: \t\t\tif ( ! str_contains($key, 'password'))","\t142: \t\t$plain = $credentials['password'];","\t144: \t\treturn $this->hasher->check($plain, $user->getAuthPassword());","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":531,"column":0},"end":{"row":536,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Auth/EloquentUserProvider.php:","\t93: \t\t\tif ( ! str_contains($key, 'password')) $query->where($key, $value);","\t108: \t\t$plain = $credentials['password'];","\t110: \t\treturn $this->hasher->check($plain, $user->getAuthPassword());","",""]},{"start":{"row":536,"column":0},"end":{"row":541,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php:","\t36: \t * Get the password for the user.","\t40: \tpublic function getAuthPassword()","\t42: \t\treturn $this->attributes['password'];","",""]},{"start":{"row":541,"column":0},"end":{"row":544,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Auth/Guard.php:","\t332: \t\treturn [$field => $request->getUser(), 'password' => $request->getPassword()];","",""]},{"start":{"row":544,"column":0},"end":{"row":548,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Auth/Console/ClearResetsCommand.php:","\t19: \tprotected $description = 'Flush expired password reset tokens';","\t28: \t\t$this->laravel['auth.password.tokens']->deleteExpired();","",""]},{"start":{"row":548,"column":0},"end":{"row":554,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Auth/Passwords/CanResetPassword.php:","\t1: <?php namespace Illuminate\\Auth\\Passwords;","\t3: trait CanResetPassword {","\t6: \t * Get the e-mail address where password reset links are sent.","\t10: \tpublic function getEmailForPasswordReset()","",""]},{"start":{"row":554,"column":0},"end":{"row":570,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Auth/Passwords/DatabaseTokenRepository.php:","\t1: <?php namespace Illuminate\\Auth\\Passwords;","\t5: use Illuminate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;","\t57: \t * @param  \\Illuminate\\Contracts\\Auth\\CanResetPassword  $user","\t60: \tpublic function create(CanResetPasswordContract $user)","\t62: \t\t$email = $user->getEmailForPasswordReset();","\t67: \t\t// a safe link to the password reset form. Then we will insert a record in","\t79: \t * @param  \\Illuminate\\Contracts\\Auth\\CanResetPassword  $user","\t82: \tprotected function deleteExisting(CanResetPasswordContract $user)","\t84: \t\treturn $this->getTable()->where('email', $user->getEmailForPasswordReset())->delete();","\t102: \t * @param  \\Illuminate\\Contracts\\Auth\\CanResetPassword  $user","\t106: \tpublic function exists(CanResetPasswordContract $user, $token)","\t108: \t\t$email = $user->getEmailForPasswordReset();","\t164: \t * @param  \\Illuminate\\Contracts\\Auth\\CanResetPassword  $user","\t167: \tpublic function createNewToken(CanResetPasswordContract $user)","",""]},{"start":{"row":570,"column":0},"end":{"row":571,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Auth/Passwords/PasswordBroker.php:",""]}]}],[{"group":"doc","deltas":[{"start":{"row":571,"column":0},"end":{"row":642,"column":0},"action":"insert","lines":["\t1: <?php namespace Illuminate\\Auth\\Passwords;","\t7: use Illuminate\\Contracts\\Auth\\PasswordBroker as PasswordBrokerContract;","\t8: use Illuminate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;","\t10: class PasswordBroker implements PasswordBrokerContract {","\t13: \t * The password token repository.","\t15: \t * @var \\Illuminate\\Auth\\Passwords\\TokenRepositoryInterface","\t34: \t * The view of the password reset link e-mail.","\t41: \t * The custom password validator callback.","\t45: \tprotected $passwordValidator;","\t48: \t * Create a new password broker instance.","\t50: \t * @param  \\Illuminate\\Auth\\Passwords\\TokenRepositoryInterface  $tokens","\t68: \t * Send a password reset link to a user.","\t83: \t\t\treturn PasswordBrokerContract::INVALID_USER;","\t87: \t\t// user with a link to reset their password. We will then redirect back to","\t93: \t\treturn PasswordBrokerContract::RESET_LINK_SENT;","\t97: \t * Send the password reset link via e-mail.","\t99: \t * @param  \\Illuminate\\Contracts\\Auth\\CanResetPassword  $user","\t104: \tpublic function emailResetLink(CanResetPasswordContract $user, $token, Closure $callback = null)","\t107: \t\t// password reminder e-mail. We'll pass a \"token\" variable into the views","\t108: \t\t// so that it may be displayed for an user to click for password reset.","\t113: \t\t\t$m->to($user->getEmailForPasswordReset());","\t120: \t * Reset the password for the given token.","\t133: \t\tif ( ! $user instanceof CanResetPasswordContract)","\t138: \t\t$pass = $credentials['password'];","\t147: \t\treturn PasswordBrokerContract::PASSWORD_RESET;","\t151: \t * Validate a password reset for the given credentials.","\t154: \t * @return \\Illuminate\\Contracts\\Auth\\CanResetPassword","\t160: \t\t\treturn PasswordBrokerContract::INVALID_USER;","\t163: \t\tif ( ! $this->validateNewPassword($credentials))","\t165: \t\t\treturn PasswordBrokerContract::INVALID_PASSWORD;","\t170: \t\t\treturn PasswordBrokerContract::INVALID_TOKEN;","\t177: \t * Set a custom password validator.","\t184: \t\t$this->passwordValidator = $callback;","\t188: \t * Determine if the passwords match for the request.","\t193: \tpublic function validateNewPassword(array $credentials)","\t195: \t\tlist($password, $confirm) = [","\t196: \t\t\t$credentials['password'], $credentials['password_confirmation'],","\t199: \t\tif (isset($this->passwordValidator))","\t202: \t\t\t\t$this->passwordValidator, $credentials) && $password === $confirm;","\t205: \t\treturn $this->validatePasswordWithDefaults($credentials);","\t209: \t * Determine if the passwords are valid for the request.","\t214: \tprotected function validatePasswordWithDefaults(array $credentials)","\t216: \t\tlist($password, $confirm) = [","\t217: \t\t\t$credentials['password'], $credentials['password_confirmation'],","\t220: \t\treturn $password === $confirm && mb_strlen($password) >= 6;","\t227: \t * @return \\Illuminate\\Contracts\\Auth\\CanResetPassword","\t237: \t\tif ($user && ! $user instanceof CanResetPasswordContract)","\t239: \t\t\tthrow new UnexpectedValueException(\"User must implement CanResetPassword interface.\");","\t246: \t * Get the password reset token repository implementation.","\t248: \t * @return \\Illuminate\\Auth\\Passwords\\TokenRepositoryInterface","","/vendor/laravel/framework/src/Illuminate/Auth/Passwords/PasswordResetServiceProvider.php:","\t1: <?php namespace Illuminate\\Auth\\Passwords;","\t4: use Illuminate\\Auth\\Passwords\\DatabaseTokenRepository as DbRepository;","\t6: class PasswordResetServiceProvider extends ServiceProvider {","\t22: \t\t$this->registerPasswordBroker();","\t28: \t * Register the password broker instance.","\t32: \tprotected function registerPasswordBroker()","\t34: \t\t$this->app->singleton('auth.password', function($app)","\t36: \t\t\t// The password token repository is responsible for storing the email addresses","\t37: \t\t\t// and password reset tokens. It will be used to verify the tokens are valid","\t39: \t\t\t$tokens = $app['auth.password.tokens'];","\t43: \t\t\t$view = $app['config']['auth.password.email'];","\t45: \t\t\t// The password broker uses a token repository to validate tokens and send user","\t46: \t\t\t// password e-mails, as well as validating that password reset process as an","\t48: \t\t\treturn new PasswordBroker(","\t61: \t\t$this->app->singleton('auth.password.tokens', function($app)","\t68: \t\t\t$table = $app['config']['auth.password.table'];","\t72: \t\t\t$expire = $app['config']->get('auth.password.expire', 60);","\t85: \t\treturn ['auth.password', 'auth.password.tokens'];","",""]},{"start":{"row":642,"column":0},"end":{"row":650,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Auth/Passwords/TokenRepositoryInterface.php:","\t1: <?php namespace Illuminate\\Auth\\Passwords;","\t3: use Illuminate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;","\t10: \t * @param  \\Illuminate\\Contracts\\Auth\\CanResetPassword  $user","\t13: \tpublic function create(CanResetPasswordContract $user);","\t18: \t * @param  \\Illuminate\\Contracts\\Auth\\CanResetPassword  $user","\t22: \tpublic function exists(CanResetPasswordContract $user, $token);","",""]},{"start":{"row":650,"column":0},"end":{"row":654,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Contracts/Auth/Authenticatable.php:","\t13: \t * Get the password for the user.","\t17: \tpublic function getAuthPassword();","",""]},{"start":{"row":654,"column":0},"end":{"row":660,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Contracts/Auth/CanResetPassword.php:","\t3: interface CanResetPassword {","\t6: \t * Get the e-mail address where password reset links are sent.","\t10: \tpublic function getEmailForPasswordReset();","","/vendor/laravel/framework/src/Illuminate/Contracts/Auth/PasswordBroker.php:",""]},{"start":{"row":660,"column":0},"end":{"row":674,"column":0},"action":"insert","lines":["\t5: interface PasswordBroker {","\t12: \tconst RESET_LINK_SENT = 'passwords.sent';","\t15: \t * Constant representing a successfully reset password.","\t19: \tconst PASSWORD_RESET = 'passwords.reset';","\t26: \tconst INVALID_USER = 'passwords.user';","\t29: \t * Constant representing an invalid password.","\t33: \tconst INVALID_PASSWORD = 'passwords.password';","\t40: \tconst INVALID_TOKEN = 'passwords.token';","\t43: \t * Send a password reset link to a user.","\t52: \t * Reset the password for the given token.","\t61: \t * Set a custom password validator.","\t69: \t * Determine if the passwords match for the request.","\t74: \tpublic function validateNewPassword(array $credentials);","",""]},{"start":{"row":674,"column":0},"end":{"row":677,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Database/README.md:","\t19: \t'password'  => 'password',","",""]},{"start":{"row":677,"column":0},"end":{"row":681,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Database/Connectors/Connector.php:","\t45: \t\t$password = array_get($config, 'password');","\t47: \t\treturn new PDO($dsn, $username, $password, $options);","",""]},{"start":{"row":681,"column":0},"end":{"row":685,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Foundation/Application.php:","\t1000: \t\t\t'auth.password.tokens' => 'Illuminate\\Auth\\Passwords\\TokenRepositoryInterface',","\t1018: \t\t\t'auth.password'        => ['Illuminate\\Auth\\Passwords\\PasswordBroker', 'Illuminate\\Contracts\\Auth\\PasswordBroker'],","",""]},{"start":{"row":685,"column":0},"end":{"row":689,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Foundation/Auth/AuthenticatesAndRegistersUsers.php:","\t74: \t\t\t'email' => 'required|email', 'password' => 'required',","\t77: \t\t$credentials = $request->only('email', 'password');","",""]},{"start":{"row":689,"column":0},"end":{"row":709,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Foundation/Auth/ResetsPasswords.php:","\t5: use Illuminate\\Contracts\\Auth\\PasswordBroker;","\t8: trait ResetsPasswords {","\t18: \t * The password broker implementation.","\t20: \t * @var PasswordBroker","\t22: \tprotected $passwords;","\t25: \t * Display the form to request a password reset link.","\t31: \t\treturn view('auth.password');","\t44: \t\t$response = $this->passwords->sendResetLink($request->only('email'), function($m)","\t51: \t\t\tcase PasswordBroker::RESET_LINK_SENT:","\t54: \t\t\tcase PasswordBroker::INVALID_USER:","\t66: \t\treturn isset($this->subject) ? $this->subject : 'Your Password Reset Link';","\t70: \t * Display the password reset view for the given token.","\t86: \t * Reset the given user's password.","\t96: \t\t\t'password' => 'required|confirmed',","\t100: \t\t\t'email', 'password', 'password_confirmation', 'token'","\t103: \t\t$response = $this->passwords->reset($credentials, function($user, $password)","\t105: \t\t\t$user->password = bcrypt($password);","\t114: \t\t\tcase PasswordBroker::PASSWORD_RESET:","",""]},{"start":{"row":709,"column":0},"end":{"row":712,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Foundation/Console/FreshCommand.php:","\t51: \t\t$files->delete(base_path('database/migrations/2014_10_12_100000_create_password_resets_table.php'));","",""]},{"start":{"row":712,"column":0},"end":{"row":715,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Foundation/Console/Optimize/config.php:","\t59:     $basePath.'/vendor/laravel/framework/src/Illuminate/Foundation/Auth/ResetsPasswords.php',","",""]},{"start":{"row":715,"column":0},"end":{"row":718,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Foundation/Http/FormRequest.php:","\t64: \tprotected $dontFlash = ['password', 'password_confirmation'];","",""]},{"start":{"row":718,"column":0},"end":{"row":724,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Hashing/BcryptHasher.php:","\t28: \t\t$hash = password_hash($value, PASSWORD_BCRYPT, array('cost' => $cost));","\t48: \t\treturn password_verify($value, $hashedValue);","\t62: \t\treturn password_needs_rehash($hashedValue, PASSWORD_BCRYPT, array('cost' => $cost));","\t66: \t * Set the default password work factor.","",""]},{"start":{"row":724,"column":0},"end":{"row":727,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Hashing/composer.json:","\t20:         \"ircmaxell/password-compat\": \"~1.0\"","",""]},{"start":{"row":727,"column":0},"end":{"row":731,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Mail/TransportManager.php:","\t37: \t\t// and password. If we have it we will set the credentials on the Swift","\t43: \t\t\t$transport->setPassword($config['password']);","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":731,"column":0},"end":{"row":743,"column":0},"action":"insert","lines":["/vendor/laravel/framework/src/Illuminate/Support/Facades/Password.php:","\t4:  * @see \\Illuminate\\Auth\\Passwords\\PasswordBroker","\t6: class Password extends Facade {","\t13: \tconst RESET_LINK_SENT = 'passwords.sent';","\t16: \t * Constant representing a successfully reset password.","\t20: \tconst PASSWORD_RESET = 'passwords.reset';","\t27: \tconst INVALID_USER = 'passwords.user';","\t30: \t * Constant representing an invalid password.","\t34: \tconst INVALID_PASSWORD = 'passwords.password';","\t41: \tconst INVALID_TOKEN = 'passwords.token';","\t48: \tprotected static function getFacadeAccessor() { return 'auth.password'; }","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":743,"column":0},"end":{"row":754,"column":0},"action":"insert","lines":["/vendor/league/flysystem/src/Adapter/AbstractFtpAdapter.php:","\t15:     protected $password;","\t179:      * Returns the password.","\t181:      * @return string password","\t183:     public function getPassword()","\t185:         return $this->password;","\t189:      * Set the ftp password.","\t191:      * @param string $password","\t195:     public function setPassword($password)","\t197:         $this->password = $password;","",""]},{"start":{"row":754,"column":0},"end":{"row":758,"column":0},"action":"insert","lines":["/vendor/league/flysystem/src/Adapter/Ftp.php:","\t25:         'password', 'ssl', 'timeout',","\t128:         $isLoggedIn = ftp_login($this->getConnection(), $this->getUsername(), $this->getPassword());","",""]},{"start":{"row":758,"column":0},"end":{"row":762,"column":0},"action":"insert","lines":["/vendor/monolog/monolog/src/Monolog/Handler/CouchDBHandler.php:","\t33:             'password' => null,","\t46:             $basicAuth = sprintf('%s:%s@', $this->options['username'], $this->options['password']);","",""]},{"start":{"row":762,"column":0},"end":{"row":772,"column":0},"action":"insert","lines":["/vendor/phpspec/phpspec/features/code_generation/developer_generates_class.feature:","\t77:     Given the spec file \"spec/CodeGeneration/MethodExample2/ForgotPasswordSpec.php\" contains:","\t88:     class ForgotPasswordSpec extends ObjectBehavior","\t90:         function it_changes_password_for_user(UserRepository $repository, User $user)","\t93:             $user->changePassword('123')->shouldBeCalled();","\t95:             $this->changePassword('leszek.prabucki@gmail.com', '123');","\t107:         public function changePassword($newPassword);","\t122:     Then the class in \"src/CodeGeneration/MethodExample2/ForgotPassword.php\" should contain:","\t128:     class ForgotPassword","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":772,"column":0},"end":{"row":777,"column":0},"action":"insert","lines":["/vendor/phpspec/prophecy/README.md:","\t18:     public function testPasswordHashing()","\t25:         $user->setPassword('qwerty');","\t27:         $this->assertEquals('hashed_pass', $user->getPassword());","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":777,"column":0},"end":{"row":780,"column":0},"action":"insert","lines":["/vendor/swiftmailer/swiftmailer/doc/help-resources.rst:","\t19: When you go to GitHub you will be asked to create a username and password","",""]},{"start":{"row":780,"column":0},"end":{"row":787,"column":0},"action":"insert","lines":["/vendor/swiftmailer/swiftmailer/doc/plugins.rst:","\t274:             '{password}'=>$user['password']","\t295:         \"Hello {username}, we have reset your password to {password}\\n\" .","\t313:     Hello smilingsunshine2009, we have reset your password to rainyDays","\t322:     Hello billy-bo-bob, we have reset your password to dancingOctopus","\t363:             '{password}'=>$row['password']","",""]},{"start":{"row":787,"column":0},"end":{"row":799,"column":0},"action":"insert","lines":["/vendor/swiftmailer/swiftmailer/doc/sending.rst:","\t45:       ->setPassword('your password')","\t94: SMTP servers often require users to authenticate with a username and password","\t198: SMTP with a Username and Password","\t201: Some servers require authentication. You can provide a username and password","\t202: with ``setUsername()`` and ``setPassword()`` methods.","\t204: To use a username and password with the SMTP Transport:","\t208: * Call the ``setUsername()`` and ``setPassword()`` methods on the Transport.","\t210: Your username and password will be used to authenticate upon first connect","\t226:         // Create the Transport the call setUsername() and setPassword()","\t229:           ->setPassword('password')","",""]},{"start":{"row":799,"column":0},"end":{"row":803,"column":0},"action":"insert","lines":["/vendor/swiftmailer/swiftmailer/lib/classes/Swift/SmtpTransport.php:","\t17:  * @method Swift_SmtpTransport setPassword(string $password) Set the password to authenticate with.","\t18:  * @method string              getPassword()                 Get the password to authenticate with.","",""]},{"start":{"row":803,"column":0},"end":{"row":812,"column":0},"action":"insert","lines":["/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Plugins/PopBeforeSmtpPlugin.php:","\t33:     /** Password to use (if any) */","\t34:     private $_password;","\t126:      * Set the password to use when connecting (if needed).","\t128:      * @param string $password","\t132:     public function setPassword($password)","\t134:         $this->_password = $password;","\t168:                     $this->_command(sprintf(\"PASS %s\\r\\n\", $this->_password));","",""]},{"start":{"row":812,"column":0},"end":{"row":817,"column":0},"action":"insert","lines":["/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Authenticator.php:","\t26:      * Try to authenticate the user with $username and $password.","\t30:      * @param string                    $password","\t34:     public function authenticate(Swift_Transport_SmtpAgent $agent, $username, $password);","",""]},{"start":{"row":817,"column":0},"end":{"row":830,"column":0},"action":"insert","lines":["/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/AuthHandler.php:","\t33:      * The password for authentication.","\t37:     private $_password;","\t104:      * Set the password to authenticate with.","\t106:      * @param string $password","\t108:     public function setPassword($password)","\t110:         $this->_password = $password;","\t114:      * Get the password to authenticate with.","\t118:     public function getPassword()","\t120:         return $this->_password;","\t176:                     if ($authenticator->authenticate($agent, $this->_username, $this->_password)) {","\t232:         return array('setUsername', 'getUsername', 'setPassword', 'getPassword', 'setAuthMode', 'getAuthMode');","",""]},{"start":{"row":830,"column":0},"end":{"row":836,"column":0},"action":"insert","lines":["/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/CramMd5Authenticator.php:","\t29:      * Try to authenticate the user with $username and $password.","\t33:      * @param string                    $password","\t37:     public function authenticate(Swift_Transport_SmtpAgent $agent, $username, $password)","\t43:                 $username.' '.$this->_getResponse($password, $challenge)","",""]},{"start":{"row":836,"column":0},"end":{"row":842,"column":0},"action":"insert","lines":["/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/LoginAuthenticator.php:","\t29:      * Try to authenticate the user with $username and $password.","\t33:      * @param string                    $password","\t37:     public function authenticate(Swift_Transport_SmtpAgent $agent, $username, $password)","\t42:             $agent->executeCommand(sprintf(\"%s\\r\\n\", base64_encode($password)), array(235));","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":842,"column":0},"end":{"row":869,"column":0},"action":"insert","lines":["/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/NTLMAuthenticator.php:","\t34:      * Try to authenticate the user with $username and $password.","\t38:      * @param string $password","\t42:     public function authenticate(Swift_Transport_SmtpAgent $agent, $username, $password)","\t66:             $this->sendMessage3($response, $username, $password, $timestamp, $client, $agent);","\t184:      * @param string $password","\t191:     protected function sendMessage3($response, $username, $password, $timestamp, $client, Swift_Transport_SmtpAgent $agent, $v2 = true)","\t199:             $lmResponse = $this->createLMPassword($password, $challenge);","\t201:             $ntlmResponse = $this->createNTLMPassword($password, $challenge);","\t204:             $lmResponse = $this->createLMv2Password($password, $username, $domain, $challenge, $client);","\t206:             $ntlmResponse = $this->createNTLMv2Hash($password, $username, $domain, $challenge, $blob, $timestamp, $client);","\t304:      * @param string $password","\t308:     protected function createLMPassword($password, $challenge)","\t311:         $password = $this->createByte(strtoupper($password), 14, false);","\t312:         list($key1, $key2) = str_split($password, 7);","\t332:      * @param string $password","\t336:     protected function createNTLMPassword($password, $challenge)","\t339:         $ntlmHash = $this->createByte($this->md4Encrypt($password), 21, false);","\t376:      * @param string $password","\t383:     protected function createLMv2Password($password, $username, $domain, $challenge, $client)","\t386:         // if $password > 15 than we can't use this method","\t387:         if (strlen($password) <= 15) {","\t388:             $ntlmHash = $this->md4Encrypt($password);","\t400:      * @param string $password","\t410:     protected function createNTLMv2Hash($password, $username, $domain, $challenge, $targetInfo, $timestamp, $client)","\t412:         $ntlmHash = $this->md4Encrypt($password);","",""]},{"start":{"row":869,"column":0},"end":{"row":875,"column":0},"action":"insert","lines":["/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/PlainAuthenticator.php:","\t29:      * Try to authenticate the user with $username and $password.","\t33:      * @param string                    $password","\t37:     public function authenticate(Swift_Transport_SmtpAgent $agent, $username, $password)","\t40:             $message = base64_encode($username.chr(0).$username.chr(0).$password);","",""]},{"start":{"row":875,"column":0},"end":{"row":878,"column":0},"action":"insert","lines":["/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/Esmtp/Auth/XOAuth2Authenticator.php:","\t19:  *   ->setPassword('YOUR_ACCESS_TOKEN');","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":878,"column":0},"end":{"row":884,"column":0},"action":"insert","lines":["/vendor/swiftmailer/swiftmailer/tests/smoke.conf.php.default:","\t46:  Defines: A password to authenticate with SMTP (if needed).","","/vendor/swiftmailer/swiftmailer/tests/SwiftMailerSmokeTestCase.php:","\t27:                     ->setPassword(SWIFT_SMOKE_SMTP_PASS)","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":884,"column":0},"end":{"row":902,"column":0},"action":"insert","lines":["/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/AuthHandlerTest.php:","\t25:     public function testPasswordCanBeSetAndFetched()","\t28:         $auth->setPassword('pass');","\t29:         $this->assertEquals('pass', $auth->getPassword());","\t49:         $this->assertTrue(in_array('getPassword', $mixins),","\t50:             '%s: getPassword() should be accessible via mixin'","\t52:         $this->assertTrue(in_array('setPassword', $mixins),","\t53:             '%s: setPassword() should be accessible via mixin'","\t78:         $auth->setPassword('pass');","\t119:         $auth->setPassword('pass');","\t145:         $auth->setPassword('pass');","","/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/Auth/NTLMAuthenticatorTest.php:","\t36:         $password = \"test1234\";","\t41:         $lmv1Result = $this->_invokePrivateMethod('createLMPassword', $login, array($password, $this->hex2bin($challenge)));","\t51:         $password = \"SecREt01\";","\t57:         $lmv2Result = $this->_invokePrivateMethod('createLMv2Password', $login, array($password, $username, $domain, $this->hex2bin($challenge), $this->hex2bin(\"ffffff0011223344\")));","",""]},{"start":{"row":902,"column":0},"end":{"row":918,"column":0},"action":"insert","lines":["/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/Esmtp/Auth/PlainAuthenticatorTest.php:","\t27:         identity (identity whose password will be used), followed by a NUL","\t28:         (U+0000) character, followed by the clear-text password.","","/vendor/swiftmailer/swiftmailer/tests/unit/Swift/Transport/EsmtpTransport/ExtensionSupportTest.php:","\t9:     public function setPassword($pass);","\t450:              ->andReturn(array('setUsername', 'setPassword'));","\t454:         $ext1->shouldReceive('setPassword')","\t464:         $smtp->setPassword('pass');","\t479:              ->andReturn(array('setUsername', 'setPassword'));","\t484:         $ext1->shouldReceive('setPassword')","\t496:         $ret = $smtp->setPassword('pass');","\t512:              ->andReturn(array('setUsername', 'setPassword'));","\t517:         $ext1->shouldReceive('setPassword')","\t528:         $this->assertEquals('x', $smtp->setPassword('pass'));","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":918,"column":0},"end":{"row":922,"column":0},"action":"insert","lines":["/vendor/symfony/console/Symfony/Component/Console/Helper/DialogHelper.php:","\t307:             $readCmd = $shell === 'csh' ? 'set mypassword = $<' : 'read -r mypassword';","\t308:             $command = sprintf(\"/usr/bin/env %s -c 'stty -echo; %s; stty echo; echo \\$mypassword'\", $shell, $readCmd);","",""]},{"start":{"row":922,"column":0},"end":{"row":926,"column":0},"action":"insert","lines":["/vendor/symfony/console/Symfony/Component/Console/Helper/QuestionHelper.php:","\t330:             $readCmd = $shell === 'csh' ? 'set mypassword = $<' : 'read -r mypassword';","\t331:             $command = sprintf(\"/usr/bin/env %s -c 'stty -echo; %s; stty echo; echo \\$mypassword'\", $shell, $readCmd);","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":926,"column":0},"end":{"row":929,"column":0},"action":"insert","lines":["/vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/CHANGELOG.md:","\t64:  * added Request::getUser() and Request::getPassword()","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":929,"column":0},"end":{"row":935,"column":0},"action":"insert","lines":["/vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Request.php:","\t1032:      * Returns the password.","\t1036:     public function getPassword()","\t1050:         $pass = $this->getPassword();","\t1099:      * and the password are not added to the generated string.","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":935,"column":0},"end":{"row":942,"column":0},"action":"insert","lines":["/vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Session/Storage/Handler/PdoSessionHandler.php:","\t114:      * @var string Password when lazy-connect","\t116:     private $password = '';","\t165:      *  * db_password: The password when lazy-connect [default: '']","\t193:         $this->password = isset($options['db_password']) ? $options['db_password'] : $this->password;","\t419:         $this->pdo = new \\PDO($dsn, $this->username, $this->password, $this->connectionOptions);","",""]},{"start":{"row":942,"column":0},"end":{"row":954,"column":0},"action":"insert","lines":["/vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/RequestTest.php:","\t58:         $request = Request::create('http://user_test:password_test@test.com/');","\t64:     public function testGetPassword()","\t66:         $request = Request::create('http://user_test:password_test@test.com/');","\t67:         $password = $request->getPassword();","\t69:         $this->assertEquals('password_test', $password);","\t203:         $request = Request::create('http://username:password@test.com');","\t210:         $this->assertEquals('password', $request->getPassword());","\t220:         $this->assertSame('', $request->getPassword());","\t262:         $this->assertEquals('pa$$', $request->getPassword());","\t276:         $this->assertEquals('pokemon', $request->getPassword());","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":954,"column":0},"end":{"row":960,"column":0},"action":"insert","lines":["/vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Tests/ServerBagTest.php:","\t48:     public function testHttpPasswordIsOptional()","\t74:         // Username and passwords should not be set as the header is bogus","\t91:     public function testHttpBasicAuthWithPhpCgiEmptyPassword()","\t118:         // Username and passwords should not be set as the header is bogus","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":960,"column":0},"end":{"row":964,"column":0},"action":"insert","lines":["/vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/BaseMemcacheProfilerStorage.php:","\t31:      * @param string $password","\t34:     public function __construct($dsn, $username = '', $password = '', $lifetime = 86400)","",""]},{"start":{"row":964,"column":0},"end":{"row":965,"column":0},"action":"insert","lines":["/vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/MongoDbProfilerStorage.php:",""]},{"start":{"row":965,"column":0},"end":{"row":971,"column":0},"action":"insert","lines":["\t25:      * @param string $password Not used","\t28:     public function __construct($dsn, $username = '', $password = '', $lifetime = 86400)","","/vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/MysqlProfilerStorage.php:","\t35:             $db = new \\PDO($this->dsn, $this->username, $this->password);","",""]},{"start":{"row":971,"column":0},"end":{"row":977,"column":0},"action":"insert","lines":["/vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php:","\t24:     protected $password;","\t33:      * @param string $password The password for the database","\t36:     public function __construct($dsn, $username = '', $password = '', $lifetime = 86400)","\t40:         $this->password = $password;","",""]},{"start":{"row":977,"column":0},"end":{"row":981,"column":0},"action":"insert","lines":["/vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Profiler/RedisProfilerStorage.php:","\t42:      * @param string $password Not used","\t45:     public function __construct($dsn, $username = '', $password = '', $lifetime = 86400)","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":981,"column":0},"end":{"row":982,"column":0},"action":"insert","lines":["/vendor/symfony/http-kernel/Symfony/Component/HttpKernel/Tests/Profiler/MongoDbProfilerStorageTest.php:",""]},{"start":{"row":982,"column":0},"end":{"row":989,"column":0},"action":"insert","lines":["\t82:             array('mongodb://user:password@localhost/symfony_tests/profiler_data', array(","\t83:                 'mongodb://user:password@localhost/symfony_tests',","\t87:             array('mongodb://user:password@localhost/admin/symfony_tests/profiler_data', array(","\t88:                 'mongodb://user:password@localhost/admin',","\t92:             array('mongodb://user:password@localhost:27009,localhost:27010/?replicaSet=rs-name&authSource=admin/symfony_tests/profiler_data', array(","\t93:                 'mongodb://user:password@localhost:27009,localhost:27010/?replicaSet=rs-name&authSource=admin',","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":989,"column":0},"end":{"row":994,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/composer.json:","\t29:         \"ircmaxell/password-compat\": \"1.0.*\"","\t34:         \"symfony/validator\": \"For using the user password constraint\",","\t36:         \"ircmaxell/password-compat\": \"For using the BCrypt password encoder in PHP <5.5\"","",""]},{"start":{"row":994,"column":0},"end":{"row":995,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/SimpleFormAuthenticatorInterface.php:",""]},{"start":{"row":995,"column":0},"end":{"row":997,"column":0},"action":"insert","lines":["\t21:     public function createToken(Request $request, $username, $password, $providerKey);","",""]},{"start":{"row":997,"column":0},"end":{"row":1008,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Provider/DaoAuthenticationProvider.php:","\t21: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken;","\t25:  * for a UsernamePasswordToken.","\t54:     protected function checkAuthentication(UserInterface $user, UsernamePasswordToken $token)","\t58:             if ($currentUser->getPassword() !== $user->getPassword()) {","\t62:             if ('' === ($presentedPassword = $token->getCredentials())) {","\t63:                 throw new BadCredentialsException('The presented password cannot be empty.');","\t66:             if (!$this->encoderFactory->getEncoder($user)->isPasswordValid($user->getPassword(), $presentedPassword, $user->getSalt())) {","\t67:                 throw new BadCredentialsException('The presented password is invalid.');","\t75:     protected function retrieveUser($username, UsernamePasswordToken $token)","",""]},{"start":{"row":1008,"column":0},"end":{"row":1018,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Provider/UserAuthenticationProvider.php:","\t20: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken;","\t25:  * UserProviderInterface retrieves users for UsernamePasswordToken tokens.","\t96:         $authenticatedToken = new UsernamePasswordToken($user, $token->getCredentials(), $this->providerKey, $this->getRoles($user, $token));","\t107:         return $token instanceof UsernamePasswordToken && $this->providerKey === $token->getProviderKey();","\t137:      * @param UsernamePasswordToken $token    The Token","\t143:     abstract protected function retrieveUser($username, UsernamePasswordToken $token);","\t150:      * @param UsernamePasswordToken $token The UsernamePasswordToken token to be authenticated","\t154:     abstract protected function checkAuthentication(UserInterface $user, UsernamePasswordToken $token);","",""]},{"start":{"row":1018,"column":0},"end":{"row":1021,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/AbstractToken.php:","\t254:         if ($this->user->getPassword() !== $user->getPassword()) {","",""]},{"start":{"row":1021,"column":0},"end":{"row":1026,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Authentication/Token/UsernamePasswordToken.php:","\t17:  * UsernamePasswordToken implements a username and password token.","\t21: class UsernamePasswordToken extends AbstractToken","\t30:      * @param string                   $credentials This usually is the password of the user","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1026,"column":0},"end":{"row":1060,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/BasePasswordEncoder.php:","\t17:  * BasePasswordEncoder is the base class for all password encoders.","\t21: abstract class BasePasswordEncoder implements PasswordEncoderInterface","\t23:     const MAX_PASSWORD_LENGTH = 4096;","\t26:      * Demerges a merge password and salt string.","\t28:      * @param string $mergedPasswordSalt The merged password and salt string","\t30:      * @return array An array where the first element is the password and the second the salt","\t32:     protected function demergePasswordAndSalt($mergedPasswordSalt)","\t34:         if (empty($mergedPasswordSalt)) {","\t38:         $password = $mergedPasswordSalt;","\t40:         $saltBegins = strrpos($mergedPasswordSalt, '{');","\t42:         if (false !== $saltBegins && $saltBegins + 1 < strlen($mergedPasswordSalt)) {","\t43:             $salt = substr($mergedPasswordSalt, $saltBegins + 1, -1);","\t44:             $password = substr($mergedPasswordSalt, 0, $saltBegins);","\t47:         return array($password, $salt);","\t51:      * Merges a password and a salt.","\t53:      * @param string $password the password to be used","\t56:      * @return string a merged password and salt","\t60:     protected function mergePasswordAndSalt($password, $salt)","\t63:             return $password;","\t70:         return $password.'{'.$salt.'}';","\t74:      * Compares two passwords.","\t76:      * This method implements a constant-time algorithm to compare passwords to","\t79:      * @param string $password1 The first password","\t80:      * @param string $password2 The second password","\t82:      * @return bool true if the two passwords are the same, false otherwise","\t84:     protected function comparePasswords($password1, $password2)","\t86:         return StringUtils::equals($password1, $password2);","\t90:      * Checks if the password is too long.","\t92:      * @param string $password The password to check","\t94:      * @return bool true if the password is too long, false otherwise","\t96:     protected function isPasswordTooLong($password)","\t98:         return strlen($password) > self::MAX_PASSWORD_LENGTH;","",""]},{"start":{"row":1060,"column":0},"end":{"row":1061,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/BCryptPasswordEncoder.php:",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1061,"column":0},"end":{"row":1081,"column":0},"action":"insert","lines":["\t20: class BCryptPasswordEncoder extends BasePasswordEncoder","\t37:         if (!function_exists('password_hash')) {","\t38:             throw new \\RuntimeException('To use the BCrypt encoder, you need to upgrade to PHP 5.5 or install the \"ircmaxell/password-compat\" via Composer.');","\t50:      * Encodes the raw password.","\t53:      * the password compat library uses CRYPT_BLOWFISH hash type with","\t56:      * @see https://github.com/ircmaxell/password_compat/issues/10#issuecomment-11203833","\t60:      * @param string $raw  The password to encode","\t63:      * @return string The encoded password","\t65:      * @throws BadCredentialsException when the given password is too long","\t67:      * @link http://lxr.php.net/xref/PHP_5_5/ext/standard/password.c#111","\t69:     public function encodePassword($raw, $salt)","\t71:         if ($this->isPasswordTooLong($raw)) {","\t72:             throw new BadCredentialsException('Invalid password.');","\t81:         return password_hash($raw, PASSWORD_BCRYPT, $options);","\t87:     public function isPasswordValid($encoded, $raw, $salt)","\t89:         return !$this->isPasswordTooLong($raw) && password_verify($raw, $encoded);","","/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/EncoderAwareInterface.php:","\t20:      * Gets the name of the encoder used to encode the password.","",""]},{"start":{"row":1081,"column":0},"end":{"row":1090,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/EncoderFactory.php:","\t54:         if (!$this->encoders[$encoderKey] instanceof PasswordEncoderInterface) {","\t66:      * @return PasswordEncoderInterface","","/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/EncoderFactoryInterface.php:","\t24:      * Returns the password encoder to use for the given account.","\t28:      * @return PasswordEncoderInterface","\t30:      * @throws \\RuntimeException when no password encoder could be found for the user","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1090,"column":0},"end":{"row":1147,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/MessageDigestPasswordEncoder.php:","\t17:  * MessageDigestPasswordEncoder uses a message digest algorithm.","\t21: class MessageDigestPasswordEncoder extends BasePasswordEncoder","\t31:      * @param bool   $encodeHashAsBase64 Whether to base64 encode the password hash","\t32:      * @param int    $iterations         The number of iterations to use to stretch the password hash","\t44:     public function encodePassword($raw, $salt)","\t46:         if ($this->isPasswordTooLong($raw)) {","\t47:             throw new BadCredentialsException('Invalid password.');","\t54:         $salted = $this->mergePasswordAndSalt($raw, $salt);","\t68:     public function isPasswordValid($encoded, $raw, $salt)","\t70:         return !$this->isPasswordTooLong($raw) && $this->comparePasswords($encoded, $this->encodePassword($raw, $salt));","","/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/PasswordEncoderInterface.php:","\t15:  * PasswordEncoderInterface is the interface for all encoders.","\t19: interface PasswordEncoderInterface","\t22:      * Encodes the raw password.","\t24:      * @param string $raw  The password to encode","\t27:      * @return string The encoded password","\t29:     public function encodePassword($raw, $salt);","\t32:      * Checks a raw password against an encoded password.","\t34:      * @param string $encoded An encoded password","\t35:      * @param string $raw     A raw password","\t38:      * @return bool true if the password is valid, false otherwise","\t40:     public function isPasswordValid($encoded, $raw, $salt);","","/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/Pbkdf2PasswordEncoder.php:","\t17:  * Pbkdf2PasswordEncoder uses the PBKDF2 (Password-Based Key Derivation Function 2).","\t29: class Pbkdf2PasswordEncoder extends BasePasswordEncoder","\t40:      * @param bool   $encodeHashAsBase64 Whether to base64 encode the password hash","\t41:      * @param int    $iterations         The number of iterations to use to stretch the password hash","\t57:     public function encodePassword($raw, $salt)","\t59:         if ($this->isPasswordTooLong($raw)) {","\t60:             throw new BadCredentialsException('Invalid password.');","\t79:     public function isPasswordValid($encoded, $raw, $salt)","\t81:         return !$this->isPasswordTooLong($raw) && $this->comparePasswords($encoded, $this->encodePassword($raw, $salt));","\t84:     private function hashPbkdf2($algorithm, $password, $salt, $iterations, $length = 0)","\t91:             $ib = $block = hash_hmac($algorithm, $salt.pack('N', $i), $password, true);","\t95:                 $ib ^= ($block = hash_hmac($algorithm, $block, $password, true));","","/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/PlaintextPasswordEncoder.php:","\t17:  * PlaintextPasswordEncoder does not do any encoding.","\t21: class PlaintextPasswordEncoder extends BasePasswordEncoder","\t23:     private $ignorePasswordCase;","\t28:      * @param bool $ignorePasswordCase Compare password case-insensitive","\t30:     public function __construct($ignorePasswordCase = false)","\t32:         $this->ignorePasswordCase = $ignorePasswordCase;","\t38:     public function encodePassword($raw, $salt)","\t40:         if ($this->isPasswordTooLong($raw)) {","\t41:             throw new BadCredentialsException('Invalid password.');","\t44:         return $this->mergePasswordAndSalt($raw, $salt);","\t50:     public function isPasswordValid($encoded, $raw, $salt)","\t52:         if ($this->isPasswordTooLong($raw)) {","\t56:         $pass2 = $this->mergePasswordAndSalt($raw, $salt);","\t58:         if (!$this->ignorePasswordCase) {","\t59:             return $this->comparePasswords($encoded, $pass2);","\t62:         return $this->comparePasswords(strtolower($encoded), strtolower($pass2));","",""]},{"start":{"row":1147,"column":0},"end":{"row":1155,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/UserPasswordEncoder.php:","\t17:  * A generic password encoder","\t21: class UserPasswordEncoder implements UserPasswordEncoderInterface","\t39:     public function encodePassword(UserInterface $user, $plainPassword)","\t43:         return $encoder->encodePassword($plainPassword, $user->getSalt());","\t49:     public function isPasswordValid(UserInterface $user, $raw)","\t53:         return $encoder->isPasswordValid($user->getPassword(), $raw, $user->getSalt());","",""]},{"start":{"row":1155,"column":0},"end":{"row":1166,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Encoder/UserPasswordEncoderInterface.php:","\t17:  * UserPasswordEncoderInterface is the interface for the password encoder service.","\t21: interface UserPasswordEncoderInterface","\t25:      * Encodes the plain password.","\t28:      * @param string        $plainPassword The password to encode","\t30:      * @return string The encoded password","\t32:     public function encodePassword(UserInterface $user, $plainPassword);","\t36:      * @param string        $raw  A raw password","\t38:      * @return bool true if the password is valid, false otherwise","\t40:     public function isPasswordValid(UserInterface $user, $raw);","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1166,"column":0},"end":{"row":1171,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/AuthenticationProviderManagerTest.php:","\t18: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken;","\t102:             $this->getAuthenticationProvider(true, $token = new UsernamePasswordToken('foo', 'bar', 'key')),","\t109:             $this->getAuthenticationProvider(true, $token = new UsernamePasswordToken('foo', 'bar', 'key')),","",""]},{"start":{"row":1171,"column":0},"end":{"row":1192,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Provider/DaoAuthenticationProviderTest.php:","\t14: use Symfony\\Component\\Security\\Core\\Encoder\\PlaintextPasswordEncoder;","\t112:         $encoder = $this->getMock('Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\PasswordEncoderInterface');","\t115:             ->method('isPasswordValid')","\t138:         $encoder = $this->getMock('Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\PasswordEncoderInterface');","\t141:             ->method('isPasswordValid')","\t168:         $encoder = $this->getMock('Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\PasswordEncoderInterface');","\t170:                 ->method('isPasswordValid')","\t190:     public function testCheckAuthenticationDoesNotReauthenticateWhenPasswordHasChanged()","\t194:              ->method('getPassword')","\t205:                ->method('getPassword')","\t219:              ->method('getPassword')","\t230:                ->method('getPassword')","\t242:         $encoder = $this->getMock('Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\PasswordEncoderInterface');","\t244:                 ->method('isPasswordValid')","\t263:         $mock = $this->getMock('Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\UsernamePasswordToken', array('getCredentials', 'getUser', 'getProviderKey'), array(), '', false);","\t273:     protected function getProvider($user = null, $userChecker = null, $passwordEncoder = null)","\t287:         if (null === $passwordEncoder) {","\t288:             $passwordEncoder = new PlaintextPasswordEncoder();","\t295:             ->will($this->returnValue($passwordEncoder))","",""]},{"start":{"row":1192,"column":0},"end":{"row":1197,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Provider/UserAuthenticationProviderTest.php:","\t185:         $this->assertInstanceOf('Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken', $authToken);","\t220:         $this->assertInstanceOf('Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken', $authToken);","\t230:         $mock = $this->getMock('Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken', array('getCredentials', 'getProviderKey', 'getRoles'), array(), '', false);","",""]},{"start":{"row":1197,"column":0},"end":{"row":1208,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authentication/Token/UsernamePasswordTokenTest.php:","\t14: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken;","\t17: class UsernamePasswordTokenTest extends \\PHPUnit_Framework_TestCase","\t21:         $token = new UsernamePasswordToken('foo', 'bar', 'key');","\t24:         $token = new UsernamePasswordToken('foo', 'bar', 'key', array('ROLE_FOO'));","\t35:         $token = new UsernamePasswordToken('foo', 'bar', 'key');","\t41:         $token = new UsernamePasswordToken('foo', 'bar', 'key');","\t48:         $token = new UsernamePasswordToken('foo', 'bar', 'key');","\t55:         $token = new UsernamePasswordToken('foo', '', 'foo', array('A', 'B'));","\t56:         $this->assertEquals('UsernamePasswordToken(user=\"foo\", authenticated=true, roles=\"A, B\")', (string) $token);","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1208,"column":0},"end":{"row":1219,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Authorization/ExpressionLanguageTest.php:","\t18: use Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken;","\t44:         $user = new User('username', 'password', $roles);","\t49:         $usernamePasswordToken = new UsernamePasswordToken('username', 'password', 'providerkey', $roles);","\t71:             array($usernamePasswordToken, 'is_anonymous()', false),","\t72:             array($usernamePasswordToken, 'is_authenticated()', true),","\t73:             array($usernamePasswordToken, 'is_fully_authenticated()', true),","\t74:             array($usernamePasswordToken, 'is_remember_me()', false),","\t75:             array($usernamePasswordToken, \"has_role('ROLE_FOO')\", false, $roles),","\t76:             array($usernamePasswordToken, \"has_role('ROLE_USER')\", true, $roles),","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1219,"column":0},"end":{"row":1255,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Encoder/BasePasswordEncoderTest.php:","\t14: use Symfony\\Component\\Security\\Core\\Encoder\\BasePasswordEncoder;","\t16: class PasswordEncoder extends BasePasswordEncoder","\t18:     public function encodePassword($raw, $salt)","\t22:     public function isPasswordValid($encoded, $raw, $salt)","\t27: class BasePasswordEncoderTest extends \\PHPUnit_Framework_TestCase","\t29:     public function testComparePassword()","\t31:         $this->assertTrue($this->invokeComparePasswords('password', 'password'));","\t32:         $this->assertFalse($this->invokeComparePasswords('password', 'foo'));","\t35:     public function testDemergePasswordAndSalt()","\t37:         $this->assertEquals(array('password', 'salt'), $this->invokeDemergePasswordAndSalt('password{salt}'));","\t38:         $this->assertEquals(array('password', ''), $this->invokeDemergePasswordAndSalt('password'));","\t39:         $this->assertEquals(array('', ''), $this->invokeDemergePasswordAndSalt(''));","\t42:     public function testMergePasswordAndSalt()","\t44:         $this->assertEquals('password{salt}', $this->invokeMergePasswordAndSalt('password', 'salt'));","\t45:         $this->assertEquals('password', $this->invokeMergePasswordAndSalt('password', ''));","\t51:     public function testMergePasswordAndSaltWithException()","\t53:         $this->invokeMergePasswordAndSalt('password', '{foo}');","\t56:     public function testIsPasswordTooLong()","\t58:         $this->assertTrue($this->invokeIsPasswordTooLong(str_repeat('a', 10000)));","\t59:         $this->assertFalse($this->invokeIsPasswordTooLong(str_repeat('a', 10)));","\t62:     protected function invokeDemergePasswordAndSalt($password)","\t64:         $encoder = new PasswordEncoder();","\t66:         $m = $r->getMethod('demergePasswordAndSalt');","\t69:         return $m->invoke($encoder, $password);","\t72:     protected function invokeMergePasswordAndSalt($password, $salt)","\t74:         $encoder = new PasswordEncoder();","\t76:         $m = $r->getMethod('mergePasswordAndSalt');","\t79:         return $m->invoke($encoder, $password, $salt);","\t82:     protected function invokeComparePasswords($p1, $p2)","\t84:         $encoder = new PasswordEncoder();","\t86:         $m = $r->getMethod('comparePasswords');","\t92:     protected function invokeIsPasswordTooLong($p)","\t94:         $encoder = new PasswordEncoder();","\t96:         $m = $r->getMethod('isPasswordTooLong');","",""]},{"start":{"row":1255,"column":0},"end":{"row":1310,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Encoder/BCryptPasswordEncoderTest.php:","\t14: use Symfony\\Component\\Security\\Core\\Encoder\\BCryptPasswordEncoder;","\t19: class BCryptPasswordEncoderTest extends \\PHPUnit_Framework_TestCase","\t21:     const PASSWORD = 'password';","\t30:         new BCryptPasswordEncoder(3);","\t38:         new BCryptPasswordEncoder(32);","\t44:             new BCryptPasswordEncoder($cost);","\t52:         $encoder = new BCryptPasswordEncoder(self::VALID_COST);","\t53:         $result = $encoder->encodePassword(self::PASSWORD, null);","\t61:         $encoder = new BCryptPasswordEncoder(self::VALID_COST);","\t62:         $result = $encoder->encodePassword(self::PASSWORD, null);","\t63:         $this->assertTrue($encoder->isPasswordValid($result, self::PASSWORD, null));","\t64:         $this->assertFalse($encoder->isPasswordValid($result, 'anotherPassword', null));","\t77:     public function testEncodePasswordLength()","\t79:         $encoder = new BCryptPasswordEncoder(self::VALID_COST);","\t81:         $encoder->encodePassword(str_repeat('a', 5000), 'salt');","\t84:     public function testCheckPasswordLength()","\t86:         $encoder = new BCryptPasswordEncoder(self::VALID_COST);","\t88:         $this->assertFalse($encoder->isPasswordValid('encoded', str_repeat('a', 5000), 'salt'));","","/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Encoder/EncoderFactoryTest.php:","\t14: use Symfony\\Component\\Security\\Core\\Encoder\\MessageDigestPasswordEncoder;","\t25:             'class' => 'Symfony\\Component\\Security\\Core\\Encoder\\MessageDigestPasswordEncoder',","\t30:         $expectedEncoder = new MessageDigestPasswordEncoder('sha512', true, 5);","\t32:         $this->assertEquals($expectedEncoder->encodePassword('foo', 'moo'), $encoder->encodePassword('foo', 'moo'));","\t38:             'Symfony\\Component\\Security\\Core\\User\\UserInterface' => new MessageDigestPasswordEncoder('sha1'),","\t42:         $expectedEncoder = new MessageDigestPasswordEncoder('sha1');","\t43:         $this->assertEquals($expectedEncoder->encodePassword('foo', ''), $encoder->encodePassword('foo', ''));","\t46:         $expectedEncoder = new MessageDigestPasswordEncoder('sha1');","\t47:         $this->assertEquals($expectedEncoder->encodePassword('foo', ''), $encoder->encodePassword('foo', ''));","\t53:             'Symfony\\Component\\Security\\Core\\User\\UserInterface' => new MessageDigestPasswordEncoder('sha1'),","\t57:         $expectedEncoder = new MessageDigestPasswordEncoder('sha1');","\t58:         $this->assertEquals($expectedEncoder->encodePassword('foo', ''), $encoder->encodePassword('foo', ''));","\t64:             'Symfony\\Component\\Security\\Core\\User\\User' => new MessageDigestPasswordEncoder('sha1'),","\t68:         $expectedEncoder = new MessageDigestPasswordEncoder('sha1');","\t69:         $this->assertEquals($expectedEncoder->encodePassword('foo', ''), $encoder->encodePassword('foo', ''));","\t75:             'Symfony\\Component\\Security\\Core\\Tests\\Encoder\\SomeUser' => new MessageDigestPasswordEncoder('sha1'),","\t79:         $expectedEncoder = new MessageDigestPasswordEncoder('sha1');","\t80:         $this->assertEquals($expectedEncoder->encodePassword('foo', ''), $encoder->encodePassword('foo', ''));","\t86:             'Symfony\\Component\\Security\\Core\\Tests\\Encoder\\EncAwareUser' => new MessageDigestPasswordEncoder('sha256'),","\t87:             'encoder_name' => new MessageDigestPasswordEncoder('sha1'),","\t91:         $expectedEncoder = new MessageDigestPasswordEncoder('sha1');","\t92:         $this->assertEquals($expectedEncoder->encodePassword('foo', ''), $encoder->encodePassword('foo', ''));","\t98:             'Symfony\\Component\\Security\\Core\\Tests\\Encoder\\EncAwareUser' => new MessageDigestPasswordEncoder('sha1'),","\t99:             'encoder_name' => new MessageDigestPasswordEncoder('sha256'),","\t105:         $expectedEncoder = new MessageDigestPasswordEncoder('sha1');","\t106:         $this->assertEquals($expectedEncoder->encodePassword('foo', ''), $encoder->encodePassword('foo', ''));","\t115:             'Symfony\\Component\\Security\\Core\\Tests\\Encoder\\EncAwareUser' => new MessageDigestPasswordEncoder('sha1'),","\t116:             'encoder_name' => new MessageDigestPasswordEncoder('sha256'),","\t127:             'Symfony\\Component\\Security\\Core\\Tests\\Encoder\\EncAwareUser' => new MessageDigestPasswordEncoder('sha1'),","\t128:             'encoder_name' => new MessageDigestPasswordEncoder('sha256'),","\t132:         $expectedEncoder = new MessageDigestPasswordEncoder('sha1');","\t133:         $this->assertEquals($expectedEncoder->encodePassword('foo', ''), $encoder->encodePassword('foo', ''));","\t142:     public function getPassword()","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1310,"column":0},"end":{"row":1356,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Encoder/MessageDigestPasswordEncoderTest.php:","\t14: use Symfony\\Component\\Security\\Core\\Encoder\\MessageDigestPasswordEncoder;","\t16: class MessageDigestPasswordEncoderTest extends \\PHPUnit_Framework_TestCase","\t18:     public function testIsPasswordValid()","\t20:         $encoder = new MessageDigestPasswordEncoder('sha256', false, 1);","\t22:         $this->assertTrue($encoder->isPasswordValid(hash('sha256', 'password'), 'password', ''));","\t25:     public function testEncodePassword()","\t27:         $encoder = new MessageDigestPasswordEncoder('sha256', false, 1);","\t28:         $this->assertSame(hash('sha256', 'password'), $encoder->encodePassword('password', ''));","\t30:         $encoder = new MessageDigestPasswordEncoder('sha256', true, 1);","\t31:         $this->assertSame(base64_encode(hash('sha256', 'password', true)), $encoder->encodePassword('password', ''));","\t33:         $encoder = new MessageDigestPasswordEncoder('sha256', false, 2);","\t34:         $this->assertSame(hash('sha256', hash('sha256', 'password', true).'password'), $encoder->encodePassword('password', ''));","\t40:     public function testEncodePasswordAlgorithmDoesNotExist()","\t42:         $encoder = new MessageDigestPasswordEncoder('foobar');","\t43:         $encoder->encodePassword('password', '');","\t49:     public function testEncodePasswordLength()","\t51:         $encoder = new MessageDigestPasswordEncoder();","\t53:         $encoder->encodePassword(str_repeat('a', 5000), 'salt');","\t56:     public function testCheckPasswordLength()","\t58:         $encoder = new MessageDigestPasswordEncoder();","\t60:         $this->assertFalse($encoder->isPasswordValid('encoded', str_repeat('a', 5000), 'salt'));","","/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Encoder/Pbkdf2PasswordEncoderTest.php:","\t14: use Symfony\\Component\\Security\\Core\\Encoder\\Pbkdf2PasswordEncoder;","\t16: class Pbkdf2PasswordEncoderTest extends \\PHPUnit_Framework_TestCase","\t18:     public function testIsPasswordValid()","\t20:         $encoder = new Pbkdf2PasswordEncoder('sha256', false, 1, 40);","\t22:         $this->assertTrue($encoder->isPasswordValid('c1232f10f62715fda06ae7c0a2037ca19b33cf103b727ba56d870c11f290a2ab106974c75607c8a3', 'password', ''));","\t25:     public function testEncodePassword()","\t27:         $encoder = new Pbkdf2PasswordEncoder('sha256', false, 1, 40);","\t28:         $this->assertSame('c1232f10f62715fda06ae7c0a2037ca19b33cf103b727ba56d870c11f290a2ab106974c75607c8a3', $encoder->encodePassword('password', ''));","\t30:         $encoder = new Pbkdf2PasswordEncoder('sha256', true, 1, 40);","\t31:         $this->assertSame('wSMvEPYnFf2gaufAogN8oZszzxA7cnulbYcMEfKQoqsQaXTHVgfIow==', $encoder->encodePassword('password', ''));","\t33:         $encoder = new Pbkdf2PasswordEncoder('sha256', false, 2, 40);","\t34:         $this->assertSame('8bc2f9167a81cdcfad1235cd9047f1136271c1f978fcfcb35e22dbeafa4634f6fd2214218ed63ebb', $encoder->encodePassword('password', ''));","\t40:     public function testEncodePasswordAlgorithmDoesNotExist()","\t42:         $encoder = new Pbkdf2PasswordEncoder('foobar');","\t43:         $encoder->encodePassword('password', '');","\t49:     public function testEncodePasswordLength()","\t51:         $encoder = new Pbkdf2PasswordEncoder('foobar');","\t53:         $encoder->encodePassword(str_repeat('a', 5000), 'salt');","\t56:     public function testCheckPasswordLength()","\t58:         $encoder = new Pbkdf2PasswordEncoder('foobar');","\t60:         $this->assertFalse($encoder->isPasswordValid('encoded', str_repeat('a', 5000), 'salt'));","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1356,"column":0},"end":{"row":1398,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Encoder/PlaintextPasswordEncoderTest.php:","\t14: use Symfony\\Component\\Security\\Core\\Encoder\\PlaintextPasswordEncoder;","\t16: class PlaintextPasswordEncoderTest extends \\PHPUnit_Framework_TestCase","\t18:     public function testIsPasswordValid()","\t20:         $encoder = new PlaintextPasswordEncoder();","\t22:         $this->assertTrue($encoder->isPasswordValid('foo', 'foo', ''));","\t23:         $this->assertFalse($encoder->isPasswordValid('bar', 'foo', ''));","\t24:         $this->assertFalse($encoder->isPasswordValid('FOO', 'foo', ''));","\t26:         $encoder = new PlaintextPasswordEncoder(true);","\t28:         $this->assertTrue($encoder->isPasswordValid('foo', 'foo', ''));","\t29:         $this->assertFalse($encoder->isPasswordValid('bar', 'foo', ''));","\t30:         $this->assertTrue($encoder->isPasswordValid('FOO', 'foo', ''));","\t33:     public function testEncodePassword()","\t35:         $encoder = new PlaintextPasswordEncoder();","\t37:         $this->assertSame('foo', $encoder->encodePassword('foo', ''));","\t43:     public function testEncodePasswordLength()","\t45:         $encoder = new PlaintextPasswordEncoder();","\t47:         $encoder->encodePassword(str_repeat('a', 5000), 'salt');","\t50:     public function testCheckPasswordLength()","\t52:         $encoder = new PlaintextPasswordEncoder();","\t54:         $this->assertFalse($encoder->isPasswordValid('encoded', str_repeat('a', 5000), 'salt'));","","/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Encoder/UserPasswordEncoderTest.php:","\t14: use Symfony\\Component\\Security\\Core\\Encoder\\UserPasswordEncoder;","\t16: class UserPasswordEncoderTest extends \\PHPUnit_Framework_TestCase","\t18:     public function testEncodePassword()","\t25:         $mockEncoder = $this->getMock('Symfony\\Component\\Security\\Core\\Encoder\\PasswordEncoderInterface');","\t27:             ->method('encodePassword')","\t28:             ->with($this->equalTo('plainPassword'), $this->equalTo('userSalt'))","\t29:             ->will($this->returnValue('encodedPassword'));","\t37:         $passwordEncoder = new UserPasswordEncoder($mockEncoderFactory);","\t39:         $encoded = $passwordEncoder->encodePassword($userMock, 'plainPassword');","\t40:         $this->assertEquals('encodedPassword', $encoded);","\t43:     public function testIsPasswordValid()","\t50:             ->method('getPassword')","\t51:             ->will($this->returnValue('encodedPassword'));","\t53:         $mockEncoder = $this->getMock('Symfony\\Component\\Security\\Core\\Encoder\\PasswordEncoderInterface');","\t55:             ->method('isPasswordValid')","\t56:             ->with($this->equalTo('encodedPassword'), $this->equalTo('plainPassword'), $this->equalTo('userSalt'))","\t65:         $passwordEncoder = new UserPasswordEncoder($mockEncoderFactory);","\t67:         $isValid = $passwordEncoder->isPasswordValid($userMock, 'plainPassword');","",""]},{"start":{"row":1398,"column":0},"end":{"row":1403,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/User/InMemoryUserProviderTest.php:","\t23:                 'password' => 'foo',","\t30:         $this->assertEquals('foo', $user->getPassword());","\t41:         $this->assertEquals('foo', $user->getPassword());","",""]},{"start":{"row":1403,"column":0},"end":{"row":1404,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/User/UserTest.php:",""]},{"start":{"row":1404,"column":0},"end":{"row":1409,"column":0},"action":"insert","lines":["\t42:      * @covers Symfony\\Component\\Security\\Core\\User\\User::getPassword","\t44:     public function testGetPassword()","\t47:         $this->assertEquals('superpass', $user->getPassword());","\t124:         $this->assertEquals('superpass', $user->getPassword());","",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1409,"column":0},"end":{"row":1412,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Validator/Constraints/LegacyUserPasswordValidator2Dot4ApiTest.php:","\t21: class LegacyUserPasswordValidator2Dot4ApiTest extends UserPasswordValidatorTest","",""]},{"start":{"row":1412,"column":0},"end":{"row":1415,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Validator/Constraints/LegacyUserPasswordValidatorTest.php:","\t21: class LegacyUserPasswordValidatorApiTest extends UserPasswordValidatorTest","",""]},{"start":{"row":1415,"column":0},"end":{"row":1438,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Tests/Validator/Constraints/UserPasswordValidatorTest.php:","\t15: use Symfony\\Component\\Security\\Core\\Encoder\\PasswordEncoderInterface;","\t17: use Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPassword;","\t18: use Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator;","\t24: abstract class UserPasswordValidatorTest extends AbstractConstraintValidatorTest","\t26:     const PASSWORD = 's3Cr3t';","\t36:      * @var PasswordEncoderInterface","\t47:         return new UserPasswordValidator($this->securityContext, $this->encoderFactory);","\t54:         $this->encoder = $this->createPasswordEncoder();","\t60:     public function testPasswordIsValid()","\t62:         $constraint = new UserPassword(array(","\t67:             ->method('isPasswordValid')","\t68:             ->with(static::PASSWORD, 'secret', static::SALT)","\t76:     public function testPasswordIsNotValid()","\t78:         $constraint = new UserPassword(array(","\t83:             ->method('isPasswordValid')","\t84:             ->with(static::PASSWORD, 'secret', static::SALT)","\t104:         $this->validator->validate('secret', new UserPassword());","\t113:             ->method('getPassword')","\t114:             ->will($this->returnValue(static::PASSWORD))","\t126:     protected function createPasswordEncoder($isPasswordValid = true)","\t128:         return $this->getMock('Symfony\\Component\\Security\\Core\\Encoder\\PasswordEncoderInterface');","",""]},{"start":{"row":1438,"column":0},"end":{"row":1441,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/User/AdvancedUserInterface.php:","\t65:      * Checks whether the user's credentials (password) has expired.","",""]},{"start":{"row":1441,"column":0},"end":{"row":1447,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/User/InMemoryUserProvider.php:","\t33:      * an array of attributes: 'password', 'enabled', and 'roles'.","\t40:             $password = isset($attributes['password']) ? $attributes['password'] : null;","\t43:             $user = new User($username, $password, $roles, $enabled, true, true, true);","\t79:         return new User($user->getUsername(), $user->getPassword(), $user->getRoles(), $user->isEnabled(), $user->isAccountNonExpired(),","",""]},{"start":{"row":1447,"column":0},"end":{"row":1454,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/User/User.php:","\t24:     private $password;","\t31:     public function __construct($username, $password, array $roles = array(), $enabled = true, $userNonExpired = true, $credentialsNonExpired = true, $userNonLocked = true)","\t38:         $this->password = $password;","\t57:     public function getPassword()","\t59:         return $this->password;","",""]},{"start":{"row":1454,"column":0},"end":{"row":1465,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/User/UserInterface.php:","\t21:  * password (for checking against a submitted password), assigning roles","\t55:      * Returns the password used to authenticate the user.","\t57:      * This should be the encoded password. On authentication, a plain-text","\t58:      * password will be salted, encoded, and then compared to this value.","\t60:      * @return string The password","\t62:     public function getPassword();","\t65:      * Returns the salt that was originally used to encode the password.","\t67:      * This can return null if the password was not encoded using a salt.","\t84:      * the plain-text password is stored on this object.","",""]},{"start":{"row":1465,"column":0},"end":{"row":1470,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Validator/Constraints/UserPassword.php:","\t20: class UserPassword extends Constraint","\t22:     public $message = 'This value should be the user\\'s current password.';","\t23:     public $service = 'security.validator.user_password';","",""]},{"start":{"row":1470,"column":0},"end":{"row":1477,"column":0},"action":"insert","lines":["/vendor/symfony/security-core/Symfony/Component/Security/Core/Validator/Constraints/UserPasswordValidator.php:","\t22: class UserPasswordValidator extends ConstraintValidator","\t36:     public function validate($password, Constraint $constraint)","\t38:         if (!$constraint instanceof UserPassword) {","\t39:             throw new UnexpectedTypeException($constraint, __NAMESPACE__.'\\UserPassword');","\t50:         if (!$encoder->isPasswordValid($user->getPassword(), $password, $user->getSalt())) {","",""]},{"start":{"row":1477,"column":0},"end":{"row":1481,"column":0},"action":"insert","lines":["/vendor/vlucas/phpdotenv/README.md:","\t48: sensitive API keys and passwords. A separate `.env.example` file is created","\t56: be committed by collaborators.  This usage ensures that no sensitive passwords","",""]},{"start":{"row":1481,"column":0},"end":{"row":1482,"column":0},"action":"insert","lines":["Found 1417 matches in 184 files ",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1482,"column":0},"end":{"row":1483,"column":0},"action":"insert","lines":["",""]},{"start":{"row":0,"column":30},"end":{"row":0,"column":64},"action":"insert","lines":[" (Found 1417 matches in 184 files)"]}]}]]},"ace":{"folds":[],"customSyntax":"c9search","scrolltop":1140,"scrollleft":0,"selection":{"start":{"row":72,"column":14},"end":{"row":72,"column":23},"isBackwards":false},"options":{"tabSize":4,"useSoftTabs":true,"guessTabSize":false,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1428593096892}